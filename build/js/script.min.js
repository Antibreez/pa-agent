"use strict";!function(){var e=document.querySelectorAll(".checkbox-2__input");e[0]&&e.forEach((function(e){e.addEventListener("change",(function(e){var t=e.target;!0===t.checked?t.parentNode.classList.add("checked"):t.parentNode.classList.remove("checked")}))}))}(),$(".date-input").datepicker(),function(){var e=document.querySelectorAll(".input-file__label");function t(e){var t=e.querySelector("input");function n(e){e.preventDefault(),e.stopPropagation()}function i(t){e.classList.add("highlight")}function o(t){e.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(t){e.addEventListener(t,n,!1)})),["dragenter","dragover"].forEach((function(t){e.addEventListener(t,i,!1)})),["dragleave","drop"].forEach((function(t){e.addEventListener(t,o,!1)})),e.addEventListener("drop",(function(e){var n=e.dataTransfer.files;t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"));t.files=n,c()}),!1);var c=function(){a(t)},a=function(t){if(t.files&&t.files[0]){var n=new FileReader;n.onload=function(n){e.parentNode.classList.add("loaded"),e.nextElementSibling.querySelector(".file-load__name").textContent=t.files[0].name},n.readAsDataURL(t.files[0])}};t.addEventListener("change",c)}window.makeFileLoad=t,e[0]&&e.forEach((function(e){t(e)}))}(),function(){var e=document.querySelectorAll(".delivery-or-pickup__modal-time");if(e[0]){var t=new Inputmask("99:99");e.forEach((function(e){t.mask(e)}))}}(),function(){var e=document.querySelectorAll(".input-text");e[0]&&e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))}))}(),function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"));var t=document.querySelector("body");function n(e,t){this.trigger=e,this.modal=t,this.overlay=this.modal.querySelector(".modal__overlay"),this.closeBtn=this.modal.querySelector(".modal__close"),this.onOverlayClick=this.onOverlayClick.bind(this),this.onCloseClick=this.onCloseClick.bind(this),this.onTriggerClick=this.onTriggerClick.bind(this),this.onResize=this.onResize.bind(this),this.addEventListeners()}n.prototype.open=function(){this.modal.classList.add("js-show"),t.classList.add("js__body-no-scroll")},n.prototype.close=function(){this.modal.classList.remove("js-show"),t.classList.remove("js__body-no-scroll")},n.prototype.onOverlayClick=function(e){e.target===this.overlay&&this.close()},n.prototype.onCloseClick=function(){this.close()},n.prototype.onTriggerClick=function(){this.open()},n.prototype.onResize=function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"))},n.prototype.addEventListeners=function(){var e,t;this.overlay.addEventListener("click",this.onOverlayClick),this.closeBtn.addEventListener("click",this.onCloseClick),this.trigger.addEventListener("click",this.onTriggerClick),window.addEventListener("resize",(e=this.onResize,function(n){t&&clearTimeout(t),t=setTimeout(e,100,n)}))},window.Modal=n}(),function(){var e=document.querySelectorAll(".search"),t=document.querySelectorAll(".search + .search-close");e[0]&&(e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))})),t.forEach((function(e){e.addEventListener("click",(function(){var t=e.previousElementSibling;t.value="",t.classList.contains("js-inputed")&&t.classList.remove("js-inputed")}))})))}(),function(){function e(e){var t=e.text.split("splitter");return t.length>1?$("<span>"+t[0]+"</span><span>"+t[1]+"</span>"):e.text}$(".select").select2({templateResult:e,templateSelection:e}),$(".select").on("select2:select",(function(e){$(this).addClass("picked")}))}(),function(){var e=document.querySelector(".contract-info__cancellation");if(e){var t=document.getElementById("cancellation__modal");new Modal(e,t)}}(),$(".delivery-or-pickup.done").click((function(){$(this).find(".contract-info__delivered-adress").slideToggle(),$(this).find(".contract-info__delivered-toggle").toggleClass("opened")})),function(){if(document.querySelector(".contract-services")){var e=document.querySelectorAll(".contract-services__link"),t=function(e){var t=e.target;console.log(t.classList.contains("chekcbox-btn__label")),(t.classList.contains("checkbox-btn__label")||t.classList.contains("checkbox-btn__checkbox")||t.classList.contains("deliver-or-pickup__confirm-btn")||t.classList.contains("contract-services__delivery-confirm"))&&e.preventDefault()};e.forEach((function(e){e.addEventListener("click",t)}))}}(),document.querySelector(".contracts-all")&&$(".date-input").datepicker(),function(){var e=document.querySelectorAll(".deliver-or-pickup__confirm-btn");if(e[0]){$("#delivery-date").datepicker().on("change",(function(e){u()}));var t=document.getElementById("delivery-or-pickup__modal"),n=t.querySelector(".modal__close"),i=t.querySelector(".modal__overlay"),o=t.querySelector(".modal__submit"),c=t.querySelector(".delivery-or-pickup__modal-input-file"),a=t.querySelector(".input-file__input"),l=t.querySelector(".delivery-or-pickup__modal-date"),r=t.querySelector(".delivery-or-pickup__modal-time"),s=t.querySelector(".checkbox__input");e.forEach((function(e){new Modal(e,t)}));var d=function(){c.classList.contains("loaded")&&(c.classList.remove("loaded"),a.value="",o.setAttribute("disabled",""),/safari/i.test(navigator.userAgent)||(a.type="",a.type="file")),l.value="",r.value="",s.checked=!1,$("#delivery-date").datepicker("setDate","")},u=function(e){v()&&o.hasAttribute("disabled")?o.removeAttribute("disabled"):v()||o.hasAttribute("disabled")||o.setAttribute("disabled","")},v=function(){return $("#delivery-date").datepicker("getDate")&&""!==r.value&&!0===s.checked&&""!==a.value};n.addEventListener("click",d),i.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&d()})),l.addEventListener("input",u),r.addEventListener("input",u),a.addEventListener("change",u),s.addEventListener("change",u)}}(),$(".filters__btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){var e=document.querySelectorAll(".payment-waiting__confirm-btn");if(e[0]){$("#payment-date").datepicker();var t=document.getElementById("payment-waiting__modal"),n=t.querySelector(".modal__close"),i=t.querySelector(".modal__overlay"),o=t.querySelector(".transactions__check-all input"),c=t.querySelector(".payment-waiting__modal-sender input"),a=t.querySelector(".payment-waiting__modal-recipient input"),l=t.querySelector(".payment-waiting__modal-sum input"),r=t.querySelector(".payment-waiting__modal-purpose input"),s=function(){return t.querySelectorAll(".transactions__check input")},d=function(){o.checked=!1,s().forEach((function(e){e.checked=!1})),$("#payment-date").datepicker("setDate",""),c.value="",a.value="",l.value="",r.value=""};e.forEach((function(e){new Modal(e,t)})),n.addEventListener("click",d),i.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&d()})),o.addEventListener("change",(function(){s().forEach((function(e){o.checked?e.checked=!0:e.checked=!1}))}))}}(),function(){var e=document.querySelectorAll(".contract-device__schedule");if(e[0]){var t=document.getElementById("schedule__modal"),n=document.querySelectorAll(".schedule__modal-toggle input"),i=document.querySelector(".schedule__modal-toggle");n.forEach((function(e,t){e.addEventListener("change",(function(){0===t&&(i.classList.remove("second-tab"),i.classList.add("first-tab")),1===t&&(i.classList.remove("first-tab"),i.classList.add("second-tab"))}))})),e.forEach((function(e){new Modal(e,t)}))}}(),$(".support__docs-btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){var e=document.querySelector(".contract-info__verification");if(e){var t=document.getElementById("verification__modal"),n=t.querySelector(".verification__modal-input-file"),i=t.querySelector(".input-file__input"),o=t.querySelector(".modal__close"),c=t.querySelector(".modal__overlay"),a=document.querySelector(".modal__save"),l=function(){n.classList.contains("loaded")&&(n.classList.remove("loaded"),i.value="",a.setAttribute("disabled",""),/safari/i.test(navigator.userAgent)||(i.type="",i.type="file"))};new Modal(e,t),o.addEventListener("click",l),c.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&l()})),i.addEventListener("change",(function(){""!==i.value&&a.removeAttribute("disabled")}))}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyIsImNoZWNrYm94LTIuanMiLCJkYXRlLWlucHV0LmpzIiwiaW5wdXQtZmlsZS5qcyIsImlucHV0LW1hc2suanMiLCJpbnB1dC10ZXh0LmpzIiwibW9kYWwuanMiLCJzZWFyY2guanMiLCJzZWxlY3QuanMiLCJjYW5jZWxsYXRpb24tbW9kYWwuanMiLCJjb250cmFjdC1wYWdlLmpzIiwiY29udHJhY3Qtc2VydmljZXMuanMiLCJjb250cmFjdHMtYWxsLmpzIiwiZGVsaXZlcnktbW9kYWwuanMiLCJmaWx0ZXJzLmpzIiwicGF5bWVudC1jb25maXJtLW1vZGFsLmpzIiwic2NoZWR1bGUtbW9kYWwuanMiLCJzdXBwb3J0LmpzIiwidmVyaWZpY2F0aW9uLW1vZGFsLmpzIl0sIm5hbWVzIjpbImNoZWNrYm94MiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpdGVtIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJjaGVja2VkIiwicGFyZW50Tm9kZSIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIiQiLCJkYXRlcGlja2VyIiwiZmlsZURyb3BBcmVhIiwibWFrZUZpbGVMb2FkIiwiZmlsZUlucHV0IiwicXVlcnlTZWxlY3RvciIsInByZXZlbnREZWZhdWx0cyIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiaGlnaGxpZ2h0IiwidW5oaWdobGlnaHQiLCJldmVudE5hbWUiLCJmaWxlcyIsImRhdGFUcmFuc2ZlciIsInZhbHVlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInR5cGUiLCJvbkZpbGVDaGFuZ2UiLCJyZWFkVXJsIiwiaW5wdXQiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidGV4dENvbnRlbnQiLCJuYW1lIiwicmVhZEFzRGF0YVVSTCIsIndpbmRvdyIsImRlbGl2ZXJ5VGltZUlucHV0cyIsImltIiwiSW5wdXRtYXNrIiwibWFzayIsImlucHV0cyIsInNwbGl0Iiwiam9pbiIsImNvbnRhaW5zIiwidmgiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJjb25jYXQiLCIkYm9keSIsIk1vZGFsIiwidHJpZ2dlciIsIm1vZGFsIiwidGhpcyIsIm92ZXJsYXkiLCJjbG9zZUJ0biIsIm9uT3ZlcmxheUNsaWNrIiwiYmluZCIsIm9uQ2xvc2VDbGljayIsIm9uVHJpZ2dlckNsaWNrIiwib25SZXNpemUiLCJhZGRFdmVudExpc3RlbmVycyIsInByb3RvdHlwZSIsIm9wZW4iLCJjbG9zZSIsImZ1bmMiLCJ0aW1lciIsImV2ZW50IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIml0ZW1zIiwic2VhcmNoIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImZvcm1hdE9wdGlvbiIsInRleHQiLCJsZW5ndGgiLCJzZWxlY3QyIiwidGVtcGxhdGVSZXN1bHQiLCJ0ZW1wbGF0ZVNlbGVjdGlvbiIsIm9uIiwiYWRkQ2xhc3MiLCJjYW5jZWxsYXRpb25CdG4iLCJnZXRFbGVtZW50QnlJZCIsImNsaWNrIiwiZmluZCIsInNsaWRlVG9nZ2xlIiwidG9nZ2xlQ2xhc3MiLCJsaW5rcyIsIm9uTGlua0NsaWNrIiwiY29uc29sZSIsImxvZyIsImxpbmsiLCJkZWxpdmVyeUJ0bnMiLCJkYXRlVGV4dCIsIm9uRmllbGRDaGFuZ2UiLCJzdWJtaXQiLCJmaWxlSW5wdXRCbG9jayIsImRhdGVJbnB1dCIsInRpbWVJbnB1dCIsImNvbmZpcm1DaGVja2JveCIsImJ0biIsInNldEF0dHJpYnV0ZSIsImlzRm9ybUZpbGxlZCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInBhcmVudCIsIm5leHQiLCJwYXltZW50Q29uZmlybUJ0bnMiLCJtYWluQ2hlY2tib3giLCJzZW5kZXJJbnB1dCIsInJlY2lwaWVudElucHV0Iiwic3VtSW5wdXQiLCJwdXJwb3NlSW5wdXQiLCJnZXRBbGxDaGVja2JveCIsInNjaGVkdWxlQnRucyIsInJhZGlvcyIsInRvZ2dsZSIsImlkIiwidmVyaWZpY2F0aW9uQnRuIiwic2F2ZUJ0biJdLCJtYXBwaW5ncyI6IkFBQUEsY0NBQSxXQUNBLElBQUFBLEVBQUFDLFNBQUFDLGlCQUFBLHNCQUVBRixFQUFBLElBSUFBLEVBQUFHLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsaUJBQUEsVUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQUFDLFFBQ0EsSUFBQUEsRUFBQUMsUUFDQUQsRUFBQUUsV0FBQUMsVUFBQUMsSUFBQSxXQUVBSixFQUFBRSxXQUFBQyxVQUFBRSxPQUFBLGlCQWJBLEdDQ0FDLEVBQUEsZUFBQUMsYUNEQSxXQUNBLElBQUFDLEVBQUFkLFNBQUFDLGlCQUFBLHNCQUVBLFNBQUFjLEVBQUFELEdBQ0EsSUFBQUUsRUFBQUYsRUFBQUcsY0FBQSxTQU9BLFNBQUFDLEVBQUFiLEdBQ0FBLEVBQUFjLGlCQUNBZCxFQUFBZSxrQkFhQSxTQUFBQyxFQUFBaEIsR0FDQVMsRUFBQUwsVUFBQUMsSUFBQSxhQUdBLFNBQUFZLEVBQUFqQixHQUNBUyxFQUFBTCxVQUFBRSxPQUFBLGFBeEJBLENBQUEsWUFBQSxXQUFBLFlBQUEsUUFBQVQsU0FBQSxTQUFBcUIsR0FDQVQsRUFBQVYsaUJBQUFtQixFQUFBTCxHQUFBLE1BVUEsQ0FBQSxZQUFBLFlBQUFoQixTQUFBLFNBQUFxQixHQUNBVCxFQUFBVixpQkFBQW1CLEVBQUFGLEdBQUEsTUFHQSxDQUFBLFlBQUEsUUFBQW5CLFNBQUEsU0FBQXFCLEdBQ0FULEVBQUFWLGlCQUFBbUIsRUFBQUQsR0FBQSxNQWFBUixFQUFBVixpQkFBQSxRQUVBLFNBQUFDLEdBQ0EsSUFDQW1CLEVBREFuQixFQUFBb0IsYUFDQUQsTUFFQVIsRUFBQVEsT0FBQVIsRUFBQVEsTUFBQSxLQUNBUixFQUFBVSxNQUFBLEdBRUEsVUFBQUMsS0FBQUMsVUFBQUMsYUFDQWIsRUFBQWMsS0FBQSxHQUNBZCxFQUFBYyxLQUFBLFNBSUFkLEVBQUFRLE1B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T0FBQSxhQUNBZ0gsRUFBQWxILFVBQUFDLElBQUEscUJBS0ErRyxFQUFBdkgsU0FBQSxTQUFBQyxHQUNBLElBQUFzRCxNQUFBdEQsRUFBQXdELE9BMUJBLEdDQ0EvQyxFQUFBLHNCQUFBOEUsT0FBQSxXQUNBOUUsRUFBQWdELE1BQUFvRCxTQUFBQyxPQUFBckIsY0FDQWhGLEVBQUFnRCxNQUFBaUMsWUFBQSxhQ0hBLFdBQ0EsSUFBQWdDLEVBQUE3SCxTQUFBaUIsY0FBQSxnQ0FFQSxHQUFBNEcsRUFBQSxDQUlBLElBQUFsRSxFQUFBM0QsU0FBQXlGLGVBQUEsdUJBQ0FjLEVBQUE1QyxFQUFBMUMsY0FBQSxtQ0FDQUQsRUFBQTJDLEVBQUExQyxjQUFBLHNCQUNBc0QsRUFBQVosRUFBQTFDLGNBQUEsaUJBQ0E0QyxFQUFBRixFQUFBMUMsY0FBQSxtQkFDQTZHLEVBQUE5SCxTQUFBaUIsY0FBQSxnQkFFQWdELEVBQUEsV0FDQXNDLEVBQUE5RixVQUFBd0MsU0FBQSxZQUNBc0QsRUFBQTlGLFVBQUFFLE9BQUEsVUFFQUssRUFBQVUsTUFBQSxHQUNBb0csRUFBQWxCLGFBQUEsV0FBQSxJQUVBLFVBQUFqRixLQUFBQyxVQUFBQyxhQUNBYixFQUFBYyxLQUFBLEdBQ0FkLEVBQUFjLEtBQUEsVUFpQkEsSUFBQTJCLE1BQUFvRSxFQUFBbEUsR0FDQVksRUFBQW5FLGlCQUFBLFFBQUE2RCxHQUNBSixFQUFBekQsaUJBQUEsU0FkQSxTQUFBQyxHQUNBQSxFQUFBQyxPQUFBRyxVQUFBd0MsU0FBQSxtQkFDQWdCLE9BYUFqRCxFQUFBWixpQkFBQSxVQVRBLFdBQ0EsS0FBQVksRUFBQVUsT0FDQW9HLEVBQUFmLGdCQUFBLGdCQXBDQSIsImZpbGUiOiJzY3JpcHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBjaGVja2JveDIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2hlY2tib3gtMl9faW5wdXQnKTtcblxuICBpZiAoIWNoZWNrYm94MlswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoZWNrYm94Mi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuXG4gICAgICBpZiAodGFyZ2V0LmNoZWNrZWQgPT09IHRydWUpIHtcbiAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQoJy5kYXRlLWlucHV0JykuZGF0ZXBpY2tlcigpO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZpbGVEcm9wQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dC1maWxlX19sYWJlbCcpO1xuXG4gIGZ1bmN0aW9uIG1ha2VGaWxlTG9hZChmaWxlRHJvcEFyZWEpIHtcbiAgICB2YXIgZmlsZUlucHV0ID0gZmlsZURyb3BBcmVhLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7IC8vINCh0LHRgNCw0YHRi9Cy0LDQtdC8INGB0YLQsNC90LTQsNGA0YLQvdGL0LUg0YHQvtCx0YvRgtC40Y8g0L/RgNC4INC/0LXRgNC10YLQsNGB0LrQuNCy0LDQvdC40Lgg0YTQsNC50LvQsFxuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInLCAnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdHMoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICA7IC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgdGC0LjQu9C4INC/0YDQuCDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNC4INGE0LDQudC70LAg0L3QsNC0INC90YPQttC90L7QuSDQvtCx0LvQsNGB0YLRjNGOXG5cbiAgICBbJ2RyYWdlbnRlcicsICdkcmFnb3ZlciddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoaWdobGlnaHQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVuaGlnaGxpZ2h0LCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBoaWdobGlnaHQoZSkge1xuICAgICAgZmlsZURyb3BBcmVhLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpO1xuICAgIH1cblxuICAgIDtcblxuICAgIGZ1bmN0aW9uIHVuaGlnaGxpZ2h0KGUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcbiAgICB9XG5cbiAgICA7IC8vXG5cbiAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGhhbmRsZURyb3AsIGZhbHNlKTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZURyb3AoZSkge1xuICAgICAgdmFyIGR0ID0gZS5kYXRhVHJhbnNmZXI7XG4gICAgICB2YXIgZmlsZXMgPSBkdC5maWxlcztcblxuICAgICAgaWYgKGZpbGVJbnB1dC5maWxlcyAmJiBmaWxlSW5wdXQuZmlsZXNbMF0pIHtcbiAgICAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG5cbiAgICAgICAgaWYgKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmlsZUlucHV0LmZpbGVzID0gZmlsZXM7XG4gICAgICBvbkZpbGVDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICA7XG5cbiAgICB2YXIgb25GaWxlQ2hhbmdlID0gZnVuY3Rpb24gb25GaWxlQ2hhbmdlKCkge1xuICAgICAgcmVhZFVybChmaWxlSW5wdXQpO1xuICAgIH07XG5cbiAgICB2YXIgcmVhZFVybCA9IGZ1bmN0aW9uIHJlYWRVcmwoaW5wdXQpIHtcbiAgICAgIGlmIChpbnB1dC5maWxlcyAmJiBpbnB1dC5maWxlc1swXSkge1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKTtcbiAgICAgICAgICBmaWxlRHJvcEFyZWEubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX25hbWUnKS50ZXh0Q29udGVudCA9IGlucHV0LmZpbGVzWzBdLm5hbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoaW5wdXQuZmlsZXNbMF0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWxlQ2hhbmdlKTtcbiAgfVxuXG4gIHdpbmRvdy5tYWtlRmlsZUxvYWQgPSBtYWtlRmlsZUxvYWQ7XG5cbiAgaWYgKCFmaWxlRHJvcEFyZWFbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaWxlRHJvcEFyZWEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIG1ha2VGaWxlTG9hZChpdGVtKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgZGVsaXZlcnlUaW1lSW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtdGltZScpO1xuXG4gIGlmICghZGVsaXZlcnlUaW1lSW5wdXRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGltID0gbmV3IElucHV0bWFzayhcIjk5Ojk5XCIpO1xuICBkZWxpdmVyeVRpbWVJbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGltLm1hc2soaXRlbSk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dC10ZXh0Jyk7XG5cbiAgaWYgKCFpbnB1dHNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlucHV0LnZhbHVlLnNwbGl0KCcgJykuam9pbignJykgPT09ICcnKSB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnB1dC52YWx1ZSAhPT0gJycgJiYgIWlucHV0LmNsYXNzTGlzdC5jb250YWlucygnanMtaW5wdXRlZCcpKSB7XG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlucHV0LnZhbHVlID09PSAnJyAmJiBpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKSkge1xuICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZoID0gd2luZG93LmlubmVySGVpZ2h0ICogMC4wMTtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXZoJywgXCJcIi5jb25jYXQodmgsIFwicHhcIikpO1xuICB2YXIgJGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYykge1xuICAgIHZhciB0aW1lcjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodGltZXIpIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuYywgMTAwLCBldmVudCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE1vZGFsKHRyaWdnZXIsIG1vZGFsKSB7XG4gICAgdGhpcy50cmlnZ2VyID0gdHJpZ2dlcjtcbiAgICB0aGlzLm1vZGFsID0gbW9kYWw7XG4gICAgdGhpcy5vdmVybGF5ID0gdGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgICB0aGlzLmNsb3NlQnRuID0gdGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gICAgdGhpcy5vbk92ZXJsYXlDbGljayA9IHRoaXMub25PdmVybGF5Q2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xvc2VDbGljayA9IHRoaXMub25DbG9zZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblRyaWdnZXJDbGljayA9IHRoaXMub25UcmlnZ2VyQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUmVzaXplID0gdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LmFkZCgnanMtc2hvdycpO1xuICAgICRib2R5LmNsYXNzTGlzdC5hZGQoJ2pzX19ib2R5LW5vLXNjcm9sbCcpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLXNob3cnKTtcbiAgICAkYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdqc19fYm9keS1uby1zY3JvbGwnKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUub25PdmVybGF5Q2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcy5vdmVybGF5KSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5vbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5vblRyaWdnZXJDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm9wZW4oKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZoID0gd2luZG93LmlubmVySGVpZ2h0ICogMC4wMTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tdmgnLCBcIlwiLmNvbmNhdCh2aCwgXCJweFwiKSk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25PdmVybGF5Q2xpY2spO1xuICAgIHRoaXMuY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xvc2VDbGljayk7XG4gICAgdGhpcy50cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vblRyaWdnZXJDbGljayk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlKHRoaXMub25SZXNpemUpKTtcbiAgfTtcblxuICB3aW5kb3cuTW9kYWwgPSBNb2RhbDtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBpdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWFyY2gnKTtcbiAgdmFyIGNsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlYXJjaCArIC5zZWFyY2gtY2xvc2UnKTtcblxuICBpZiAoIWl0ZW1zWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgLy8gICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT57XG4gIC8vICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdqcy1mb2N1cycpO1xuICAvLyAgIH0pO1xuICAvLyB9KTtcblxuXG4gIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXRlbS52YWx1ZS5zcGxpdCgnICcpLmpvaW4oJycpID09PSAnJykge1xuICAgICAgICBpdGVtLnZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtLnZhbHVlICE9PSAnJyAmJiAhaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKSkge1xuICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW0udmFsdWUgPT09ICcnICYmIGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJykpIHtcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBjbG9zZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWFyY2ggPSBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICBzZWFyY2gudmFsdWUgPSAnJztcblxuICAgICAgaWYgKHNlYXJjaC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKSkge1xuICAgICAgICBzZWFyY2guY2xhc3NMaXN0LnJlbW92ZSgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE9wdGlvbihpdGVtKSB7XG4gICAgdmFyIHZhbHVlID0gaXRlbS50ZXh0LnNwbGl0KCdzcGxpdHRlcicpO1xuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciByZXN1bHQgPSAkKCc8c3Bhbj4nICsgdmFsdWVbMF0gKyAnPC9zcGFuPjxzcGFuPicgKyB2YWx1ZVsxXSArICc8L3NwYW4+Jyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXh0O1xuICAgIH1cbiAgfVxuXG4gICQoJy5zZWxlY3QnKS5zZWxlY3QyKHtcbiAgICB0ZW1wbGF0ZVJlc3VsdDogZm9ybWF0T3B0aW9uLFxuICAgIHRlbXBsYXRlU2VsZWN0aW9uOiBmb3JtYXRPcHRpb25cbiAgfSk7XG4gICQoJy5zZWxlY3QnKS5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuICAgICQodGhpcykuYWRkQ2xhc3MoJ3BpY2tlZCcpO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBjYW5jZWxsYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udHJhY3QtaW5mb19fY2FuY2VsbGF0aW9uJyk7XG5cbiAgaWYgKCFjYW5jZWxsYXRpb25CdG4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsbGF0aW9uX19tb2RhbCcpO1xuICBuZXcgTW9kYWwoY2FuY2VsbGF0aW9uQnRuLCBtb2RhbCk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkgey8vIGNvbnN0IGRhdGFCbG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cmFjdC1jcmVhdGlvbicpO1xuICAvLyBpZiAoIWRhdGFCbG9jaykge1xuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuICAvLyBjb25zdCByYWRpb3MgPSBkYXRhQmxvY2sucXVlcnlTZWxlY3RvckFsbCgnLnJhZGlvX19pbnB1dCcpO1xuICAvLyBjb25zdCBuZXh0QnRuID0gZGF0YUJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5jb250cmFjdC1wYXltZW50X19uZXh0Jyk7XG4gIC8vIGxldCBzZWxlY3RlZCA9IDA7XG4gIC8vIGZ1bmN0aW9uIGlzUmFkaW9DaGVja2VkICgpIHtcbiAgLy8gICBsZXQgaXNDaGVja2VkID0gZmFsc2U7XG4gIC8vICAgcmFkaW9zLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgICAgaWYgKGl0ZW0uY2hlY2tlZCkge1xuICAvLyAgICAgICBpc0NoZWNrZWQgPSB0cnVlO1xuICAvLyAgICAgfVxuICAvLyAgIH0pO1xuICAvLyAgIHJldHVybiBpc0NoZWNrZWQ7XG4gIC8vIH1cbiAgLy8gZnVuY3Rpb24gY2hlY2tEYXRhICgpIHtcbiAgLy8gICBpZiAoXG4gIC8vICAgICBzZWxlY3RlZCA+PSAzXG4gIC8vICAgICAmJiBpc1JhZGlvQ2hlY2tlZCgpXG4gIC8vICAgKSB7XG4gIC8vICAgICBpZiAobmV4dEJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgLy8gICAgICAgbmV4dEJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgLy8gICAgIH1cbiAgLy8gICB9IGVsc2Uge1xuICAvLyAgICAgaWYgKCFuZXh0QnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAvLyAgICAgICBuZXh0QnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyB9XG4gIC8vICQoJy5jb250cmFjdC1zdWJqZWN0X19hZ2VudCcpLm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uKGUpIHtcbiAgLy8gICBzZWxlY3RlZCArPSAxO1xuICAvLyAgIGNoZWNrRGF0YSgpO1xuICAvLyB9KVxuICAvLyAkKCcuY29udHJhY3Qtc3ViamVjdF9fc2VydmljZScpLm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uKCkge1xuICAvLyAgIHNlbGVjdGVkICs9MTtcbiAgLy8gICBjaGVja0RhdGEoKTtcbiAgLy8gfSlcbiAgLy8gcmFkaW9zLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gIC8vICAgICBjaGVja0RhdGEoKTtcbiAgLy8gICB9KVxuICAvLyB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQoJy5kZWxpdmVyeS1vci1waWNrdXAuZG9uZScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMpLmZpbmQoJy5jb250cmFjdC1pbmZvX19kZWxpdmVyZWQtYWRyZXNzJykuc2xpZGVUb2dnbGUoKTtcbiAgICAkKHRoaXMpLmZpbmQoJy5jb250cmFjdC1pbmZvX19kZWxpdmVyZWQtdG9nZ2xlJykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBjb250cmFjdFNlcnZpY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0LXNlcnZpY2VzJyk7XG5cbiAgaWYgKCFjb250cmFjdFNlcnZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LXNlcnZpY2VzX19saW5rJyk7XG5cbiAgdmFyIG9uTGlua0NsaWNrID0gZnVuY3Rpb24gb25MaW5rQ2xpY2soZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBjb25zb2xlLmxvZyh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVrY2JveC1idG5fX2xhYmVsJykpO1xuXG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrYm94LWJ0bl9fbGFiZWwnKSB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2JveC1idG5fX2NoZWNrYm94JykgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZGVsaXZlci1vci1waWNrdXBfX2NvbmZpcm0tYnRuJykgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY29udHJhY3Qtc2VydmljZXNfX2RlbGl2ZXJ5LWNvbmZpcm0nKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICBsaW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uTGlua0NsaWNrKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgY29udHJhY3RzQWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0cy1hbGwnKTtcblxuICBpZiAoIWNvbnRyYWN0c0FsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gICQoJy5kYXRlLWlucHV0JykuZGF0ZXBpY2tlcigpO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlbGl2ZXJ5QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWxpdmVyLW9yLXBpY2t1cF9fY29uZmlybS1idG4nKTtcblxuICBpZiAoIWRlbGl2ZXJ5QnRuc1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gICQoJyNkZWxpdmVyeS1kYXRlJykuZGF0ZXBpY2tlcigpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZGF0ZVRleHQpIHtcbiAgICBvbkZpZWxkQ2hhbmdlKCk7XG4gIH0pO1xuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbCcpO1xuICB2YXIgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIHZhciBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gIHZhciBzdWJtaXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3N1Ym1pdCcpO1xuICB2YXIgZmlsZUlucHV0QmxvY2sgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC1pbnB1dC1maWxlJyk7XG4gIHZhciBmaWxlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgdmFyIGRhdGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kZWxpdmVyeS1vci1waWNrdXBfX21vZGFsLWRhdGUnKTtcbiAgdmFyIHRpbWVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kZWxpdmVyeS1vci1waWNrdXBfX21vZGFsLXRpbWUnKTtcbiAgdmFyIGNvbmZpcm1DaGVja2JveCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jaGVja2JveF9faW5wdXQnKTtcbiAgZGVsaXZlcnlCdG5zLmZvckVhY2goZnVuY3Rpb24gKGJ0bikge1xuICAgIG5ldyBNb2RhbChidG4sIG1vZGFsKTtcbiAgfSk7XG5cbiAgdmFyIG9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uIG9uQ2xvc2VDbGljaygpIHtcbiAgICBpZiAoZmlsZUlucHV0QmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2FkZWQnKSkge1xuICAgICAgZmlsZUlucHV0QmxvY2suY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkJyk7XG4gICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcbiAgICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuXG4gICAgICBpZiAoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRhdGVJbnB1dC52YWx1ZSA9ICcnO1xuICAgIHRpbWVJbnB1dC52YWx1ZSA9ICcnO1xuICAgIGNvbmZpcm1DaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgJCgnI2RlbGl2ZXJ5LWRhdGUnKS5kYXRlcGlja2VyKCdzZXREYXRlJywgJycpO1xuICB9O1xuXG4gIHZhciBvbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uIG9uT3ZlcmxheUNsaWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbF9fb3ZlcmxheScpKSB7XG4gICAgICBvbkNsb3NlQ2xpY2soKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uRmllbGRDaGFuZ2UgPSBmdW5jdGlvbiBvbkZpZWxkQ2hhbmdlKGUpIHtcbiAgICBpZiAoaXNGb3JtRmlsbGVkKCkgJiYgc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgc3VibWl0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICB9IGVsc2UgaWYgKCFpc0Zvcm1GaWxsZWQoKSAmJiAhc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Zvcm1GaWxsZWQgPSBmdW5jdGlvbiBpc0Zvcm1GaWxsZWQoKSB7XG4gICAgcmV0dXJuICQoJyNkZWxpdmVyeS1kYXRlJykuZGF0ZXBpY2tlcignZ2V0RGF0ZScpICYmIHRpbWVJbnB1dC52YWx1ZSAhPT0gJycgJiYgY29uZmlybUNoZWNrYm94LmNoZWNrZWQgPT09IHRydWUgJiYgZmlsZUlucHV0LnZhbHVlICE9PSAnJztcbiAgfTtcblxuICBjbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xvc2VDbGljayk7XG4gIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbk92ZXJsYXlDbGljayk7XG4gIGRhdGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uRmllbGRDaGFuZ2UpO1xuICB0aW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkZpZWxkQ2hhbmdlKTtcbiAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmllbGRDaGFuZ2UpO1xuICBjb25maXJtQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWVsZENoYW5nZSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAkKCcuZmlsdGVyc19fYnRuJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykucGFyZW50KCkubmV4dCgpLnNsaWRlVG9nZ2xlKCk7XG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcygnb3BlbmVkJyk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBheW1lbnRDb25maXJtQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYXltZW50LXdhaXRpbmdfX2NvbmZpcm0tYnRuJyk7XG5cbiAgaWYgKCFwYXltZW50Q29uZmlybUJ0bnNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAkKCcjcGF5bWVudC1kYXRlJykuZGF0ZXBpY2tlcigpO1xuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGF5bWVudC13YWl0aW5nX19tb2RhbCcpO1xuICB2YXIgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIHZhciBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gIHZhciBtYWluQ2hlY2tib3ggPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcudHJhbnNhY3Rpb25zX19jaGVjay1hbGwgaW5wdXQnKTtcbiAgdmFyIHNlbmRlcklucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc2VuZGVyIGlucHV0Jyk7XG4gIHZhciByZWNpcGllbnRJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXJlY2lwaWVudCBpbnB1dCcpO1xuICB2YXIgc3VtSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1zdW0gaW5wdXQnKTtcbiAgdmFyIHB1cnBvc2VJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXB1cnBvc2UgaW5wdXQnKTtcblxuICB2YXIgZ2V0QWxsQ2hlY2tib3ggPSBmdW5jdGlvbiBnZXRBbGxDaGVja2JveCgpIHtcbiAgICByZXR1cm4gbW9kYWwucXVlcnlTZWxlY3RvckFsbCgnLnRyYW5zYWN0aW9uc19fY2hlY2sgaW5wdXQnKTtcbiAgfTtcblxuICB2YXIgb25BbGxDaGFuZ2UgPSBmdW5jdGlvbiBvbkFsbENoYW5nZSgpIHtcbiAgICBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmIChtYWluQ2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIG9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uIG9uQ2xvc2VDbGljaygpIHtcbiAgICBtYWluQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgIGdldEFsbENoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgfSk7XG4gICAgJCgnI3BheW1lbnQtZGF0ZScpLmRhdGVwaWNrZXIoJ3NldERhdGUnLCAnJyk7XG4gICAgc2VuZGVySW5wdXQudmFsdWUgPSAnJztcbiAgICByZWNpcGllbnRJbnB1dC52YWx1ZSA9ICcnO1xuICAgIHN1bUlucHV0LnZhbHVlID0gJyc7XG4gICAgcHVycG9zZUlucHV0LnZhbHVlID0gJyc7XG4gIH07XG5cbiAgdmFyIG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24gb25PdmVybGF5Q2xpY2soZSkge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgICAgIG9uQ2xvc2VDbGljaygpO1xuICAgIH1cbiAgfTtcblxuICBwYXltZW50Q29uZmlybUJ0bnMuZm9yRWFjaChmdW5jdGlvbiAoYnRuKSB7XG4gICAgbmV3IE1vZGFsKGJ0biwgbW9kYWwpO1xuICB9KTtcbiAgY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xuICBtYWluQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25BbGxDaGFuZ2UpO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNjaGVkdWxlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1kZXZpY2VfX3NjaGVkdWxlJyk7XG5cbiAgaWYgKCFzY2hlZHVsZUJ0bnNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NoZWR1bGVfX21vZGFsJyk7XG4gIHZhciByYWRpb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2NoZWR1bGVfX21vZGFsLXRvZ2dsZSBpbnB1dCcpO1xuICB2YXIgdG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjaGVkdWxlX19tb2RhbC10b2dnbGUnKTtcbiAgcmFkaW9zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGlkKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaWQgPT09IDApIHtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ3NlY29uZC10YWInKTtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ2ZpcnN0LXRhYicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWQgPT09IDEpIHtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ2ZpcnN0LXRhYicpO1xuICAgICAgICB0b2dnbGUuY2xhc3NMaXN0LmFkZCgnc2Vjb25kLXRhYicpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgc2NoZWR1bGVCdG5zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQoJy5zdXBwb3J0X19kb2NzLWJ0bicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMpLnBhcmVudCgpLm5leHQoKS5zbGlkZVRvZ2dsZSgpO1xuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG5cbiAgaWYgKCF2ZXJpZmljYXRpb25CdG4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmVyaWZpY2F0aW9uX19tb2RhbCcpO1xuICB2YXIgZmlsZUlucHV0QmxvY2sgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcudmVyaWZpY2F0aW9uX19tb2RhbC1pbnB1dC1maWxlJyk7XG4gIHZhciBmaWxlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgdmFyIGNsb3NlID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuICB2YXIgb3ZlcmxheSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICB2YXIgc2F2ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc2F2ZScpO1xuXG4gIHZhciBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbiBvbkNsb3NlQ2xpY2soKSB7XG4gICAgaWYgKGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5jb250YWlucygnbG9hZGVkJykpIHtcbiAgICAgIGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuICAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG4gICAgICBzYXZlQnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG5cbiAgICAgIGlmICghL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBvbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uIG9uT3ZlcmxheUNsaWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbF9fb3ZlcmxheScpKSB7XG4gICAgICBvbkNsb3NlQ2xpY2soKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uSW5wdXRDaGFuZ2UgPSBmdW5jdGlvbiBvbklucHV0Q2hhbmdlKCkge1xuICAgIGlmIChmaWxlSW5wdXQudmFsdWUgIT09ICcnKSB7XG4gICAgICBzYXZlQnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICB9XG4gIH07XG5cbiAgbmV3IE1vZGFsKHZlcmlmaWNhdGlvbkJ0biwgbW9kYWwpO1xuICBjbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xvc2VDbGljayk7XG4gIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbk92ZXJsYXlDbGljayk7XG4gIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbklucHV0Q2hhbmdlKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBjaGVja2JveDIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2hlY2tib3gtMl9faW5wdXQnKTtcblxuICBpZiAoIWNoZWNrYm94MlswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoZWNrYm94Mi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldC5jaGVja2VkID09PSB0cnVlKSB7XG4gICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSlcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICQoJy5kYXRlLWlucHV0JykuZGF0ZXBpY2tlcigpO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgZmlsZURyb3BBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0LWZpbGVfX2xhYmVsJyk7XG5cbiAgZnVuY3Rpb24gbWFrZUZpbGVMb2FkKGZpbGVEcm9wQXJlYSkge1xuICAgIGNvbnN0IGZpbGVJbnB1dCA9IGZpbGVEcm9wQXJlYS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIC8vINCh0LHRgNCw0YHRi9Cy0LDQtdC8INGB0YLQsNC90LTQsNGA0YLQvdGL0LUg0YHQvtCx0YvRgtC40Y8g0L/RgNC4INC/0LXRgNC10YLQsNGB0LrQuNCy0LDQvdC40Lgg0YTQsNC50LvQsFxuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInLCAnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHByZXZlbnREZWZhdWx0cywgZmFsc2UpXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdHMgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgdGC0LjQu9C4INC/0YDQuCDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNC4INGE0LDQudC70LAg0L3QsNC0INC90YPQttC90L7QuSDQvtCx0LvQsNGB0YLRjNGOXG5cbiAgICBbJ2RyYWdlbnRlcicsICdkcmFnb3ZlciddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIGZpbGVEcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGlnaGxpZ2h0LCBmYWxzZSlcbiAgICB9KTtcblxuICAgIFsnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVuaGlnaGxpZ2h0LCBmYWxzZSlcbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gaGlnaGxpZ2h0KGUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdW5oaWdobGlnaHQoZSkge1xuICAgICAgZmlsZURyb3BBcmVhLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xuICAgIH07XG5cbiAgICAvL1xuXG4gICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wLCBmYWxzZSlcblxuICAgIGZ1bmN0aW9uIGhhbmRsZURyb3AoZSkge1xuICAgICAgbGV0IGR0ID0gZS5kYXRhVHJhbnNmZXJcbiAgICAgIGxldCBmaWxlcyA9IGR0LmZpbGVzXG5cbiAgICAgIGlmIChmaWxlSW5wdXQuZmlsZXMgJiYgZmlsZUlucHV0LmZpbGVzWzBdKSB7XG4gICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgICAgIGlmKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSl7XG4gICAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaWxlSW5wdXQuZmlsZXMgPSBmaWxlcztcbiAgICAgIG9uRmlsZUNoYW5nZSgpO1xuICAgIH07XG5cbiAgICBjb25zdCBvbkZpbGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICByZWFkVXJsKGZpbGVJbnB1dCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVhZFVybCA9IChpbnB1dCkgPT4ge1xuICAgICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpO1xuICAgICAgICAgIGZpbGVEcm9wQXJlYVxuICAgICAgICAgICAgLm5leHRFbGVtZW50U2libGluZ1xuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX25hbWUnKVxuICAgICAgICAgICAgLnRleHRDb250ZW50ID0gaW5wdXQuZmlsZXNbMF0ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGlucHV0LmZpbGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWxlQ2hhbmdlKTtcbiAgfVxuXG4gIHdpbmRvdy5tYWtlRmlsZUxvYWQgPSBtYWtlRmlsZUxvYWQ7XG5cblxuICBpZiAoIWZpbGVEcm9wQXJlYVswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpbGVEcm9wQXJlYS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBtYWtlRmlsZUxvYWQoaXRlbSk7XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgZGVsaXZlcnlUaW1lSW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtdGltZScpO1xuXG4gIGlmICghZGVsaXZlcnlUaW1lSW5wdXRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGltID0gbmV3IElucHV0bWFzayhcIjk5Ojk5XCIpO1xuXG4gIGRlbGl2ZXJ5VGltZUlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpbS5tYXNrKGl0ZW0pO1xuICB9KTtcblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0LXRleHQnKTtcblxuICBpZiAoIWlucHV0c1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKFxuICAgICAgICBpbnB1dC52YWx1ZS5zcGxpdCgnICcpLmpvaW4oJycpID09PSAnJ1xuICAgICAgKSB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgaW5wdXQudmFsdWUgIT09ICcnXG4gICAgICAgICYmICFpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKVxuICAgICAgKSB7XG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpbnB1dC52YWx1ZSA9PT0gJydcbiAgICAgICAgJiYgaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJylcbiAgICAgICkge1xuICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSkoKTtcbiIsIigoKSA9PiB7XG4gIGxldCB2aCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIDAuMDE7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIGAke3ZofXB4YCk7XG5cbiAgY29uc3QgJGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYyl7XG4gICAgdmFyIHRpbWVyO1xuICAgIHJldHVybiBmdW5jdGlvbihldmVudCl7XG4gICAgICBpZih0aW1lcikgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jLDEwMCxldmVudCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE1vZGFsICh0cmlnZ2VyLCBtb2RhbCkge1xuICAgIHRoaXMudHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgdGhpcy5tb2RhbCA9IG1vZGFsO1xuICAgIHRoaXMub3ZlcmxheSA9IHRoaXMubW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gICAgdGhpcy5jbG9zZUJ0biA9IHRoaXMubW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuXG4gICAgdGhpcy5vbk92ZXJsYXlDbGljayA9IHRoaXMub25PdmVybGF5Q2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xvc2VDbGljayA9IHRoaXMub25DbG9zZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblRyaWdnZXJDbGljayA9IHRoaXMub25UcmlnZ2VyQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUmVzaXplID0gdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoJ2pzLXNob3cnKTtcbiAgICAkYm9keS5jbGFzc0xpc3QuYWRkKCdqc19fYm9keS1uby1zY3JvbGwnKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnanMtc2hvdycpO1xuICAgICRib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2pzX19ib2R5LW5vLXNjcm9sbCcpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcy5vdmVybGF5KSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vblRyaWdnZXJDbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub3BlbigpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXZoJywgYCR7dmh9cHhgKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uT3ZlcmxheUNsaWNrKTtcbiAgICB0aGlzLmNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsb3NlQ2xpY2spO1xuICAgIHRoaXMudHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25UcmlnZ2VyQ2xpY2spO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZSh0aGlzLm9uUmVzaXplKSk7XG4gIH1cblxuICB3aW5kb3cuTW9kYWwgPSBNb2RhbDtcbn0pKCk7XG4iLCIoKCkgPT4ge1xuICBjb25zdCBpdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWFyY2gnKTtcbiAgY29uc3QgY2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VhcmNoICsgLnNlYXJjaC1jbG9zZScpO1xuXG4gIGlmICghaXRlbXNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gIC8vICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+e1xuICAvLyAgICAgaXRlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnanMtZm9jdXMnKTtcbiAgLy8gICB9KTtcbiAgLy8gfSk7XG5cbiAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgaXRlbS52YWx1ZS5zcGxpdCgnICcpLmpvaW4oJycpID09PSAnJ1xuICAgICAgKSB7XG4gICAgICAgIGl0ZW0udmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpdGVtLnZhbHVlICE9PSAnJ1xuICAgICAgICAmJiAhaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKVxuICAgICAgKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGl0ZW0udmFsdWUgPT09ICcnXG4gICAgICAgICYmIGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJylcbiAgICAgICkge1xuICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcblxuICBjbG9zZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlYXJjaCA9IGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgIHNlYXJjaC52YWx1ZSA9ICcnO1xuICAgICAgaWYgKFxuICAgICAgICBzZWFyY2guY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJylcbiAgICAgICkge1xuICAgICAgICBzZWFyY2guY2xhc3NMaXN0LnJlbW92ZSgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuICAgIH0pXG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBmb3JtYXRPcHRpb24gKGl0ZW0pIHtcbiAgICBjb25zdCB2YWx1ZSA9IGl0ZW0udGV4dC5zcGxpdCgnc3BsaXR0ZXInKTtcblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAkKCc8c3Bhbj4nXG4gICAgICAgICsgdmFsdWVbMF1cbiAgICAgICAgKyAnPC9zcGFuPjxzcGFuPidcbiAgICAgICAgKyB2YWx1ZVsxXVxuICAgICAgICArICc8L3NwYW4+Jyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXh0O1xuICAgIH1cbiAgfVxuXG4gICQoJy5zZWxlY3QnKS5zZWxlY3QyKHtcbiAgICB0ZW1wbGF0ZVJlc3VsdDogZm9ybWF0T3B0aW9uLFxuICAgIHRlbXBsYXRlU2VsZWN0aW9uOiBmb3JtYXRPcHRpb25cbiAgfSk7XG5cbiAgJCgnLnNlbGVjdCcpLm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgJCh0aGlzKS5hZGRDbGFzcygncGlja2VkJyk7XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY2FuY2VsbGF0aW9uQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0LWluZm9fX2NhbmNlbGxhdGlvbicpO1xuXG4gIGlmICghY2FuY2VsbGF0aW9uQnRuKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsbGF0aW9uX19tb2RhbCcpO1xuXG4gIG5ldyBNb2RhbChjYW5jZWxsYXRpb25CdG4sIG1vZGFsKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgJCgnLmRlbGl2ZXJ5LW9yLXBpY2t1cC5kb25lJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgJCh0aGlzKS5maW5kKCcuY29udHJhY3QtaW5mb19fZGVsaXZlcmVkLWFkcmVzcycpLnNsaWRlVG9nZ2xlKCk7XG4gICAgJCh0aGlzKS5maW5kKCcuY29udHJhY3QtaW5mb19fZGVsaXZlcmVkLXRvZ2dsZScpLnRvZ2dsZUNsYXNzKCdvcGVuZWQnKTtcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBjb250cmFjdFNlcnZpY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0LXNlcnZpY2VzJyk7XG5cbiAgaWYgKCFjb250cmFjdFNlcnZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3Qtc2VydmljZXNfX2xpbmsnKTtcblxuICBjb25zdCBvbkxpbmtDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBjb25zb2xlLmxvZyh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVrY2JveC1idG5fX2xhYmVsJykpO1xuXG4gICAgaWYgKFxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tib3gtYnRuX19sYWJlbCcpXG4gICAgICB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2JveC1idG5fX2NoZWNrYm94JylcbiAgICAgIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbGl2ZXItb3ItcGlja3VwX19jb25maXJtLWJ0bicpXG4gICAgICB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb250cmFjdC1zZXJ2aWNlc19fZGVsaXZlcnktY29uZmlybScpXG4gICAgKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgbGlua3MuZm9yRWFjaChmdW5jdGlvbihsaW5rKSB7XG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uTGlua0NsaWNrKTtcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBjb250cmFjdHNBbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udHJhY3RzLWFsbCcpO1xuXG4gIGlmICghY29udHJhY3RzQWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgJCgnLmRhdGUtaW5wdXQnKS5kYXRlcGlja2VyKCk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBkZWxpdmVyeUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGVsaXZlci1vci1waWNrdXBfX2NvbmZpcm0tYnRuJyk7XG5cbiAgaWYgKCFkZWxpdmVyeUJ0bnNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAkKCcjZGVsaXZlcnktZGF0ZScpLmRhdGVwaWNrZXIoKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZGF0ZVRleHQpIHtcbiAgICBvbkZpZWxkQ2hhbmdlKCk7XG4gIH0pO1xuXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwnKTtcbiAgY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgY29uc3Qgc3VibWl0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19zdWJtaXQnKTtcbiAgY29uc3QgZmlsZUlucHV0QmxvY2sgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC1pbnB1dC1maWxlJyk7XG4gIGNvbnN0IGZpbGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19pbnB1dCcpO1xuICBjb25zdCBkYXRlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC1kYXRlJyk7XG4gIGNvbnN0IHRpbWVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kZWxpdmVyeS1vci1waWNrdXBfX21vZGFsLXRpbWUnKTtcbiAgY29uc3QgY29uZmlybUNoZWNrYm94ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmNoZWNrYm94X19pbnB1dCcpO1xuXG4gIGRlbGl2ZXJ5QnRucy5mb3JFYWNoKGZ1bmN0aW9uKGJ0bikge1xuICAgIG5ldyBNb2RhbChidG4sIG1vZGFsKTtcbiAgfSk7XG5cbiAgY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5jb250YWlucygnbG9hZGVkJykpIHtcbiAgICAgIGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuXG4gICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcbiAgICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuXG4gICAgICBpZighL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe1xuICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRlSW5wdXQudmFsdWUgPSAnJztcbiAgICB0aW1lSW5wdXQudmFsdWUgPSAnJztcbiAgICBjb25maXJtQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICQoJyNkZWxpdmVyeS1kYXRlJykuZGF0ZXBpY2tlcignc2V0RGF0ZScsICcnKTtcbiAgfVxuXG4gIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgICAgIG9uQ2xvc2VDbGljaygpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9uRmllbGRDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGlzRm9ybUZpbGxlZCgpICYmIHN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHN1Ym1pdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgfSBlbHNlIGlmICghaXNGb3JtRmlsbGVkKCkgJiYgIXN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGlzRm9ybUZpbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkKCcjZGVsaXZlcnktZGF0ZScpLmRhdGVwaWNrZXIoJ2dldERhdGUnKVxuICAgICAgJiYgdGltZUlucHV0LnZhbHVlICE9PSAnJ1xuICAgICAgJiYgY29uZmlybUNoZWNrYm94LmNoZWNrZWQgPT09IHRydWVcbiAgICAgICYmIGZpbGVJbnB1dC52YWx1ZSAhPT0gJydcbiAgfVxuXG4gIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbiAgZGF0ZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25GaWVsZENoYW5nZSk7XG4gIHRpbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uRmllbGRDaGFuZ2UpO1xuICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWVsZENoYW5nZSk7XG4gIGNvbmZpcm1DaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpZWxkQ2hhbmdlKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICQoJy5maWx0ZXJzX19idG4nKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAkKHRoaXMpLnBhcmVudCgpLm5leHQoKS5zbGlkZVRvZ2dsZSgpO1xuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHBheW1lbnRDb25maXJtQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYXltZW50LXdhaXRpbmdfX2NvbmZpcm0tYnRuJyk7XG5cbiAgaWYgKCFwYXltZW50Q29uZmlybUJ0bnNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAkKCcjcGF5bWVudC1kYXRlJykuZGF0ZXBpY2tlcigpO1xuXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BheW1lbnQtd2FpdGluZ19fbW9kYWwnKTtcbiAgY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgY29uc3QgbWFpbkNoZWNrYm94ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnRyYW5zYWN0aW9uc19fY2hlY2stYWxsIGlucHV0Jyk7XG4gIGNvbnN0IHNlbmRlcklucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc2VuZGVyIGlucHV0Jyk7XG4gIGNvbnN0IHJlY2lwaWVudElucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtcmVjaXBpZW50IGlucHV0Jyk7XG4gIGNvbnN0IHN1bUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc3VtIGlucHV0Jyk7XG4gIGNvbnN0IHB1cnBvc2VJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXB1cnBvc2UgaW5wdXQnKTtcblxuICBjb25zdCBnZXRBbGxDaGVja2JveCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCcudHJhbnNhY3Rpb25zX19jaGVjayBpbnB1dCcpO1xuICB9O1xuXG4gIGNvbnN0IG9uQWxsQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgZ2V0QWxsQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmIChtYWluQ2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSlcbiAgfTtcblxuICBjb25zdCBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICBtYWluQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgIGdldEFsbENoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICAkKCcjcGF5bWVudC1kYXRlJykuZGF0ZXBpY2tlcignc2V0RGF0ZScsICcnKTtcbiAgICBzZW5kZXJJbnB1dC52YWx1ZSA9ICcnO1xuICAgIHJlY2lwaWVudElucHV0LnZhbHVlID0gJyc7XG4gICAgc3VtSW5wdXQudmFsdWUgPSAnJztcbiAgICBwdXJwb3NlSW5wdXQudmFsdWUgPSAnJztcbiAgfTtcblxuICBjb25zdCBvbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbF9fb3ZlcmxheScpKSB7XG4gICAgICBvbkNsb3NlQ2xpY2soKTtcbiAgICB9XG4gIH1cblxuICBwYXltZW50Q29uZmlybUJ0bnMuZm9yRWFjaChmdW5jdGlvbihidG4pIHtcbiAgICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4gIH0pO1xuXG4gIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbiAgbWFpbkNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQWxsQ2hhbmdlKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHNjaGVkdWxlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1kZXZpY2VfX3NjaGVkdWxlJyk7XG5cbiAgaWYgKCFzY2hlZHVsZUJ0bnNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY2hlZHVsZV9fbW9kYWwnKTtcbiAgY29uc3QgcmFkaW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNjaGVkdWxlX19tb2RhbC10b2dnbGUgaW5wdXQnKTtcbiAgY29uc3QgdG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjaGVkdWxlX19tb2RhbC10b2dnbGUnKTtcblxuICByYWRpb3MuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZCkge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoaWQgPT09IDApIHtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ3NlY29uZC10YWInKTtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ2ZpcnN0LXRhYicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWQgPT09IDEpIHtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ2ZpcnN0LXRhYicpO1xuICAgICAgICB0b2dnbGUuY2xhc3NMaXN0LmFkZCgnc2Vjb25kLXRhYicpO1xuICAgICAgfVxuICAgIH0pXG4gIH0pXG5cbiAgc2NoZWR1bGVCdG5zLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJCgnLnN1cHBvcnRfX2RvY3MtYnRuJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgJCh0aGlzKS5wYXJlbnQoKS5uZXh0KCkuc2xpZGVUb2dnbGUoKTtcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdvcGVuZWQnKTtcbiAgfSlcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHZlcmlmaWNhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cmFjdC1pbmZvX192ZXJpZmljYXRpb24nKTtcblxuICBpZiAoIXZlcmlmaWNhdGlvbkJ0bikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZlcmlmaWNhdGlvbl9fbW9kYWwnKTtcbiAgY29uc3QgZmlsZUlucHV0QmxvY2sgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcudmVyaWZpY2F0aW9uX19tb2RhbC1pbnB1dC1maWxlJyk7XG4gIGNvbnN0IGZpbGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19pbnB1dCcpO1xuICBjb25zdCBjbG9zZSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcbiAgY29uc3Qgb3ZlcmxheSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICBjb25zdCBzYXZlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19zYXZlJyk7XG5cbiAgY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5jb250YWlucygnbG9hZGVkJykpIHtcbiAgICAgIGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuXG4gICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcbiAgICAgIHNhdmVCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcblxuICAgICAgaWYoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtcbiAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25PdmVybGF5Q2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWxfX292ZXJsYXknKSkge1xuICAgICAgb25DbG9zZUNsaWNrKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25JbnB1dENoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChmaWxlSW5wdXQudmFsdWUgIT09ICcnKSB7XG4gICAgICBzYXZlQnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICB9XG4gIH1cblxuICBuZXcgTW9kYWwodmVyaWZpY2F0aW9uQnRuLCBtb2RhbCk7XG4gIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbiAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uSW5wdXRDaGFuZ2UpO1xufSkoKTtcbiJdfQ==
