"use strict";!function(){var e=document.querySelectorAll(".checkbox-2__input");e[0]&&e.forEach((function(e){e.addEventListener("change",(function(e){var t=e.target;!0===t.checked?t.parentNode.classList.add("checked"):t.parentNode.classList.remove("checked")}))}))}(),$(".date-input:not(.date-input-range)").datepicker({dateFormat:"dd.mm.yy"}),$(".date-input-range").datepicker({range:"period",inline:!0,showButtonPanel:!0,showOtherMonths:!0,selectOtherMonths:!0,closeText:"Готово",dateFormat:"dd.mm.yy",beforeShow:function(e,t){t.dpDiv.css("transform","translateX(-24px)"),t.dpDiv.addClass("calendar-range")},onSelect:function(e,t,n){t.input.val(n.startDateText+" - "+n.endDateText)}}),function(){var e=document.querySelector(".modal.requests-upload");if(e){var t=document.querySelector(".modal.requests-upload .input-file__wrapper"),n=t.querySelector(".input-file"),a=n.cloneNode(!0),i=e.querySelector(".modal__save"),o=e.querySelector(".modal__close"),r=function(e){s(e.target)};f(n),o.addEventListener("click",(function(){t.querySelectorAll(".input-file-requests").forEach((function(e,t){0!==t&&(p(e),e.remove())})),!i.hasAttribute("disabled")&&i.setAttribute("disabled","")}))}function c(e){e.preventDefault(),e.stopPropagation()}function l(){var e=t.querySelectorAll(".file-load.loaded");e.length>0&&i.hasAttribute("disabled")&&i.removeAttribute("disabled"),0===e.length&&!i.hasAttribute("disabled")&&i.setAttribute("disabled","")}function s(e){e.parentNode.parentNode;var n=e.parentNode,i=n.parentNode.querySelector(".file-load__progress-current"),o=n.parentNode.querySelector(".file-load__status span"),r=n.parentNode.querySelector(".file-load"),c=n.parentNode.querySelector(".file-load__size");if(e.files&&e.files[0]){var s=new FileReader;s.onloadstart=function(){n.parentNode.classList.add("loaded")},s.onprogress=function(e){i.style.width=Math.round(e.loaded/e.total*100)+"%",o.textContent=Math.round(e.loaded/e.total*100)},s.onload=function(o){i.style.width="100%",n.nextElementSibling.querySelector(".file-load__name").textContent=e.files[0].name;var s=e.files[0].size,d=" байт",u="XLSX, ";s>=1024&&s<1048576?(s=Math.round(s/1024),d=" Кбайт"):(s=Math.round(s/1024/1024),d=" Мбайт"),"application/vnd.ms-excel"===e.files[0].type&&(u="XLS, "),r.classList.add("loaded"),c.textContent=u+s+d;var p=a.cloneNode(!0);t.prepend(p),f(p),t.querySelectorAll("input").forEach((function(e,t){e.name="file-"+t})),l()},s.readAsDataURL(e.files[0])}}function d(e){var t=e.currentTarget.querySelector("input"),n=e.dataTransfer.files;console.log(n),t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")),"application/vnd.ms-excel"!==n[0].type&&"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"!==n[0].type||(t.files=n,s(t))}function u(e){var t=e.currentTarget.parentNode.parentNode,n=t.querySelector("input");n.value="",/safari/i.test(navigator.userAgent)||(n.type="",n.type="file"),p(t),t.remove(),l()}function f(e){var t=e.querySelector(".input-file__label"),n=e.querySelector("input"),a=e.querySelector(".file-load__clear");function i(e){t.classList.add("highlight")}function o(e){t.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.addEventListener(e,c,!1)})),["dragenter","dragover"].forEach((function(e){t.addEventListener(e,i,!1)})),["dragleave","drop"].forEach((function(e){t.addEventListener(e,o,!1)})),t.addEventListener("drop",d),n.addEventListener("change",r),a.addEventListener("click",u)}function p(e){var t=e.querySelector(".input-file__label"),n=e.querySelector("input"),a=e.querySelector(".file-load__clear");function i(e){t.classList.add("highlight")}function o(e){t.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.removeEventListener(e,c,!1)})),["dragenter","dragover"].forEach((function(e){t.removeEventListener(e,i,!1)})),["dragleave","drop"].forEach((function(e){t.removeEventListener(e,o,!1)})),t.removeEventListener("drop",d),n.removeEventListener("change",r),a.removeEventListener("click",u)}}(),function(){var e=document.querySelector(".send-scan__upload-file");if(e){var t=e.querySelector(".input-file"),n=e.querySelector(".scan-send"),a=function(e){o(e.target)};!function(e){var t=e.querySelector(".input-file__label"),n=e.querySelector("input"),o=e.querySelector(".file-load__clear");function l(e){t.classList.add("highlight")}function s(e){t.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.addEventListener(e,i,!1)})),["dragenter","dragover"].forEach((function(e){t.addEventListener(e,l,!1)})),["dragleave","drop"].forEach((function(e){t.addEventListener(e,s,!1)})),t.addEventListener("drop",r),n.addEventListener("change",a),o.addEventListener("click",c)}(t)}function i(e){e.preventDefault(),e.stopPropagation()}function o(e){var t=e.parentNode,a=t.parentNode.querySelector(".file-load__progress-current"),i=t.parentNode.querySelector(".file-load__status span"),o=t.parentNode.querySelector(".file-load"),r=t.parentNode.querySelector(".file-load__size");if(e.files&&e.files[0]){var c=new FileReader;c.onloadstart=function(){t.parentNode.classList.add("loaded")},c.onprogress=function(e){a.style.width=Math.round(e.loaded/e.total*100)+"%",i.textContent=Math.round(e.loaded/e.total*100)},c.onload=function(i){a.style.width="100%",t.nextElementSibling.querySelector(".file-load__name").textContent=e.files[0].name;var c=e.files[0].size,l=" байт",s="XLSX, ";c>=1024&&c<1048576?(c=Math.round(c/1024),l=" Кбайт"):(c=Math.round(c/1024/1024),l=" Мбайт"),"application/vnd.ms-excel"===e.files[0].type&&(s="XLS, "),o.classList.add("loaded"),r.textContent=s+c+l,n.removeAttribute("disabled")},c.readAsDataURL(e.files[0])}}function r(e){var t=e.currentTarget.querySelector("input"),n=e.dataTransfer.files;console.log(n),t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")),"application/vnd.ms-excel"!==n[0].type&&"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"!==n[0].type||(t.files=n,o(t))}function c(e){var t=e.currentTarget.parentNode.parentNode,a=t.querySelector("input");a.value="",/safari/i.test(navigator.userAgent)||(a.type="",a.type="file"),t.classList.remove("loaded"),n.setAttribute("disabled","")}}(),function(){var e=document.querySelectorAll(".input-file__label");function t(e){var t=e.querySelector("input"),n=e.parentNode.querySelector(".file-load__clear");function a(e){e.preventDefault(),e.stopPropagation()}function i(t){e.classList.add("highlight")}function o(t){e.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(t){e.addEventListener(t,a,!1)})),["dragenter","dragover"].forEach((function(t){e.addEventListener(t,i,!1)})),["dragleave","drop"].forEach((function(t){e.addEventListener(t,o,!1)})),e.addEventListener("drop",(function(e){var n=e.dataTransfer.files;t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"));t.files=n,r(),window.onVerificationFileDrop&&window.onVerificationFileDrop(),window.onDeliveryFileDrop&&window.onDeliveryFileDrop(),window.onInstallationFileDrop&&window.onInstallationFileDrop()}),!1);var r=function(){c(t)},c=function(t){if(t.files&&t.files[0]){var n=new FileReader;n.onload=function(n){e.parentNode.classList.add("loaded"),e.nextElementSibling.querySelector(".file-load__name").textContent=t.files[0].name},n.readAsDataURL(t.files[0])}};t.addEventListener("change",r),n.addEventListener("click",(function(){e.parentNode.classList.remove("loaded"),t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")}))}document.querySelectorAll(".modal.requests-upload")||(console.log("input file"),window.makeFileLoad=t,e[0]&&e.forEach((function(e){t(e)})))}(),function(){var e=document.querySelectorAll(".input-text");e[0]&&e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))}))}(),function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"));var t,n,a=document.querySelector("body");function i(e,t){this.trigger=e,this.modal=t,this.overlay=this.modal.querySelector(".modal__overlay"),this.closeBtn=this.modal.querySelector(".modal__close"),this.onOverlayClick=this.onOverlayClick.bind(this),this.onCloseClick=this.onCloseClick.bind(this),this.onTriggerClick=this.onTriggerClick.bind(this),this.addEventListeners()}window.addEventListener("resize",(t=function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"))},function(e){n&&clearTimeout(n),n=setTimeout(t,100,e)})),i.prototype.open=function(){this.modal.classList.add("js-show"),a.classList.add("js__body-no-scroll")},i.prototype.close=function(){this.modal.classList.remove("js-show"),a.classList.remove("js__body-no-scroll")},i.prototype.onOverlayClick=function(e){e.target===this.overlay&&this.close()},i.prototype.onCloseClick=function(){this.close()},i.prototype.onTriggerClick=function(){this.open()},i.prototype.addEventListeners=function(){this.overlay.addEventListener("click",this.onOverlayClick),this.closeBtn&&this.closeBtn.addEventListener("click",this.onCloseClick),this.trigger&&this.trigger.addEventListener("click",this.onTriggerClick)},window.Modal=i}(),$(".input-money").mask("# ##0 ₽",{reverse:!0}),function(){var e=document.querySelectorAll(".input-phone");if(e[0]){var t=new Inputmask("+7(999) 999-99-99");e.forEach((function(e){t.mask(e)}))}}(),function(){var e=document.querySelectorAll(".search"),t=document.querySelectorAll(".search + .search-close");e[0]&&(e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))})),t.forEach((function(e){e.addEventListener("click",(function(){var t=e.previousElementSibling;t.value="",t.classList.contains("js-inputed")&&t.classList.remove("js-inputed")}))})))}(),function(){function e(e){var t=e.text.split("splitter"),n=window.matchMedia("(max-width: 999px)").matches?"<br>":"";return t.length>1?$("<span>"+t[0]+"</span>"+n+"<span>"+t[1]+"</span>"):e.text}$(".select").select2({templateResult:e,templateSelection:e}),$(".select").on("select2:select",(function(e){$(this).addClass("picked")}))}(),$(window).on("load",(function(){new Swiper(".subscription-tabs",{freeMode:!0,slidesPerView:"auto",watchOverflow:!0})})),function(){var e=document.querySelectorAll(".delivery-or-pickup__modal-time");if(e[0]){var t=new Inputmask("99:99");e.forEach((function(e){t.mask(e)}))}}(),function(){var e=document.querySelectorAll(".account-creation__new");if(e[0]){var t=document.getElementById("account-creation");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){if(document.getElementById("account-creation")){var e=$(".account-creation__input .input-text"),t=$("#account-creation .modal__save");e.on("input",(function(n){0===e.filter((function(){return""===this.value.split(" ").join("")||0===this.value.length})).length?t.removeAttr("disabled"):t.attr("disabled","")}))}}(),function(){if(document.querySelector(".agents__users-block-mobile")){new Swiper(".agents__users-block-mobile__slider",{slidesPerView:1,pagination:{el:".agents__users-block-mobile__pagination",dynamicBullets:!0}});$(".agents__users-btn").parent().next().slideToggle()}}(),$(".agents__users-btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){var e=document.querySelectorAll(".contract-info__cancellation");if(e[0]){var t=document.getElementById("cancellation__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".user-settings__change-email");if(e[0]){var t=document.getElementById("change-email");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("change-email");if(e){var t=e.querySelector(".change-email__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){e.target.validity.valid&&n.removeAttribute("disabled"),e.target.validity.valid||n.hasAttribute("disabled")||n.setAttribute("disabled","")}))}}(),function(){var e=document.querySelectorAll(".user-settings__change-phone");if(e[0]){var t=document.getElementById("change-phone");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("change-phone");if(e){var t=e.querySelector(".change-phone__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){-1===e.target.value.indexOf("_")&&n.removeAttribute("disabled"),-1!==e.target.value.indexOf("_")&&(n.hasAttribute("disabled")||n.setAttribute("disabled",""))}))}}(),function(){var e=document.querySelectorAll(".contract-creation__client-type  input");if(e[0]){var t=document.querySelector(".contract-creation__details");e.forEach((function(e){e.addEventListener("change",n)}))}function n(){e[0].checked&&t.classList.remove("show-for-entity"),e[1].checked&&t.classList.add("show-for-entity")}}(),function(){if(document.querySelector(".clients-mobile-block"))new Swiper(".clients-mobile-block__slider",{slidesPerView:1,pagination:{el:".clients-mobile-block__pagination",dynamicBullets:!0}})}(),document.querySelectorAll("[data-trigger]").forEach((function(e){var t=e.getAttribute("data-trigger"),n=document.querySelector("[data-modal="+t+"]");n&&new Modal(e,n)})),function(){var e=document.getElementById("confirmation-code");if(e){var t=e.querySelector(".confirmation-code__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){6===e.target.value.length&&n.removeAttribute("disabled"),e.target.value.length<6&&(n.hasAttribute("disabled")||n.setAttribute("disabled",""))}))}}(),$(".delivery-or-pickup.done").click((function(){$(this).find(".contract-info__delivered-adress").slideToggle(),$(this).find(".contract-info__delivered-toggle").toggleClass("opened")})),function(){if(document.querySelector(".contract-services")){var e=document.querySelectorAll(".contract-services__link"),t=function(e){var t=e.target;(t.classList.contains("checkbox-btn__label")||t.classList.contains("checkbox-btn__checkbox")||t.classList.contains("deliver-or-pickup__confirm-btn")||t.classList.contains("contract-services__delivery-confirm"))&&e.preventDefault()};e.forEach((function(e){e.addEventListener("click",t)}))}}(),function(){var e=document.querySelectorAll(".contracts__link");if(e[0]){var t=function(e){var t=e.target;(t.classList.contains("checkbox-btn__label")||t.classList.contains("checkbox-btn__checkbox")||t.classList.contains("contract-info__verification")||t.classList.contains("payment-waiting__confirm-btn")||t.classList.contains("contract-services__delivery-confirm"))&&e.preventDefault()};e.forEach((function(e){e.addEventListener("click",t)}))}}(),function(){if(document.querySelector(".contract-services-mobile"))new Swiper(".contract-services-mobile__slider",{slidesPerView:1,pagination:{el:".contract-services-mobile__pagination",dynamicBullets:!0}})}(),function(){if(document.querySelector(".contracts-mobile"))new Swiper(".contracts-mobile__slider",{slidesPerView:1,pagination:{el:".contracts-mobile__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".subscription-page__action-item--delete");if(e[0]){var t=document.getElementById("delete-service__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".deliver-or-pickup__confirm-btn");if(e[0]){var t=document.getElementById("delivery-or-pickup__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".contract-creation__delivery-device");e[0]&&e.forEach((function(e){var t=e.querySelectorAll(".contract-creation__delivery-type-wrapper  input");function n(e){var n=e.target.parentNode.parentNode.parentNode;t[0].checked&&n.classList.remove("show-for-pickup"),t[1].checked&&n.classList.add("show-for-pickup")}t.forEach((function(e){e.addEventListener("change",n)}))}))}(),function(){var e=$(".mutual-calcs__earned-date-menu");$(".mutual-calcs__earned-date-btn");$.extend($.datepicker,{_inlineDatepicker2:$.datepicker._inlineDatepicker,_inlineDatepicker:function(e,t){this._inlineDatepicker2(e,t);var n=$.datepicker._get(t,"beforeShow");n&&n.apply(e,[e,t])}}),$(".mutual-calcs__earned-date-btn").on("click",(function(){$(".mutual-calcs__earned-date-menu").toggle()})),$("#earned-date").datepicker({range:"period",inline:!0,showButtonPanel:!0,showOtherMonths:!0,selectOtherMonths:!0,closeText:"Готово",dateFormat:"dd.mm.yy",beforeShow:function(e,t){t.dpDiv.css("transform","translateX(-24px)"),t.dpDiv.addClass("calendar-range")},onSelect:function(e,t,n){$(".mutual-calcs__earned-date-btn").text(n.startDateText+" - "+n.endDateText)}}),$(document).mouseup((function(e){var t=$(".mutual-calcs__earned-date-menu"),n=$(".mutual-calcs__earned-date-btn");t.is(e.target)||0!==t.has(e.target).length||n.is(e.target)||0!==n.has(e.target).length||t.hide()})),$(".mutual-calcs__earned-date-menu-btn").on("click",(function(){$(this).hasClass("all-time")?""===$(".earned-date__start-period").text()?$(".mutual-calcs__earned-date-btn").text($(this).text()):$(".mutual-calcs__earned-date-btn").text($(this).text()+" (с "+$(".earned-date__start-period").text()+")"):$(".mutual-calcs__earned-date-btn").text($(this).text()),e.hide()})),""===$(".earned-date__start-period").text()?$(".mutual-calcs__earned-date-btn").text($(".mutual-calcs__earned-date-menu-btn.all-time").text()):$(".mutual-calcs__earned-date-btn").text($(".mutual-calcs__earned-date-menu-btn.all-time").text()+" (с "+$(".earned-date__start-period").text()+")")}(),$(".filters__btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),$(".filters__btn-clear").click((function(){$(".filters .select").val("Все"),$(".filters .select").trigger("change"),$(".filters .select").removeClass("picked")})),function(){if(document.querySelector(".installation-accounts-mobile"))new Swiper(".installation-accounts-mobile__slider",{slidesPerView:1,pagination:{el:".installation-accounts-mobile__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".installation__confirm-btn");if(e[0]){var t=document.getElementById("installation__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".delivery-or-pickup__installation-choose-block  input");if(e[0]){var t=e[0].parentNode.parentNode.parentNode.parentNode;e.forEach((function(e){e.addEventListener("change",n)}))}function n(){console.log(t),e[0].checked&&(t.classList.contains("show-for-manual")&&t.classList.remove("show-for-manual"),t.classList.contains("show-for-registration")&&t.classList.remove("show-for-registration"),t.classList.contains("show-for-delivery")||t.classList.add("show-for-delivery")),e[1].checked&&(t.classList.contains("show-for-manual")&&t.classList.remove("show-for-manual"),t.classList.contains("show-for-delivery")&&t.classList.remove("show-for-delivery"),t.classList.contains("show-for-registration")||t.classList.add("show-for-registration")),e[2].checked&&(t.classList.contains("show-for-delivery")&&t.classList.remove("show-for-delivery"),t.classList.contains("show-for-registration")&&t.classList.remove("show-for-registration"),t.classList.contains("show-for-manual")||t.classList.add("show-for-manual"))}}(),function(){var e=document.querySelectorAll(".mutual-calcs__make-payment");if(e[0]){var t=document.getElementById("payment-waiting__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelector(".header__nav-btn");if(e){var t=document.querySelector(".header__close-btn"),n=document.querySelector(".header__nav"),a=function(){return window.matchMedia("(max-width: 1439px)").matches};a();e.addEventListener("click",(function(){a()&&(e.classList.toggle("js-opened"),n.classList.toggle("js-show"))})),t.addEventListener("click",(function(){n.classList.remove("js-show"),e.classList.toggle("js-opened")}))}}(),function(){if(document.querySelector(".mutual-calcs-payment-mobile"))new Swiper(".mutual-calcs-payment-mobile__slider",{slidesPerView:1,pagination:{el:".mutual-calcs-payment-mobile__pagination",dynamicBullets:!0}})}(),function(){if(document.querySelector(".mutual-calcs-block-mobile"))new Swiper(".mutual-calcs-block-mobile__slider",{slidesPerView:1,pagination:{el:".mutual-calcs-block-mobile__pagination",dynamicBullets:!0}})}(),document.querySelectorAll(".input-password")[0]&&$(document).on("click",".input-icon--show-password",(function(){$(this).toggleClass("active"),$(this).hasClass("active")?$(this).next().attr("type","text"):$(this).next().attr("type","password")})),function(){var e=document.querySelectorAll(".payment-waiting__confirm-btn");if(e[0]){var t=document.getElementById("payment-waiting__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("payment-waiting__modal");if(e){var t=e.querySelector(".modal__close"),n=e.querySelector(".modal__overlay"),a=e.querySelector(".transactions__check-all input"),i=e.querySelector(".payment-waiting__modal-sender input"),o=e.querySelector(".payment-waiting__modal-recipient input"),r=e.querySelector(".payment-waiting__modal-sum input"),c=e.querySelector(".payment-waiting__modal-purpose input"),l=function(){return e.querySelectorAll(".transactions__check input")},s=function(){return e.querySelectorAll(".transactions__mobile-check input")},d=function(){a.checked=!1,l().forEach((function(e){e.checked=!1,e.parentNode.parentNode.parentNode.parentNode.classList.remove("checked")})),s().forEach((function(e){e.checked=!1,e.parentNode.parentNode.parentNode.classList.remove("checked")})),$("#payment-date").datepicker("setDate",""),i.value="",o.value="",r.value="",c.value=""},u=function(e){e.target.checked?e.target.parentNode.parentNode.parentNode.parentNode.classList.add("checked"):e.target.parentNode.parentNode.parentNode.parentNode.classList.remove("checked")},f=function(e){e.target.checked?e.target.parentNode.parentNode.parentNode.classList.add("checked"):e.target.parentNode.parentNode.parentNode.classList.remove("checked")};t.addEventListener("click",d),n.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&d()})),a.addEventListener("change",(function(){l().forEach((function(e){var t=e.parentNode.parentNode.parentNode.parentNode;a.checked?(e.checked=!0,t.classList.contains("checked")||t.classList.add("checked")):(e.checked=!1,t.classList.contains("checked")&&t.classList.remove("checked"))}))})),l().forEach((function(e){e.addEventListener("change",u)})),s().forEach((function(e){e.addEventListener("change",f)}))}}(),function(){var e=document.querySelectorAll(".mutual-calcs-payment-block__link");if(e[0]){var t=document.getElementById("payment-info__modal");e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e,t=document.getElementById("js-video-box");$(".subscribe-register__input .input-text").each((function(n,a){var i=$(this);i.siblings(".subscribe-register__btn").on("click",(function(n){var a;(e=new JsQRScanner((a=i,function(n){a.val(n),$(".qr-scanner-modal").removeClass("js-show"),e.stopScanning(),e.removeFrom(t)}))).setSnapImageMaxSize(300),t&&(t.innerHTML="",e.appendTo(t))}))})),$(document).on("click",".qr-scanner-modal .qr-scanner-modal__close",(function(n){e.stopScanning(),e.removeFrom(t)}))}(),function(){if(document.querySelector(".subscription-page__reward-mobile"))new Swiper(".subscription-page__reward-mobile",{slidesPerView:1,pagination:{el:".subscription-page__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".contract-device__schedule");if(e[0]){var t=document.getElementById("schedule__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){if(document.getElementById("schedule__modal")){var e=document.querySelectorAll(".schedule__modal-toggle input"),t=document.querySelector(".schedule__modal-toggle");e.forEach((function(e,n){e.addEventListener("change",(function(){0===n&&(t.classList.remove("second-tab"),t.classList.add("first-tab")),1===n&&(t.classList.remove("first-tab"),t.classList.add("second-tab"))}))}))}}(),function(){if(document.querySelector(".main-page")){var e=document.querySelector(".support"),t=document.querySelector(".support__container"),n=e.querySelectorAll(".support__item");!function(){var e=document.createDocumentFragment(),a=document.createElement("div");a.classList.add("swiper-container"),a.classList.add("support__slider");var i=document.createElement("div");i.classList.add("swiper-wrapper"),n.forEach((function(e,t){var n=document.createElement("div");n.classList.add("swiper-slide");var a=e.cloneNode(!0);n.appendChild(a),i.appendChild(n)}));var o=document.createElement("div");o.classList.add("support__slider-pagination","swiper-pagination"),a.appendChild(i),a.appendChild(o),e.appendChild(a),t.appendChild(e),new Swiper(".support__slider",{slidesPerView:1,pagination:{el:".support__slider-pagination"}})}()}}(),$(".support__docs-btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){if(document.querySelector(".transactions-mobile-block"))new Swiper(".transactions-mobile-block__slider",{slidesPerView:1,pagination:{el:".transactions-mobile-block__pagination",dynamicBullets:!0}})}(),$(".header__user-btn").on("click",(function(e){$(this).is(e.target)&&$(this).toggleClass("active")})),$(document).on("mouseup",(function(e){var t=$(".header__user-btn");t.is(e.target)||0!==t.has(e.target).length||t.removeClass("active")})),function(){var e=document.querySelectorAll(".contract-info__verification");if(e[0]){var t=document.getElementById("verification__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("verification__modal");if(e){var t=e.querySelectorAll(".verification__modal-input-file"),n=e.querySelector(".modal__close"),a=e.querySelector(".modal__overlay"),i=e.querySelector(".modal__save"),o=function(){t.forEach((function(e){var t=e.querySelector(".input-file__input");e.classList.contains("loaded")&&(e.classList.remove("loaded"),t.value="",i.setAttribute("disabled",""),/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"))}))},r=function(){i.hasAttribute("disabled")||i.setAttribute("disabled","")};window.onVerificationFileDrop=function(){var e;e=!0,t.forEach((function(t){""===t.querySelector(".input-file__input").value&&(e=!1)})),e&&i.hasAttribute("disabled")&&i.removeAttribute("disabled"),e||i.hasAttribute("disabled")||i.setAttribute("disabled","")},t.forEach((function(e){var t=e.querySelector(".input-file__input"),n=e.querySelector(".file-load__clear");t.addEventListener("change",window.onVerificationFileDrop),n.addEventListener("click",r)})),n.addEventListener("click",o),a.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&o()}))}}(),function(){var e=document.querySelectorAll(".contract-info__serial-btn");if(e[0]){var t=document.getElementById("write-serial");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("write-serial");if(e){var t=e.querySelector(".write-serial__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){var t=e.target.value;""!==t.split(" ").join("")&&t.length>0&&n.hasAttribute("disabled")&&n.removeAttribute("disabled"),""!==t.split(" ").join("")&&0!==t.length||n.hasAttribute("disabled")||n.setAttribute("disabled","")}))}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
