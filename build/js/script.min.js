"use strict";!function(){var e=document.querySelectorAll(".checkbox-2__input");e[0]&&e.forEach((function(e){e.addEventListener("change",(function(e){var t=e.target;!0===t.checked?t.parentNode.classList.add("checked"):t.parentNode.classList.remove("checked")}))}))}(),$(".date-input").datepicker(),function(){var e=document.querySelectorAll(".input-file__label");function t(e){var t=e.querySelector("input"),n=e.parentNode.querySelector(".file-load__clear");function i(e){e.preventDefault(),e.stopPropagation()}function a(t){e.classList.add("highlight")}function o(t){e.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(t){e.addEventListener(t,i,!1)})),["dragenter","dragover"].forEach((function(t){e.addEventListener(t,a,!1)})),["dragleave","drop"].forEach((function(t){e.addEventListener(t,o,!1)})),e.addEventListener("drop",(function(e){var n=e.dataTransfer.files;t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"));t.files=n,c()}),!1);var c=function(){r(t)},r=function(t){if(t.files&&t.files[0]){var n=new FileReader;n.onload=function(n){e.parentNode.classList.add("loaded"),e.nextElementSibling.querySelector(".file-load__name").textContent=t.files[0].name},n.readAsDataURL(t.files[0])}};t.addEventListener("change",c),n.addEventListener("click",(function(){e.parentNode.classList.remove("loaded"),t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")}))}window.makeFileLoad=t,e[0]&&e.forEach((function(e){t(e)}))}(),function(){var e=document.querySelectorAll(".input-text");e[0]&&e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))}))}(),function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"));var t=document.querySelector("body");function n(e,t){this.trigger=e,this.modal=t,this.overlay=this.modal.querySelector(".modal__overlay"),this.closeBtn=this.modal.querySelector(".modal__close"),this.onOverlayClick=this.onOverlayClick.bind(this),this.onCloseClick=this.onCloseClick.bind(this),this.onTriggerClick=this.onTriggerClick.bind(this),this.onResize=this.onResize.bind(this),this.addEventListeners()}n.prototype.open=function(){this.modal.classList.add("js-show"),t.classList.add("js__body-no-scroll")},n.prototype.close=function(){this.modal.classList.remove("js-show"),t.classList.remove("js__body-no-scroll")},n.prototype.onOverlayClick=function(e){e.target===this.overlay&&this.close()},n.prototype.onCloseClick=function(){this.close()},n.prototype.onTriggerClick=function(){this.open()},n.prototype.onResize=function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"))},n.prototype.addEventListeners=function(){var e,t;this.overlay.addEventListener("click",this.onOverlayClick),this.closeBtn.addEventListener("click",this.onCloseClick),this.trigger.addEventListener("click",this.onTriggerClick),window.addEventListener("resize",(e=this.onResize,function(n){t&&clearTimeout(t),t=setTimeout(e,100,n)}))},window.Modal=n}(),$(".input-money").mask("# ##0 ₽",{reverse:!0}),function(){var e=document.querySelectorAll(".input-phone");if(e[0]){var t=new Inputmask("+7(999) 999-99-99");e.forEach((function(e){t.mask(e)}))}}(),function(){var e=document.querySelectorAll(".search"),t=document.querySelectorAll(".search + .search-close");e[0]&&(e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))})),t.forEach((function(e){e.addEventListener("click",(function(){var t=e.previousElementSibling;t.value="",t.classList.contains("js-inputed")&&t.classList.remove("js-inputed")}))})))}(),function(){function e(e){var t=e.text.split("splitter"),n=window.matchMedia("(max-width: 999px)").matches?"<br>":"";return t.length>1?$("<span>"+t[0]+"</span>"+n+"<span>"+t[1]+"</span>"):e.text}$(".select").select2({templateResult:e,templateSelection:e}),$(".select").on("select2:select",(function(e){$(this).addClass("picked")}))}(),function(){var e=document.querySelectorAll(".delivery-or-pickup__modal-time");if(e[0]){var t=new Inputmask("99:99");e.forEach((function(e){t.mask(e)}))}}(),function(){if(document.querySelector(".agents__users-block-mobile")){new Swiper(".agents__users-block-mobile__slider",{slidesPerView:1,pagination:{el:".agents__users-block-mobile__pagination",dynamicBullets:!0}});$(".agents__users-btn").parent().next().slideToggle()}}(),$(".agents__users-btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){var e=document.querySelectorAll(".contract-info__cancellation");if(e[0]){var t=document.getElementById("cancellation__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".contract-creation__client-type  input");if(e[0]){var t=document.querySelector(".contract-creation__details");e.forEach((function(e){e.addEventListener("change",n)}))}function n(){e[0].checked&&t.classList.remove("show-for-entity"),e[1].checked&&t.classList.add("show-for-entity")}}(),function(){if(document.querySelector(".clients-mobile-block"))new Swiper(".clients-mobile-block__slider",{slidesPerView:1,pagination:{el:".clients-mobile-block__pagination",dynamicBullets:!0}})}(),$(".delivery-or-pickup.done").click((function(){$(this).find(".contract-info__delivered-adress").slideToggle(),$(this).find(".contract-info__delivered-toggle").toggleClass("opened")})),function(){if(document.querySelector(".contract-services")){var e=document.querySelectorAll(".contract-services__link"),t=function(e){var t=e.target;(t.classList.contains("checkbox-btn__label")||t.classList.contains("checkbox-btn__checkbox")||t.classList.contains("deliver-or-pickup__confirm-btn")||t.classList.contains("contract-services__delivery-confirm"))&&e.preventDefault()};e.forEach((function(e){e.addEventListener("click",t)}))}}(),function(){var e=document.querySelectorAll(".contracts__link");if(e[0]){var t=function(e){var t=e.target;(t.classList.contains("checkbox-btn__label")||t.classList.contains("checkbox-btn__checkbox")||t.classList.contains("contract-info__verification")||t.classList.contains("payment-waiting__confirm-btn")||t.classList.contains("contract-services__delivery-confirm"))&&e.preventDefault()};e.forEach((function(e){e.addEventListener("click",t)}))}}(),function(){if(document.querySelector(".contract-services-mobile"))new Swiper(".contract-services-mobile__slider",{slidesPerView:1,pagination:{el:".contract-services-mobile__pagination",dynamicBullets:!0}})}(),function(){if(document.querySelector(".contracts-mobile"))new Swiper(".contracts-mobile__slider",{slidesPerView:1,pagination:{el:".contracts-mobile__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".subscription-page__action-item--delete");if(e[0]){var t=document.getElementById("delete-service__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".deliver-or-pickup__confirm-btn");if(e[0]){var t=document.getElementById("delivery-or-pickup__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".contract-creation__delivery-device");e[0]&&e.forEach((function(e){var t=e.querySelectorAll(".contract-creation__delivery-type-wrapper  input");function n(e){var n=e.target.parentNode.parentNode.parentNode;t[0].checked&&n.classList.remove("show-for-pickup"),t[1].checked&&n.classList.add("show-for-pickup")}t.forEach((function(e){e.addEventListener("change",n)}))}))}(),function(){var e=document.getElementById("delivery-or-pickup__modal");if(e){var t=$("#delivery-or-pickup__modal .date-input");t.datepicker().on("change",(function(e){$("#delivery-or-pickup__modal").hasClass("js-show")&&p()}));var n=e.querySelector(".modal__close"),i=e.querySelector(".modal__overlay"),a=e.querySelector(".modal__submit"),o=e.querySelector(".delivery-or-pickup__modal-input-file"),c=e.querySelector(".input-file__input"),r=e.querySelector(".file-load__clear"),l=e.querySelector(".delivery-or-pickup__modal-date"),s=e.querySelector(".delivery-or-pickup__modal-time"),d=e.querySelector(".checkbox__input"),u=function(){o.classList.contains("loaded")&&(o.classList.remove("loaded"),c.value="",a.setAttribute("disabled",""),/safari/i.test(navigator.userAgent)||(c.type="",c.type="file")),l.value="",s.value="",d.checked=!1,t.datepicker("setDate","")},p=function(e){f()&&a.hasAttribute("disabled")?a.removeAttribute("disabled"):f()||a.hasAttribute("disabled")||a.setAttribute("disabled","")},f=function(){return t.datepicker("getDate")&&""!==s.value&&!0===d.checked&&""!==c.value};n.addEventListener("click",u),i.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&u()})),l.addEventListener("input",p),s.addEventListener("input",p),c.addEventListener("change",p),d.addEventListener("change",p),r.addEventListener("click",(function(){a.hasAttribute("disabled")||a.setAttribute("disabled","")}))}}(),function(){var e=$(".mutual-calcs__earned-date-menu");$(".mutual-calcs__earned-date-btn");$.extend($.datepicker,{_inlineDatepicker2:$.datepicker._inlineDatepicker,_inlineDatepicker:function(e,t){this._inlineDatepicker2(e,t);var n=$.datepicker._get(t,"beforeShow");n&&n.apply(e,[e,t])}}),$(".mutual-calcs__earned-date-btn").on("click",(function(){$(".mutual-calcs__earned-date-menu").toggle()})),$(".date-input-period").datepicker({range:"period",inline:!0,showButtonPanel:!0,showOtherMonths:!0,selectOtherMonths:!0,closeText:"Готово",beforeShow:function(e,t){t.dpDiv.css("transform","translateX(-24px)"),t.dpDiv.addClass("calendar-range")},onSelect:function(e,t,n){$(".mutual-calcs__earned-date-btn").text(n.startDateText+" - "+n.endDateText)}}),$(document).mouseup((function(e){var t=$(".mutual-calcs__earned-date-menu"),n=$(".mutual-calcs__earned-date-btn");t.is(e.target)||0!==t.has(e.target).length||n.is(e.target)||0!==n.has(e.target).length||t.hide()})),$(".mutual-calcs__earned-date-menu-btn").on("click",(function(){$(this).hasClass("all-time")?$(".mutual-calcs__earned-date-btn").text($(this).text()+" (с "+$(".earned-date__start-period").text()+")"):$(".mutual-calcs__earned-date-btn").text($(this).text()),e.hide()})),$(".mutual-calcs__earned-date-btn").text($(".mutual-calcs__earned-date-menu-btn.all-time").text()+" (с "+$(".earned-date__start-period").text()+")")}(),$(".filters__btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){var e=document.querySelectorAll(".installation__confirm-btn");if(e[0]){var t=document.getElementById("installation__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".delivery-or-pickup__installation-choose-block  input");if(e[0]){var t=e[0].parentNode.parentNode.parentNode.parentNode;e.forEach((function(e){e.addEventListener("change",n)}))}function n(){console.log(t),e[0].checked&&(t.classList.contains("show-for-manual")&&t.classList.remove("show-for-manual"),t.classList.contains("show-for-registration")&&t.classList.remove("show-for-registration"),t.classList.contains("show-for-delivery")||t.classList.add("show-for-delivery")),e[1].checked&&(t.classList.contains("show-for-manual")&&t.classList.remove("show-for-manual"),t.classList.contains("show-for-delivery")&&t.classList.remove("show-for-delivery"),t.classList.contains("show-for-registration")||t.classList.add("show-for-registration")),e[2].checked&&(t.classList.contains("show-for-delivery")&&t.classList.remove("show-for-delivery"),t.classList.contains("show-for-registration")&&t.classList.remove("show-for-registration"),t.classList.contains("show-for-manual")||t.classList.add("show-for-manual"))}}(),function(){var e=document.getElementById("installation__modal");if(e){var t=$("#installation__modal .date-input");t.datepicker().on("change",(function(e){$("#installation__modal").hasClass("js-show")&&p()}));var n=e.querySelector(".modal__close"),i=e.querySelector(".modal__overlay"),a=e.querySelector(".modal__submit"),o=e.querySelector(".delivery-or-pickup__modal-input-file"),c=e.querySelector(".input-file__input"),r=e.querySelector(".file-load__clear"),l=e.querySelector(".delivery-or-pickup__modal-date"),s=e.querySelector(".delivery-or-pickup__modal-time"),d=e.querySelector(".checkbox__input"),u=function(){o.classList.contains("loaded")&&(o.classList.remove("loaded"),c.value="",a.setAttribute("disabled",""),/safari/i.test(navigator.userAgent)||(c.type="",c.type="file")),l.value="",s.value="",d.checked=!1,t.datepicker("setDate","")},p=function(e){f()&&a.hasAttribute("disabled")?a.removeAttribute("disabled"):f()||a.hasAttribute("disabled")||a.setAttribute("disabled","")},f=function(){return t.datepicker("getDate")&&""!==s.value&&!0===d.checked&&""!==c.value};n.addEventListener("click",u),i.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&u()})),l.addEventListener("input",p),s.addEventListener("input",p),c.addEventListener("change",p),d.addEventListener("change",p),r.addEventListener("click",(function(){a.hasAttribute("disabled")||a.setAttribute("disabled","")}))}}(),function(){var e=document.querySelectorAll(".mutual-calcs__make-payment");if(e[0]){var t=document.getElementById("payment-waiting__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelector(".header__nav-btn");if(e){var t=document.querySelector(".header__close-btn"),n=document.querySelector(".header__nav"),i=function(){return window.matchMedia("(max-width: 1439px)").matches};i();e.addEventListener("click",(function(){i()&&(e.classList.toggle("js-opened"),n.classList.toggle("js-show"))})),t.addEventListener("click",(function(){n.classList.remove("js-show"),e.classList.toggle("js-opened")}))}}(),function(){if(document.querySelector(".mutual-calcs-payment-mobile"))new Swiper(".mutual-calcs-payment-mobile__slider",{slidesPerView:1,pagination:{el:".mutual-calcs-payment-mobile__pagination",dynamicBullets:!0}})}(),function(){if(document.querySelector(".mutual-calcs-block-mobile"))new Swiper(".mutual-calcs-block-mobile__slider",{slidesPerView:1,pagination:{el:".mutual-calcs-block-mobile__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".payment-waiting__confirm-btn");if(e[0]){var t=document.getElementById("payment-waiting__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("payment-waiting__modal");if(e){var t=e.querySelector(".modal__close"),n=e.querySelector(".modal__overlay"),i=e.querySelector(".transactions__check-all input"),a=e.querySelector(".payment-waiting__modal-sender input"),o=e.querySelector(".payment-waiting__modal-recipient input"),c=e.querySelector(".payment-waiting__modal-sum input"),r=e.querySelector(".payment-waiting__modal-purpose input"),l=function(){return e.querySelectorAll(".transactions__check input")},s=function(){return e.querySelectorAll(".transactions__mobile-check input")},d=function(){i.checked=!1,l().forEach((function(e){e.checked=!1,e.parentNode.parentNode.parentNode.parentNode.classList.remove("checked")})),s().forEach((function(e){e.checked=!1,e.parentNode.parentNode.parentNode.classList.remove("checked")})),$("#payment-date").datepicker("setDate",""),a.value="",o.value="",c.value="",r.value=""},u=function(e){e.target.checked?e.target.parentNode.parentNode.parentNode.parentNode.classList.add("checked"):e.target.parentNode.parentNode.parentNode.parentNode.classList.remove("checked")},p=function(e){e.target.checked?e.target.parentNode.parentNode.parentNode.classList.add("checked"):e.target.parentNode.parentNode.parentNode.classList.remove("checked")};t.addEventListener("click",d),n.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&d()})),i.addEventListener("change",(function(){l().forEach((function(e){var t=e.parentNode.parentNode.parentNode.parentNode;i.checked?(e.checked=!0,t.classList.contains("checked")||t.classList.add("checked")):(e.checked=!1,t.classList.contains("checked")&&t.classList.remove("checked"))}))})),l().forEach((function(e){e.addEventListener("change",u)})),s().forEach((function(e){e.addEventListener("change",p)}))}}(),function(){var e=document.querySelectorAll(".mutual-calcs-payment-block__link");if(e[0]){var t=document.getElementById("payment-info__modal");e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".contract-device__schedule");if(e[0]){var t=document.getElementById("schedule__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){if(document.getElementById("schedule__modal")){var e=document.querySelectorAll(".schedule__modal-toggle input"),t=document.querySelector(".schedule__modal-toggle");e.forEach((function(e,n){e.addEventListener("change",(function(){0===n&&(t.classList.remove("second-tab"),t.classList.add("first-tab")),1===n&&(t.classList.remove("first-tab"),t.classList.add("second-tab"))}))}))}}(),function(){if(document.querySelector(".main-page")){var e=document.querySelector(".support"),t=document.querySelector(".support__container"),n=e.querySelectorAll(".support__item");!function(){var e=document.createDocumentFragment(),i=document.createElement("div");i.classList.add("swiper-container"),i.classList.add("support__slider");var a=document.createElement("div");a.classList.add("swiper-wrapper"),n.forEach((function(e,t){var n=document.createElement("div");n.classList.add("swiper-slide");var i=e.cloneNode(!0);n.appendChild(i),a.appendChild(n)}));var o=document.createElement("div");o.classList.add("support__slider-pagination","swiper-pagination"),i.appendChild(a),i.appendChild(o),e.appendChild(i),t.appendChild(e),new Swiper(".support__slider",{slidesPerView:1,pagination:{el:".support__slider-pagination"}})}()}}(),$(".support__docs-btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){if(document.querySelector(".transactions-mobile-block"))new Swiper(".transactions-mobile-block__slider",{slidesPerView:1,pagination:{el:".transactions-mobile-block__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".contract-info__verification");if(e[0]){var t=document.getElementById("verification__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("verification__modal");if(e){var t=e.querySelectorAll(".verification__modal-input-file"),n=e.querySelector(".modal__close"),i=e.querySelector(".modal__overlay"),a=e.querySelector(".modal__save"),o=function(){t.forEach((function(e){var t=e.querySelector(".input-file__input");e.classList.contains("loaded")&&(e.classList.remove("loaded"),t.value="",a.setAttribute("disabled",""),/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"))}))},c=function(){var e=!0;t.forEach((function(t){""===t.querySelector(".input-file__input").value&&(e=!1)})),e&&a.hasAttribute("disabled")&&a.removeAttribute("disabled"),e||a.hasAttribute("disabled")||a.setAttribute("disabled","")},r=function(){a.hasAttribute("disabled")||a.setAttribute("disabled","")};t.forEach((function(e){var t=e.querySelector(".input-file__input"),n=e.querySelector(".file-load__clear");t.addEventListener("change",c),n.addEventListener("click",r)})),n.addEventListener("click",o),i.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&o()}))}}(),function(){var e=document.querySelectorAll(".contract-info__serial-btn");if(e[0]){var t=document.getElementById("write-serial");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("write-serial");if(e){var t=e.querySelector(".write-serial__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){var t=e.target.value;""!==t.split(" ").join("")&&t.length>0&&n.hasAttribute("disabled")&&n.removeAttribute("disabled"),""!==t.split(" ").join("")&&0!==t.length||n.hasAttribute("disabled")||n.setAttribute("disabled","")}))}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
