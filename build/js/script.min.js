"use strict";!function(){var e=document.querySelectorAll(".checkbox-2__input");e[0]&&e.forEach((function(e){e.addEventListener("change",(function(e){var t=e.target;!0===t.checked?t.parentNode.classList.add("checked"):t.parentNode.classList.remove("checked")}))}))}(),$(".date-input:not(.date-input-range)").datepicker({dateFormat:"dd.mm.yy"}),$(".date-input-range").datepicker({range:"period",inline:!0,showButtonPanel:!0,showOtherMonths:!0,selectOtherMonths:!0,closeText:"Готово",dateFormat:"dd.mm.yy",beforeShow:function(e,t){t.dpDiv.css("transform","translateX(-24px)"),t.dpDiv.addClass("calendar-range")},onSelect:function(e,t,n){t.input.val(n.startDateText+" - "+n.endDateText)}}),function(){var e=document.querySelector(".modal.requests-upload");if(e){var t=document.querySelector(".modal.requests-upload .input-file__wrapper"),n=t.querySelector(".input-file"),a=n.cloneNode(!0),i=e.querySelector(".modal__save"),o=e.querySelector(".modal__close"),r=function(e){s(e.target)};f(n),o.addEventListener("click",(function(){t.querySelectorAll(".input-file-requests").forEach((function(e,t){0!==t&&(p(e),e.remove())})),!i.hasAttribute("disabled")&&i.setAttribute("disabled","")}))}function c(e){e.preventDefault(),e.stopPropagation()}function l(){var e=t.querySelectorAll(".file-load.loaded");e.length>0&&i.hasAttribute("disabled")&&i.removeAttribute("disabled"),0===e.length&&!i.hasAttribute("disabled")&&i.setAttribute("disabled","")}function s(e){e.parentNode.parentNode;var n=e.parentNode,i=n.parentNode.querySelector(".file-load__progress-current"),o=n.parentNode.querySelector(".file-load__status span"),r=n.parentNode.querySelector(".file-load"),c=n.parentNode.querySelector(".file-load__size");if(e.files&&e.files[0]){var s=new FileReader;s.onloadstart=function(){n.parentNode.classList.add("loaded")},s.onprogress=function(e){i.style.width=Math.round(e.loaded/e.total*100)+"%",o.textContent=Math.round(e.loaded/e.total*100)},s.onload=function(o){i.style.width="100%",n.nextElementSibling.querySelector(".file-load__name").textContent=e.files[0].name;var s=e.files[0].size,d=" байт",u="XLSX, ";s>=1024&&s<1048576?(s=Math.round(s/1024),d=" Кбайт"):(s=Math.round(s/1024/1024),d=" Мбайт"),"application/vnd.ms-excel"===e.files[0].type&&(u="XLS, "),r.classList.add("loaded"),c.textContent=u+s+d;var p=a.cloneNode(!0);t.prepend(p),f(p),t.querySelectorAll("input").forEach((function(e,t){e.name="file-"+t})),l()},s.readAsDataURL(e.files[0])}}function d(e){var t=e.currentTarget.querySelector("input"),n=e.dataTransfer.files;console.log(n),t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")),"application/vnd.ms-excel"!==n[0].type&&"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"!==n[0].type||(t.files=n,s(t))}function u(e){var t=e.currentTarget.parentNode.parentNode,n=t.querySelector("input");n.value="",/safari/i.test(navigator.userAgent)||(n.type="",n.type="file"),p(t),t.remove(),l()}function f(e){var t=e.querySelector(".input-file__label"),n=e.querySelector("input"),a=e.querySelector(".file-load__clear");function i(e){t.classList.add("highlight")}function o(e){t.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.addEventListener(e,c,!1)})),["dragenter","dragover"].forEach((function(e){t.addEventListener(e,i,!1)})),["dragleave","drop"].forEach((function(e){t.addEventListener(e,o,!1)})),t.addEventListener("drop",d),n.addEventListener("change",r),a.addEventListener("click",u)}function p(e){var t=e.querySelector(".input-file__label"),n=e.querySelector("input"),a=e.querySelector(".file-load__clear");function i(e){t.classList.add("highlight")}function o(e){t.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.removeEventListener(e,c,!1)})),["dragenter","dragover"].forEach((function(e){t.removeEventListener(e,i,!1)})),["dragleave","drop"].forEach((function(e){t.removeEventListener(e,o,!1)})),t.removeEventListener("drop",d),n.removeEventListener("change",r),a.removeEventListener("click",u)}}(),function(){var e=document.querySelector(".send-scan__upload-file");if(e){var t=e.querySelector(".input-file"),n=e.querySelector(".send-scan__submit"),a=function(e){o(e.target)};!function(e){var t=e.querySelector(".input-file__label"),n=e.querySelector("input"),o=e.querySelector(".file-load__clear");function l(e){t.classList.add("highlight")}function s(e){t.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.addEventListener(e,i,!1)})),["dragenter","dragover"].forEach((function(e){t.addEventListener(e,l,!1)})),["dragleave","drop"].forEach((function(e){t.addEventListener(e,s,!1)})),t.addEventListener("drop",r),n.addEventListener("change",a),o.addEventListener("click",c)}(t)}function i(e){e.preventDefault(),e.stopPropagation()}function o(e){var t=e.parentNode,a=t.parentNode.querySelector(".file-load__progress-current"),i=t.parentNode.querySelector(".file-load__status span"),o=t.parentNode.querySelector(".file-load"),r=t.parentNode.querySelector(".file-load__size");if(e.files&&e.files[0]){var c=new FileReader;c.onloadstart=function(){t.parentNode.classList.add("loaded")},c.onprogress=function(e){a.style.width=Math.round(e.loaded/e.total*100)+"%",i.textContent=Math.round(e.loaded/e.total*100)},c.onload=function(i){a.style.width="100%",t.nextElementSibling.querySelector(".file-load__name").textContent=e.files[0].name;var c=e.files[0].size,l=" байт";c>=1024&&c<1048576?(c=Math.round(c/1024),l=" Кбайт"):(c=Math.round(c/1024/1024),l=" Мбайт"),o.classList.add("loaded"),r.textContent=c+l,n.removeAttribute("disabled")},c.readAsDataURL(e.files[0])}}function r(e){var t=e.currentTarget.querySelector("input"),n=e.dataTransfer.files;console.log(n),t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")),t.files=n,o(t)}function c(e){var t=e.currentTarget.parentNode.parentNode,a=t.querySelector("input"),i=t.querySelector(".file-load");a.value="",/safari/i.test(navigator.userAgent)||(a.type="",a.type="file"),t.classList.remove("loaded"),n.setAttribute("disabled",""),i.classList.remove("loaded")}}(),function(){var e=document.querySelectorAll(".input-file__label");function t(e){var t=e.querySelector("input"),n=e.parentNode.querySelector(".file-load__clear");function a(e){e.preventDefault(),e.stopPropagation()}function i(t){e.classList.add("highlight")}function o(t){e.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(t){e.addEventListener(t,a,!1)})),["dragenter","dragover"].forEach((function(t){e.addEventListener(t,i,!1)})),["dragleave","drop"].forEach((function(t){e.addEventListener(t,o,!1)})),e.addEventListener("drop",(function(e){var n=e.dataTransfer.files;t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"));t.files=n,r(),window.onVerificationFileDrop&&window.onVerificationFileDrop(),window.onDeliveryFileDrop&&window.onDeliveryFileDrop(),window.onInstallationFileDrop&&window.onInstallationFileDrop()}),!1);var r=function(){c(t)},c=function(t){if(t.files&&t.files[0]){var n=new FileReader;n.onload=function(n){e.parentNode.classList.add("loaded"),e.nextElementSibling.querySelector(".file-load__name").textContent=t.files[0].name},n.readAsDataURL(t.files[0])}};t.addEventListener("change",r),n.addEventListener("click",(function(){e.parentNode.classList.remove("loaded"),t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")}))}document.querySelectorAll(".modal.requests-upload")||(console.log("input file"),window.makeFileLoad=t,e[0]&&e.forEach((function(e){t(e)})))}(),function(){var e=document.querySelectorAll(".input-text");e[0]&&e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))}))}(),function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"));var t,n,a=document.querySelector("body");function i(e,t){this.trigger=e,this.modal=t,this.overlay=this.modal.querySelector(".modal__overlay"),this.closeBtn=this.modal.querySelector(".modal__close"),this.onOverlayClick=this.onOverlayClick.bind(this),this.onCloseClick=this.onCloseClick.bind(this),this.onTriggerClick=this.onTriggerClick.bind(this),this.addEventListeners()}window.addEventListener("resize",(t=function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"))},function(e){n&&clearTimeout(n),n=setTimeout(t,100,e)})),i.prototype.open=function(){this.modal.classList.add("js-show"),a.classList.add("js__body-no-scroll")},i.prototype.close=function(){this.modal.classList.remove("js-show"),a.classList.remove("js__body-no-scroll")},i.prototype.onOverlayClick=function(e){e.target===this.overlay&&this.close()},i.prototype.onCloseClick=function(){this.close()},i.prototype.onTriggerClick=function(){this.open()},i.prototype.addEventListeners=function(){this.overlay.addEventListener("click",this.onOverlayClick),this.closeBtn&&this.closeBtn.addEventListener("click",this.onCloseClick),this.trigger&&this.trigger.addEventListener("click",this.onTriggerClick)},window.Modal=i}(),$(".input-money").mask("# ##0 ₽",{reverse:!0}),function(){var e=document.querySelectorAll(".input-phone");if(e[0]){var t=new Inputmask("+7(999) 999-99-99");e.forEach((function(e){t.mask(e)}))}}(),function(){var e=document.querySelectorAll(".search"),t=document.querySelectorAll(".search + .search-close");e[0]&&(e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))})),t.forEach((function(e){e.addEventListener("click",(function(){var t=e.previousElementSibling;t.value="",t.classList.contains("js-inputed")&&t.classList.remove("js-inputed")}))})))}(),function(){function e(e){var t=e.text.split("splitter"),n=window.matchMedia("(max-width: 999px)").matches?"<br>":"";return t.length>1?$("<span>"+t[0]+"</span>"+n+"<span>"+t[1]+"</span>"):e.text}$(".select").select2({templateResult:e,templateSelection:e}),$(".select").on("select2:select",(function(e){$(this).addClass("picked")}))}(),$(window).on("load",(function(){new Swiper(".subscription-tabs",{freeMode:!0,slidesPerView:"auto",watchOverflow:!0})})),function(){var e=document.querySelectorAll(".delivery-or-pickup__modal-time");if(e[0]){var t=new Inputmask("99:99");e.forEach((function(e){t.mask(e)}))}}(),function(){var e=document.querySelectorAll(".account-creation__new");if(e[0]){var t=document.getElementById("account-creation");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){if(document.getElementById("account-creation")){var e=$(".account-creation__input .input-text"),t=$("#account-creation .modal__save");e.on("input",(function(n){0===e.filter((function(){return""===this.value.split(" ").join("")||0===this.value.length})).length?t.removeAttr("disabled"):t.attr("disabled","")}))}}(),function(){var e=$(".agent-report__equipment  table  tbody"),t=e.children().eq(1);console.log(t.clone()[0]),$(".agent-report__add-line").on("click",(function(){e.append(t.clone())}))}(),function(){if(document.querySelector(".agents__users-block-mobile")){new Swiper(".agents__users-block-mobile__slider",{slidesPerView:1,pagination:{el:".agents__users-block-mobile__pagination",dynamicBullets:!0}});$(".agents__users-btn").parent().next().slideToggle()}}(),$(".agents__users-btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){var e=document.querySelectorAll(".contract-info__cancellation");if(e[0]){var t=document.getElementById("cancellation__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".user-settings__change-email");if(e[0]){var t=document.getElementById("change-email");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("change-email");if(e){var t=e.querySelector(".change-email__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){e.target.validity.valid&&n.removeAttribute("disabled"),e.target.validity.valid||n.hasAttribute("disabled")||n.setAttribute("disabled","")}))}}(),function(){var e=document.querySelectorAll(".user-settings__change-phone");if(e[0]){var t=document.getElementById("change-phone");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("change-phone");if(e){var t=e.querySelector(".change-phone__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){-1===e.target.value.indexOf("_")&&n.removeAttribute("disabled"),-1!==e.target.value.indexOf("_")&&(n.hasAttribute("disabled")||n.setAttribute("disabled",""))}))}}(),function(){var e=document.querySelectorAll(".contract-creation__client-type  input");if(e[0]){var t=document.querySelector(".contract-creation__details");e.forEach((function(e){e.addEventListener("change",n)}))}function n(){e[0].checked&&t.classList.remove("show-for-entity"),e[1].checked&&t.classList.add("show-for-entity")}}(),function(){if(document.querySelector(".clients-mobile-block"))new Swiper(".clients-mobile-block__slider",{slidesPerView:1,pagination:{el:".clients-mobile-block__pagination",dynamicBullets:!0}})}(),document.querySelectorAll("[data-trigger]").forEach((function(e){var t=e.getAttribute("data-trigger"),n=document.querySelector("[data-modal="+t+"]");n&&new Modal(e,n)})),function(){var e=document.getElementById("confirmation-code");if(e){var t=e.querySelector(".confirmation-code__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){6===e.target.value.length&&n.removeAttribute("disabled"),e.target.value.length<6&&(n.hasAttribute("disabled")||n.setAttribute("disabled",""))}))}}(),$(".delivery-or-pickup.done").click((function(){$(this).find(".contract-info__delivered-adress").slideToggle(),$(this).find(".contract-info__delivered-toggle").toggleClass("opened")})),function(){if(document.querySelector(".contract-services")){var e=document.querySelectorAll(".contract-services__link"),t=function(e){var t=e.target;(t.classList.contains("checkbox-btn__label")||t.classList.contains("checkbox-btn__checkbox")||t.classList.contains("deliver-or-pickup__confirm-btn")||t.classList.contains("contract-services__delivery-confirm"))&&e.preventDefault()};e.forEach((function(e){e.addEventListener("click",t)}))}}(),function(){var e=document.querySelectorAll(".contracts__link");if(e[0]){var t=function(e){var t=e.target;(t.classList.contains("checkbox-btn__label")||t.classList.contains("checkbox-btn__checkbox")||t.classList.contains("contract-info__verification")||t.classList.contains("payment-waiting__confirm-btn")||t.classList.contains("contract-services__delivery-confirm"))&&e.preventDefault()};e.forEach((function(e){e.addEventListener("click",t)}))}}(),function(){if(document.querySelector(".contract-services-mobile"))new Swiper(".contract-services-mobile__slider",{slidesPerView:1,pagination:{el:".contract-services-mobile__pagination",dynamicBullets:!0}})}(),function(){if(document.querySelector(".contracts-mobile"))new Swiper(".contracts-mobile__slider",{slidesPerView:1,pagination:{el:".contracts-mobile__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".subscription-page__action-item--delete");if(e[0]){var t=document.getElementById("delete-service__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".deliver-or-pickup__confirm-btn");if(e[0]){var t=document.getElementById("delivery-or-pickup__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".contract-creation__delivery-device");e[0]&&e.forEach((function(e){var t=e.querySelectorAll(".contract-creation__delivery-type-wrapper  input");function n(e){var n=e.target.parentNode.parentNode.parentNode;t[0].checked&&n.classList.remove("show-for-pickup"),t[1].checked&&n.classList.add("show-for-pickup")}t.forEach((function(e){e.addEventListener("change",n)}))}))}(),function(){var e=$(".mutual-calcs__earned-date-menu");$(".mutual-calcs__earned-date-btn");$.extend($.datepicker,{_inlineDatepicker2:$.datepicker._inlineDatepicker,_inlineDatepicker:function(e,t){this._inlineDatepicker2(e,t);var n=$.datepicker._get(t,"beforeShow");n&&n.apply(e,[e,t])}}),$(".mutual-calcs__earned-date-btn").on("click",(function(){$(".mutual-calcs__earned-date-menu").toggle()})),$("#earned-date").datepicker({range:"period",inline:!0,showButtonPanel:!0,showOtherMonths:!0,selectOtherMonths:!0,closeText:"Готово",dateFormat:"dd.mm.yy",beforeShow:function(e,t){t.dpDiv.css("transform","translateX(-24px)"),t.dpDiv.addClass("calendar-range")},onSelect:function(e,t,n){$(".mutual-calcs__earned-date-btn").text(n.startDateText+" - "+n.endDateText)}}),$(document).mouseup((function(e){var t=$(".mutual-calcs__earned-date-menu"),n=$(".mutual-calcs__earned-date-btn");t.is(e.target)||0!==t.has(e.target).length||n.is(e.target)||0!==n.has(e.target).length||t.hide()})),$(".mutual-calcs__earned-date-menu-btn").on("click",(function(){$(this).hasClass("all-time")?""===$(".earned-date__start-period").text()?$(".mutual-calcs__earned-date-btn").text($(this).text()):$(".mutual-calcs__earned-date-btn").text($(this).text()+" (с "+$(".earned-date__start-period").text()+")"):$(".mutual-calcs__earned-date-btn").text($(this).text()),e.hide()})),""===$(".earned-date__start-period").text()?$(".mutual-calcs__earned-date-btn").text($(".mutual-calcs__earned-date-menu-btn.all-time").text()):$(".mutual-calcs__earned-date-btn").text($(".mutual-calcs__earned-date-menu-btn.all-time").text()+" (с "+$(".earned-date__start-period").text()+")")}(),$(".filters__btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),$(".filters__btn-clear").click((function(){$(".filters .select").val("Все"),$(".filters .select").trigger("change"),$(".filters .select").removeClass("picked")})),function(){var e=$(".subscription-all__hierarchy-trigger"),t=$(".hierarchy"),n=t.find(".hierarchy__blackout"),a=t.find(".hierarchy__close");e.on("click",(function(){t.addClass("opened")})),n.on("click",(function(){t.removeClass("opened")})),a.on("click",(function(){t.removeClass("opened")}))}(),function(){var e=$(".hierarchy__line");e.on("click",(function(){$(this).find(".hierarchy__open-btn").toggleClass("opened"),$(this).next().toggleClass("opened"),$(this).hasClass("marked")||(e.removeClass("marked"),$(this).addClass("marked"))}))}(),function(){if(document.querySelector(".installation-accounts-mobile"))new Swiper(".installation-accounts-mobile__slider",{slidesPerView:1,pagination:{el:".installation-accounts-mobile__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".installation__confirm-btn");if(e[0]){var t=document.getElementById("installation__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelectorAll(".delivery-or-pickup__installation-choose-block  input");if(e[0]){var t=e[0].parentNode.parentNode.parentNode.parentNode;e.forEach((function(e){e.addEventListener("change",n)}))}function n(){console.log(t),e[0].checked&&(t.classList.contains("show-for-manual")&&t.classList.remove("show-for-manual"),t.classList.contains("show-for-registration")&&t.classList.remove("show-for-registration"),t.classList.contains("show-for-delivery")||t.classList.add("show-for-delivery")),e[1].checked&&(t.classList.contains("show-for-manual")&&t.classList.remove("show-for-manual"),t.classList.contains("show-for-delivery")&&t.classList.remove("show-for-delivery"),t.classList.contains("show-for-registration")||t.classList.add("show-for-registration")),e[2].checked&&(t.classList.contains("show-for-delivery")&&t.classList.remove("show-for-delivery"),t.classList.contains("show-for-registration")&&t.classList.remove("show-for-registration"),t.classList.contains("show-for-manual")||t.classList.add("show-for-manual"))}}(),function(){var e=document.querySelectorAll(".mutual-calcs__make-payment");if(e[0]){var t=document.getElementById("payment-waiting__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.querySelector(".header__nav-btn");if(e){var t=document.querySelector(".header__close-btn"),n=document.querySelector(".header__nav"),a=function(){return window.matchMedia("(max-width: 1439px)").matches};a();e.addEventListener("click",(function(){a()&&(e.classList.toggle("js-opened"),n.classList.toggle("js-show"))})),t.addEventListener("click",(function(){n.classList.remove("js-show"),e.classList.toggle("js-opened")}))}}(),function(){if(document.querySelector(".mutual-calcs-payment-mobile"))new Swiper(".mutual-calcs-payment-mobile__slider",{slidesPerView:1,pagination:{el:".mutual-calcs-payment-mobile__pagination",dynamicBullets:!0}})}(),function(){if(document.querySelector(".mutual-calcs-block-mobile"))new Swiper(".mutual-calcs-block-mobile__slider",{slidesPerView:1,pagination:{el:".mutual-calcs-block-mobile__pagination",dynamicBullets:!0}})}(),document.querySelectorAll(".input-password")[0]&&$(document).on("click",".input-icon--show-password",(function(){$(this).toggleClass("active"),$(this).hasClass("active")?$(this).next().attr("type","text"):$(this).next().attr("type","password")})),function(){var e=document.querySelectorAll(".payment-waiting__confirm-btn");if(e[0]){var t=document.getElementById("payment-waiting__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("payment-waiting__modal");if(e){var t=e.querySelector(".modal__close"),n=e.querySelector(".modal__overlay"),a=e.querySelector(".transactions__check-all input"),i=e.querySelector(".payment-waiting__modal-sender input"),o=e.querySelector(".payment-waiting__modal-recipient input"),r=e.querySelector(".payment-waiting__modal-sum input"),c=e.querySelector(".payment-waiting__modal-purpose input"),l=function(){return e.querySelectorAll(".transactions__check input")},s=function(){return e.querySelectorAll(".transactions__mobile-check input")},d=function(){a.checked=!1,l().forEach((function(e){e.checked=!1,e.parentNode.parentNode.parentNode.parentNode.classList.remove("checked")})),s().forEach((function(e){e.checked=!1,e.parentNode.parentNode.parentNode.classList.remove("checked")})),$("#payment-date").datepicker("setDate",""),i.value="",o.value="",r.value="",c.value=""},u=function(e){e.target.checked?e.target.parentNode.parentNode.parentNode.parentNode.classList.add("checked"):e.target.parentNode.parentNode.parentNode.parentNode.classList.remove("checked")},f=function(e){e.target.checked?e.target.parentNode.parentNode.parentNode.classList.add("checked"):e.target.parentNode.parentNode.parentNode.classList.remove("checked")};t.addEventListener("click",d),n.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&d()})),a.addEventListener("change",(function(){l().forEach((function(e){var t=e.parentNode.parentNode.parentNode.parentNode;a.checked?(e.checked=!0,t.classList.contains("checked")||t.classList.add("checked")):(e.checked=!1,t.classList.contains("checked")&&t.classList.remove("checked"))}))})),l().forEach((function(e){e.addEventListener("change",u)})),s().forEach((function(e){e.addEventListener("change",f)}))}}(),function(){var e=document.querySelectorAll(".mutual-calcs-payment-block__link");if(e[0]){var t=document.getElementById("payment-info__modal");e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e,t=document.getElementById("js-video-box");$(".subscribe-register__input .input-text").each((function(n,a){var i=$(this);i.siblings(".subscribe-register__btn").on("click",(function(n){var a;(e=new JsQRScanner((a=i,function(n){a.val(n),$(".qr-scanner-modal").removeClass("js-show"),e.stopScanning(),e.removeFrom(t)}))).setSnapImageMaxSize(300),t&&(t.innerHTML="",e.appendTo(t))}))})),$(document).on("click",".qr-scanner-modal .qr-scanner-modal__close",(function(n){e.stopScanning(),e.removeFrom(t)}))}(),function(){if(document.querySelector(".subscription-page__reward-mobile"))new Swiper(".subscription-page__reward-mobile",{slidesPerView:1,pagination:{el:".subscription-page__pagination",dynamicBullets:!0}})}(),function(){var e=document.querySelectorAll(".contract-device__schedule");if(e[0]){var t=document.getElementById("schedule__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){if(document.getElementById("schedule__modal")){var e=document.querySelectorAll(".schedule__modal-toggle input"),t=document.querySelector(".schedule__modal-toggle");e.forEach((function(e,n){e.addEventListener("change",(function(){0===n&&(t.classList.remove("second-tab"),t.classList.add("first-tab")),1===n&&(t.classList.remove("first-tab"),t.classList.add("second-tab"))}))}))}}(),function(){if(document.querySelector(".main-page")){var e=document.querySelector(".support"),t=document.querySelector(".support__container"),n=e.querySelectorAll(".support__item");!function(){var e=document.createDocumentFragment(),a=document.createElement("div");a.classList.add("swiper-container"),a.classList.add("support__slider");var i=document.createElement("div");i.classList.add("swiper-wrapper"),n.forEach((function(e,t){var n=document.createElement("div");n.classList.add("swiper-slide");var a=e.cloneNode(!0);n.appendChild(a),i.appendChild(n)}));var o=document.createElement("div");o.classList.add("support__slider-pagination","swiper-pagination"),a.appendChild(i),a.appendChild(o),e.appendChild(a),t.appendChild(e),new Swiper(".support__slider",{slidesPerView:1,pagination:{el:".support__slider-pagination"}})}()}}(),$(".support__docs-btn").click((function(){$(this).parent().next().slideToggle(),$(this).toggleClass("opened")})),function(){if(document.querySelector(".transactions-mobile-block"))new Swiper(".transactions-mobile-block__slider",{slidesPerView:1,pagination:{el:".transactions-mobile-block__pagination",dynamicBullets:!0}})}(),$(".header__user-btn").on("click",(function(e){$(this).is(e.target)&&$(this).toggleClass("active")})),$(document).on("mouseup",(function(e){var t=$(".header__user-btn");t.is(e.target)||0!==t.has(e.target).length||t.removeClass("active")})),function(){var e=document.querySelectorAll(".contract-info__verification");if(e[0]){var t=document.getElementById("verification__modal");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("verification__modal");if(e){var t=e.querySelectorAll(".verification__modal-input-file"),n=e.querySelector(".modal__close"),a=e.querySelector(".modal__overlay"),i=e.querySelector(".modal__save"),o=function(){t.forEach((function(e){var t=e.querySelector(".input-file__input");e.classList.contains("loaded")&&(e.classList.remove("loaded"),t.value="",i.setAttribute("disabled",""),/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"))}))},r=function(){i.hasAttribute("disabled")||i.setAttribute("disabled","")};window.onVerificationFileDrop=function(){var e;e=!0,t.forEach((function(t){""===t.querySelector(".input-file__input").value&&(e=!1)})),e&&i.hasAttribute("disabled")&&i.removeAttribute("disabled"),e||i.hasAttribute("disabled")||i.setAttribute("disabled","")},t.forEach((function(e){var t=e.querySelector(".input-file__input"),n=e.querySelector(".file-load__clear");t.addEventListener("change",window.onVerificationFileDrop),n.addEventListener("click",r)})),n.addEventListener("click",o),a.addEventListener("click",(function(e){e.target.classList.contains("modal__overlay")&&o()}))}}(),function(){var e=document.querySelectorAll(".contract-info__serial-btn");if(e[0]){var t=document.getElementById("write-serial");t&&e.forEach((function(e){new Modal(e,t)}))}}(),function(){var e=document.getElementById("write-serial");if(e){var t=e.querySelector(".write-serial__input .input-text"),n=e.querySelector(".modal__save");t.addEventListener("input",(function(e){var t=e.target.value;""!==t.split(" ").join("")&&t.length>0&&n.hasAttribute("disabled")&&n.removeAttribute("disabled"),""!==t.split(" ").join("")&&0!==t.length||n.hasAttribute("disabled")||n.setAttribute("disabled","")}))}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyIsImNoZWNrYm94LTIuanMiLCJkYXRlLWlucHV0LmpzIiwiaW5wdXQtZmlsZS1yZXF1ZXN0cy5qcyIsImlucHV0LWZpbGUtc2Nhbi5qcyIsImlucHV0LWZpbGUuanMiLCJpbnB1dC10ZXh0LmpzIiwibW9kYWwuanMiLCJtb25leS1tYXNrLmpzIiwicGhvbmUtbWFzay5qcyIsInNlYXJjaC5qcyIsInNlbGVjdC5qcyIsInN1YnNjcmlwdGlvbi10YWJzLmpzIiwidGltZS1tYXNrLmpzIiwiYWNjb3VudC1jcmVhdGlvbi1tb2RhbC5qcyIsImFjY291bnQtY3JlYXRpb24uanMiLCJhZ2VudC1yZXBvcnQuanMiLCJhZ2VudC11c2Vycy1zbGlkZXIuanMiLCJhZ2VudHMuanMiLCJjYW5jZWxsYXRpb24tbW9kYWwuanMiLCJjaGFuZ2UtZW1haWwtbW9kYWwuanMiLCJjaGFuZ2UtZW1haWwuanMiLCJjaGFuZ2UtcGhvbmUtbW9kYWwuanMiLCJjaGFuZ2UtcGhvbmUuanMiLCJjbGllbnQtdHlwZS5qcyIsImNsaWVudHMtc2xpZGVyLmpzIiwiY29tbW9uLW1vZGFsLmpzIiwiY29uZmlybWF0aW9uLWNvZGUuanMiLCJjb250cmFjdC1wYWdlLmpzIiwiY29udHJhY3Qtc2VydmljZXMuanMiLCJjb250cmFjdHMtYWxsLmpzIiwiY29udHJhY3RzLXNlcnZpY2VzLXNsaWRlci5qcyIsImNvbnRyYWN0cy1zbGlkZXIuanMiLCJkZWxldGUtc2VydmljZS1tb2RhbC5qcyIsImRlbGl2ZXJ5LW1vZGFsLmpzIiwiZGVsaXZlcnktdHlwZS5qcyIsImVhcm5lZC1kYXRlLmpzIiwiZmlsdGVycy5qcyIsImhpZXJhcmNoeS1tb2RhbC5qcyIsImhpZXJhcmNoeS5qcyIsImluc3RhbGxhdGlvbi1hY2NvdW50cy1zbGlkZXIuanMiLCJpbnN0YWxsYXRpb24tbW9kYWwuanMiLCJpbnN0YWxsYXRpb24td2FpdGluZy5qcyIsIm1ha2UtcGF5bWVudC1tb2RhbC5qcyIsIm1lbnUuanMiLCJtdXR1YWwtY2FsY3MtcGF5bWVudC1zbGlkZXIuanMiLCJtdXR1YWwtY2FsY3Mtc2xpZGVyLmpzIiwicGFzc3dvcmQtaW5wdXQuanMiLCJwYXltZW50LWNvbmZpcm0tbW9kYWwuanMiLCJwYXltZW50LWNvbmZpcm0uanMiLCJwYXltZW50LWluZm8tbW9kYWwuanMiLCJxcnNjYW5uZXIuanMiLCJyZXdhcmQtc2xpZGVyLmpzIiwic2NoZWR1bGUtbW9kYWwuanMiLCJzY2hlZHVsZS5qcyIsInN1cHBvcnQtc2xpZGVyLmpzIiwic3VwcG9ydC5qcyIsInRyYW5zYWN0aW9ucy1zbGlkZXIuanMiLCJ1c2VyLWJ0bi5qcyIsInZlcmlmaWNhdGlvbi1tb2RhbC5qcyIsInZlcmlmaWNhdGlvbi5qcyIsIndyaXRlLXNlcmlhbC1tb2RhbC5qcyIsIndyaXRlLXNlcmlhbC5qcyJdLCJuYW1lcyI6WyJjaGVja2JveDIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaXRlbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiY2hlY2tlZCIsInBhcmVudE5vZGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCIkIiwiZGF0ZXBpY2tlciIsImRhdGVGb3JtYXQiLCJyYW5nZSIsImlubGluZSIsInNob3dCdXR0b25QYW5lbCIsInNob3dPdGhlck1vbnRocyIsInNlbGVjdE90aGVyTW9udGhzIiwiY2xvc2VUZXh0IiwiYmVmb3JlU2hvdyIsImlucHV0IiwiaW5zdCIsImRwRGl2IiwiY3NzIiwiYWRkQ2xhc3MiLCJvblNlbGVjdCIsImRhdGVUZXh0IiwiZXh0ZW5zaW9uUmFuZ2UiLCJ2YWwiLCJzdGFydERhdGVUZXh0IiwiZW5kRGF0ZVRleHQiLCJyZXF1ZXN0TW9kYWwiLCJxdWVyeVNlbGVjdG9yIiwiZmlsZXNXcmFwcGVyIiwiZmlsZUlucHV0SXRlbSIsIm5ld0ZpbGVJbnB1dEl0ZW0iLCJjbG9uZU5vZGUiLCJzdWJtaXQiLCJjYW5jZWwiLCJvbkZpbGVDaGFuZ2UiLCJyZWFkVXJsIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJpZHgiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsImhhc0F0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0cyIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2hlY2tGb3JtIiwiZmlsZXMiLCJsZW5ndGgiLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaWxlRHJvcEFyZWEiLCJiYXIiLCJzdGF0dXMiLCJmaWxlTG9hZCIsImZpbGVJbmZvIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZHN0YXJ0Iiwib25wcm9ncmVzcyIsInN0eWxlIiwid2lkdGgiLCJNYXRoIiwicm91bmQiLCJsb2FkZWQiLCJ0b3RhbCIsInRleHRDb250ZW50Iiwib25sb2FkIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmFtZSIsInNpemUiLCJzaXplRGltIiwidHlwZSIsIm5ld0l0ZW0iLCJwcmVwZW5kIiwicmVhZEFzRGF0YVVSTCIsImhhbmRsZURyb3AiLCJmaWxlSW5wdXQiLCJjdXJyZW50VGFyZ2V0IiwiZGF0YVRyYW5zZmVyIiwiY29uc29sZSIsImxvZyIsInZhbHVlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm9uQ2xlYXIiLCJkcm9wQXJlYSIsImZpbGVDbGVhciIsImhpZ2hsaWdodCIsInVuaGlnaGxpZ2h0IiwiZXZlbnROYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNjYW5VcGxvYWQiLCJtYWtlRmlsZUxvYWQiLCJ3aW5kb3ciLCJvblZlcmlmaWNhdGlvbkZpbGVEcm9wIiwib25EZWxpdmVyeUZpbGVEcm9wIiwib25JbnN0YWxsYXRpb25GaWxlRHJvcCIsImlucHV0cyIsInNwbGl0Iiwiam9pbiIsImNvbnRhaW5zIiwidmgiLCJpbm5lckhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsInNldFByb3BlcnR5IiwiY29uY2F0IiwiZnVuYyIsInRpbWVyIiwiJGJvZHkiLCJNb2RhbCIsInRyaWdnZXIiLCJtb2RhbCIsInRoaXMiLCJvdmVybGF5IiwiY2xvc2VCdG4iLCJvbk92ZXJsYXlDbGljayIsImJpbmQiLCJvbkNsb3NlQ2xpY2siLCJvblRyaWdnZXJDbGljayIsImV2ZW50IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInByb3RvdHlwZSIsIm9wZW4iLCJjbG9zZSIsIm1hc2siLCJyZXZlcnNlIiwiaW0iLCJJbnB1dG1hc2siLCJpdGVtcyIsInNlYXJjaCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJmb3JtYXRPcHRpb24iLCJ0ZXh0IiwiYnIiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsInNlbGVjdDIiLCJ0ZW1wbGF0ZVJlc3VsdCIsInRlbXBsYXRlU2VsZWN0aW9uIiwib24iLCJTd2lwZXIiLCJmcmVlTW9kZSIsInNsaWRlc1BlclZpZXciLCJ3YXRjaE92ZXJmbG93IiwiZGVsaXZlcnlUaW1lSW5wdXRzIiwiY2FuY2VsbGF0aW9uQnRuIiwiZ2V0RWxlbWVudEJ5SWQiLCIkaW5wdXQiLCIkYnRuIiwiZmlsdGVyIiwicmVtb3ZlQXR0ciIsImF0dHIiLCIkdGJvZHkiLCIkbGluZSIsImNoaWxkcmVuIiwiZXEiLCJjbG9uZSIsImFwcGVuZCIsInBhZ2luYXRpb24iLCJlbCIsImR5bmFtaWNCdWxsZXRzIiwicGFyZW50IiwibmV4dCIsInNsaWRlVG9nZ2xlIiwiY2xpY2siLCJ0b2dnbGVDbGFzcyIsImNoYW5nZUJ1dHRvbiIsImJ0biIsInZhbGlkaXR5IiwidmFsaWQiLCJpbmRleE9mIiwicmFkaW9zIiwid3JhcHBlciIsIm9uUmFkaW9DaGFuZ2UiLCJnZXRBdHRyaWJ1dGUiLCJmaW5kIiwibGlua3MiLCJvbkxpbmtDbGljayIsImxpbmsiLCJjb250cmFjdHNMaW5rQWxsIiwiZGVsaXZlcnlCdG5zIiwiZGV2aWNlcyIsIm1lbnUiLCJleHRlbmQiLCJfaW5saW5lRGF0ZXBpY2tlcjIiLCJfaW5saW5lRGF0ZXBpY2tlciIsIl9nZXQiLCJhcHBseSIsInRvZ2dsZSIsIm1vdXNldXAiLCJpcyIsImhhcyIsImhpZGUiLCJoYXNDbGFzcyIsInJlbW92ZUNsYXNzIiwiJHRyaWdnZXIiLCIkbW9kYWwiLCIkYmxhY2tvdXQiLCIkY2xvc2UiLCJwYXltZW50Q29uZmlybUJ0bnMiLCJtZW51QnRuIiwibmF2IiwiY2hlY2tJZlRhYmxldCIsIm1haW5DaGVja2JveCIsInNlbmRlcklucHV0IiwicmVjaXBpZW50SW5wdXQiLCJzdW1JbnB1dCIsInB1cnBvc2VJbnB1dCIsImdldEFsbENoZWNrYm94IiwiZ2V0QWxsTW9iaWxlQ2hlY2tib3giLCJvbkNoZWNrYm94Q2hhbmdlIiwib25Nb2JpbGVDaGVja2JveENoYW5nZSIsInJvdyIsInBheW1lbnRzIiwiamJTY2FubmVyIiwic2Nhbm5lclBhcmVudEVsZW1lbnQiLCJlYWNoIiwiaW5kZXgiLCJzaWJsaW5ncyIsIkpzUVJTY2FubmVyIiwic2Nhbm5lZFRleHQiLCJzdG9wU2Nhbm5pbmciLCJyZW1vdmVGcm9tIiwic2V0U25hcEltYWdlTWF4U2l6ZSIsImlubmVySFRNTCIsImFwcGVuZFRvIiwic2NoZWR1bGVCdG5zIiwiaWQiLCJzdXBwb3J0Iiwic3VwcG9ydENvbnRhaW5lciIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJzbGlkZSIsIm5vZGUiLCJhcHBlbmRDaGlsZCIsIm1ha2VTbGlkZXIiLCJibG9jayIsInZlcmlmaWNhdGlvbkJ0biIsImZpbGVJbnB1dEJsb2NrIiwic2F2ZUJ0biIsImlucHV0QmxvY2siLCJvbkZpbGVDbGVhciIsImZpbGxlZCJdLCJtYXBwaW5ncyI6IkFBQUEsY0NBQSxXQUNBLElBQUFBLEVBQUFDLFNBQUFDLGlCQUFBLHNCQUVBRixFQUFBLElBSUFBLEVBQUFHLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsaUJBQUEsVUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQUFDLFFBQ0EsSUFBQUEsRUFBQUMsUUFDQUQsRUFBQUUsV0FBQUMsVUFBQUMsSUFBQSxXQUVBSixFQUFB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QUFBLG1CQUNBaUIsUUE3REEsR0NBQSxXQUNBLElBQUE2QixFQUFBeEosU0FBQUMsaUJBQUEsOEJBRUEsR0FBQXVKLEVBQUEsR0FBQSxDQUlBLElBQUFuQyxFQUFBckgsU0FBQXlKLGVBQUEsZ0JBRUFwQyxHQUlBbUMsRUFBQXRKLFNBQUEsU0FBQUMsR0FDQSxJQUFBZ0gsTUFBQWhILEVBQUFrSCxPQWRBLEdDQUEsV0FPQSxJQUFBQSxFQUFBckgsU0FBQXlKLGVBQUEsZ0JBRUEsR0FBQXBDLEVBQUEsQ0FJQSxJQUFBL0YsRUFBQStGLEVBQUFuRixjQUFBLG9DQUNBNEksRUFBQXpELEVBQUFuRixjQUFBLGdCQTJCQVosRUFBQWxCLGlCQUFBLFNBekJBLFNBQUFDLEdBQ0EsSUFBQWlGLEVBQUFqRixFQUFBQyxPQUFBZ0YsTUFHQSxLQUFBQSxFQUFBa0IsTUFBQSxLQUFBQyxLQUFBLEtBQ0FuQixFQUFBakMsT0FBQSxHQUNBeUgsRUFBQWhJLGFBQUEsYUFFQWdJLEVBQUF4SCxnQkFBQSxZQUlBLEtBQUFnQyxFQUFBa0IsTUFBQSxLQUFBQyxLQUFBLEtBQ0EsSUFBQW5CLEVBQUFqQyxRQUVBeUgsRUFBQWhJLGFBQUEsYUFDQWdJLEVBQUEvSCxhQUFBLFdBQUEsUUFoQ0EiLCJmaWxlIjoic2NyaXB0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgY2hlY2tib3gyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNoZWNrYm94LTJfX2lucHV0Jyk7XG5cbiAgaWYgKCFjaGVja2JveDJbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjaGVja2JveDIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgICAgaWYgKHRhcmdldC5jaGVja2VkID09PSB0cnVlKSB7XG4gICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAkKCcuZGF0ZS1pbnB1dDpub3QoLmRhdGUtaW5wdXQtcmFuZ2UpJykuZGF0ZXBpY2tlcih7XG4gICAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5J1xuICB9KTtcbiAgJCgnLmRhdGUtaW5wdXQtcmFuZ2UnKS5kYXRlcGlja2VyKHtcbiAgICByYW5nZTogJ3BlcmlvZCcsXG4gICAgaW5saW5lOiB0cnVlLFxuICAgIHNob3dCdXR0b25QYW5lbDogdHJ1ZSxcbiAgICBzaG93T3RoZXJNb250aHM6IHRydWUsXG4gICAgc2VsZWN0T3RoZXJNb250aHM6IHRydWUsXG4gICAgY2xvc2VUZXh0OiBcItCT0L7RgtC+0LLQvlwiLFxuICAgIGRhdGVGb3JtYXQ6ICdkZC5tbS55eScsXG4gICAgYmVmb3JlU2hvdzogZnVuY3Rpb24gYmVmb3JlU2hvdyhpbnB1dCwgaW5zdCkge1xuICAgICAgaW5zdC5kcERpdi5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVYKC0yNHB4KScpO1xuICAgICAgaW5zdC5kcERpdi5hZGRDbGFzcygnY2FsZW5kYXItcmFuZ2UnKTtcbiAgICB9LFxuICAgIG9uU2VsZWN0OiBmdW5jdGlvbiBvblNlbGVjdChkYXRlVGV4dCwgaW5zdCwgZXh0ZW5zaW9uUmFuZ2UpIHtcbiAgICAgIGluc3QuaW5wdXQudmFsKGV4dGVuc2lvblJhbmdlLnN0YXJ0RGF0ZVRleHQgKyAnIC0gJyArIGV4dGVuc2lvblJhbmdlLmVuZERhdGVUZXh0KTtcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlcXVlc3RNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC5yZXF1ZXN0cy11cGxvYWQnKTtcblxuICBpZiAoIXJlcXVlc3RNb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBmaWxlc1dyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwucmVxdWVzdHMtdXBsb2FkIC5pbnB1dC1maWxlX193cmFwcGVyJyk7XG4gIHZhciBmaWxlSW5wdXRJdGVtID0gZmlsZXNXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlJyk7XG4gIHZhciBuZXdGaWxlSW5wdXRJdGVtID0gZmlsZUlucHV0SXRlbS5jbG9uZU5vZGUodHJ1ZSk7XG4gIHZhciBzdWJtaXQgPSByZXF1ZXN0TW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19zYXZlJyk7XG4gIHZhciBjYW5jZWwgPSByZXF1ZXN0TW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuXG4gIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0cyhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICA7XG5cbiAgZnVuY3Rpb24gbWFrZUlucHV0c05hbWVzKCkge1xuICAgIGZpbGVzV3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xuICAgICAgaXRlbS5uYW1lID0gJ2ZpbGUtJyArIGlkeDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFySW5wdXRzKCkge1xuICAgIGZpbGVzV3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtZmlsZS1yZXF1ZXN0cycpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xuICAgICAgaWYgKGlkeCAhPT0gMCkge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVycyhpdGVtKTtcbiAgICAgICAgaXRlbS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAhc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSAmJiBzdWJtaXQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRm9ybSgpIHtcbiAgICB2YXIgZmlsZXMgPSBmaWxlc1dyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLmZpbGUtbG9hZC5sb2FkZWQnKTtcbiAgICBmaWxlcy5sZW5ndGggPiAwICYmIHN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgJiYgc3VibWl0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICBmaWxlcy5sZW5ndGggPT09IDAgJiYgIXN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgJiYgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVXJsKGlucHV0KSB7XG4gICAgdmFyIGZpZWxJbnB1dEl0ZW0gPSBpbnB1dC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgdmFyIGZpbGVEcm9wQXJlYSA9IGlucHV0LnBhcmVudE5vZGU7XG4gICAgdmFyIGJhciA9IGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX3Byb2dyZXNzLWN1cnJlbnQnKTtcbiAgICB2YXIgc3RhdHVzID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fc3RhdHVzIHNwYW4nKTtcbiAgICB2YXIgZmlsZUxvYWQgPSBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkJyk7XG4gICAgdmFyIGZpbGVJbmZvID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fc2l6ZScpO1xuXG4gICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7XG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgcmVhZGVyLm9ubG9hZHN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKTtcbiAgICAgIH07XG5cbiAgICAgIHJlYWRlci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgYmFyLnN0eWxlLndpZHRoID0gTWF0aC5yb3VuZChlLmxvYWRlZCAvIGUudG90YWwgKiAxMDApICsgJyUnO1xuICAgICAgICBzdGF0dXMudGV4dENvbnRlbnQgPSBNYXRoLnJvdW5kKGUubG9hZGVkIC8gZS50b3RhbCAqIDEwMCk7XG4gICAgICB9O1xuXG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgYmFyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBmaWxlRHJvcEFyZWEubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX25hbWUnKS50ZXh0Q29udGVudCA9IGlucHV0LmZpbGVzWzBdLm5hbWU7XG4gICAgICAgIHZhciBzaXplID0gaW5wdXQuZmlsZXNbMF0uc2l6ZTtcbiAgICAgICAgdmFyIHNpemVEaW0gPSAnINCx0LDQudGCJztcbiAgICAgICAgdmFyIHR5cGUgPSAnWExTWCwgJztcblxuICAgICAgICBpZiAoc2l6ZSA+PSAxMDI0ICYmIHNpemUgPCAxMDQ4NTc2KSB7XG4gICAgICAgICAgc2l6ZSA9IE1hdGgucm91bmQoc2l6ZSAvIDEwMjQpO1xuICAgICAgICAgIHNpemVEaW0gPSAnINCa0LHQsNC50YInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpemUgPSBNYXRoLnJvdW5kKHNpemUgLyAxMDI0IC8gMTAyNCk7XG4gICAgICAgICAgc2l6ZURpbSA9ICcg0JzQsdCw0LnRgic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQuZmlsZXNbMF0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcpIHtcbiAgICAgICAgICB0eXBlID0gJ1hMUywgJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbGVMb2FkLmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpO1xuICAgICAgICBmaWxlSW5mby50ZXh0Q29udGVudCA9IHR5cGUgKyBzaXplICsgc2l6ZURpbTtcbiAgICAgICAgdmFyIG5ld0l0ZW0gPSBuZXdGaWxlSW5wdXRJdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgZmlsZXNXcmFwcGVyLnByZXBlbmQobmV3SXRlbSk7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXJzKG5ld0l0ZW0pO1xuICAgICAgICBtYWtlSW5wdXRzTmFtZXMoKTtcbiAgICAgICAgY2hlY2tGb3JtKCk7XG4gICAgICB9O1xuXG4gICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChpbnB1dC5maWxlc1swXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRHJvcChlKSB7XG4gICAgdmFyIGZpbGVJbnB1dCA9IGUuY3VycmVudFRhcmdldC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIHZhciBkdCA9IGUuZGF0YVRyYW5zZmVyO1xuICAgIHZhciBmaWxlcyA9IGR0LmZpbGVzO1xuICAgIGNvbnNvbGUubG9nKGZpbGVzKTtcblxuICAgIGlmIChmaWxlSW5wdXQuZmlsZXMgJiYgZmlsZUlucHV0LmZpbGVzWzBdKSB7XG4gICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcblxuICAgICAgaWYgKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmlsZXNbMF0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcgfHwgZmlsZXNbMF0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0Jykge1xuICAgICAgZmlsZUlucHV0LmZpbGVzID0gZmlsZXM7XG4gICAgICByZWFkVXJsKGZpbGVJbnB1dCk7XG4gICAgfVxuICB9XG5cbiAgO1xuXG4gIHZhciBvbkZpbGVDaGFuZ2UgPSBmdW5jdGlvbiBvbkZpbGVDaGFuZ2UoZSkge1xuICAgIHJlYWRVcmwoZS50YXJnZXQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG9uQ2xlYXIoZSkge1xuICAgIHZhciBmaWxlSW5wdXRJdGVtID0gZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB2YXIgZmlsZUlucHV0ID0gZmlsZUlucHV0SXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgaWYgKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgIH1cblxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKGZpbGVJbnB1dEl0ZW0pO1xuICAgIGZpbGVJbnB1dEl0ZW0ucmVtb3ZlKCk7XG4gICAgY2hlY2tGb3JtKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyhpdGVtKSB7XG4gICAgdmFyIGRyb3BBcmVhID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9fbGFiZWwnKTtcbiAgICB2YXIgZmlsZUlucHV0ID0gaXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIHZhciBmaWxlQ2xlYXIgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cbiAgICBmdW5jdGlvbiBoaWdobGlnaHQoZSkge1xuICAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgO1xuXG4gICAgZnVuY3Rpb24gdW5oaWdobGlnaHQoZSkge1xuICAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgO1xuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIGRyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoaWdobGlnaHQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdW5oaWdobGlnaHQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmlsZUNoYW5nZSk7XG4gICAgZmlsZUNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGVhcik7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhpdGVtKSB7XG4gICAgdmFyIGRyb3BBcmVhID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9fbGFiZWwnKTtcbiAgICB2YXIgZmlsZUlucHV0ID0gaXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIHZhciBmaWxlQ2xlYXIgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cbiAgICBmdW5jdGlvbiBoaWdobGlnaHQoZSkge1xuICAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgO1xuXG4gICAgZnVuY3Rpb24gdW5oaWdobGlnaHQoZSkge1xuICAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgO1xuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBkcm9wQXJlYS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIGRyb3BBcmVhLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoaWdobGlnaHQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBkcm9wQXJlYS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdW5oaWdobGlnaHQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBkcm9wQXJlYS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgZmlsZUlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmlsZUNoYW5nZSk7XG4gICAgZmlsZUNsZWFyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGVhcik7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycyhmaWxlSW5wdXRJdGVtKTtcbiAgY2FuY2VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNsZWFySW5wdXRzKCk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNjYW5VcGxvYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VuZC1zY2FuX191cGxvYWQtZmlsZScpO1xuXG4gIGlmICghc2NhblVwbG9hZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBmaWxlSW5wdXRJdGVtID0gc2NhblVwbG9hZC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZScpO1xuICB2YXIgc3VibWl0ID0gc2NhblVwbG9hZC5xdWVyeVNlbGVjdG9yKCcuc2VuZC1zY2FuX19zdWJtaXQnKTtcblxuICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdHMoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgOyAvLyBmdW5jdGlvbiBtYWtlSW5wdXRzTmFtZXMoKSB7XG4gIC8vICAgZmlsZXNXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZHgpIHtcbiAgLy8gICAgIGl0ZW0ubmFtZSA9ICdmaWxlLScgKyBpZHg7XG4gIC8vICAgfSk7XG4gIC8vIH1cbiAgLy8gZnVuY3Rpb24gY2xlYXJJbnB1dHMoKSB7XG4gIC8vICAgZmlsZXNXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dC1maWxlLXJlcXVlc3RzJykuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZHgpIHtcbiAgLy8gICAgIGlmIChpZHggIT09IDApIHtcbiAgLy8gICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoaXRlbSk7XG4gIC8vICAgICAgIGl0ZW0ucmVtb3ZlKCk7XG4gIC8vICAgICB9XG4gIC8vICAgfSlcbiAgLy8gICAhc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSAmJiBzdWJtaXQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgLy8gfVxuICAvLyBmdW5jdGlvbiBjaGVja0Zvcm0oKSB7XG4gIC8vICAgY29uc3QgZmlsZXMgPSBmaWxlc1dyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLmZpbGUtbG9hZC5sb2FkZWQnKTtcbiAgLy8gICBmaWxlcy5sZW5ndGggPiAwXG4gIC8vICAgICAmJiBzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gIC8vICAgICAmJiBzdWJtaXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gIC8vICAgZmlsZXMubGVuZ3RoID09PSAwXG4gIC8vICAgICAmJiAhc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKVxuICAvLyAgICAgJiYgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJylcbiAgLy8gfVxuXG4gIGZ1bmN0aW9uIHJlYWRVcmwoaW5wdXQpIHtcbiAgICAvL2NvbnN0IGZpZWxJbnB1dEl0ZW0gPSBpbnB1dC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgdmFyIGZpbGVEcm9wQXJlYSA9IGlucHV0LnBhcmVudE5vZGU7XG4gICAgdmFyIGJhciA9IGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX3Byb2dyZXNzLWN1cnJlbnQnKTtcbiAgICB2YXIgc3RhdHVzID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fc3RhdHVzIHNwYW4nKTtcbiAgICB2YXIgZmlsZUxvYWQgPSBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkJyk7XG4gICAgdmFyIGZpbGVJbmZvID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fc2l6ZScpO1xuXG4gICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7XG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgcmVhZGVyLm9ubG9hZHN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKTtcbiAgICAgIH07XG5cbiAgICAgIHJlYWRlci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgYmFyLnN0eWxlLndpZHRoID0gTWF0aC5yb3VuZChlLmxvYWRlZCAvIGUudG90YWwgKiAxMDApICsgJyUnO1xuICAgICAgICBzdGF0dXMudGV4dENvbnRlbnQgPSBNYXRoLnJvdW5kKGUubG9hZGVkIC8gZS50b3RhbCAqIDEwMCk7XG4gICAgICB9O1xuXG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgYmFyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBmaWxlRHJvcEFyZWEubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX25hbWUnKS50ZXh0Q29udGVudCA9IGlucHV0LmZpbGVzWzBdLm5hbWU7XG4gICAgICAgIHZhciBzaXplID0gaW5wdXQuZmlsZXNbMF0uc2l6ZTtcbiAgICAgICAgdmFyIHNpemVEaW0gPSAnINCx0LDQudGCJztcblxuICAgICAgICBpZiAoc2l6ZSA+PSAxMDI0ICYmIHNpemUgPCAxMDQ4NTc2KSB7XG4gICAgICAgICAgc2l6ZSA9IE1hdGgucm91bmQoc2l6ZSAvIDEwMjQpO1xuICAgICAgICAgIHNpemVEaW0gPSAnINCa0LHQsNC50YInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpemUgPSBNYXRoLnJvdW5kKHNpemUgLyAxMDI0IC8gMTAyNCk7XG4gICAgICAgICAgc2l6ZURpbSA9ICcg0JzQsdCw0LnRgic7XG4gICAgICAgIH1cblxuICAgICAgICBmaWxlTG9hZC5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKTtcbiAgICAgICAgZmlsZUluZm8udGV4dENvbnRlbnQgPSBzaXplICsgc2l6ZURpbTtcbiAgICAgICAgc3VibWl0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTsgLy8gY29uc3QgbmV3SXRlbSA9IG5ld0ZpbGVJbnB1dEl0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAvLyBmaWxlc1dyYXBwZXIucHJlcGVuZChuZXdJdGVtKTtcbiAgICAgICAgLy8gYWRkRXZlbnRMaXN0ZW5lcnMobmV3SXRlbSk7XG4gICAgICAgIC8vIG1ha2VJbnB1dHNOYW1lcygpO1xuICAgICAgICAvLyBjaGVja0Zvcm0oKTtcbiAgICAgIH07XG5cbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGlucHV0LmZpbGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICB2YXIgZmlsZUlucHV0ID0gZS5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgdmFyIGR0ID0gZS5kYXRhVHJhbnNmZXI7XG4gICAgdmFyIGZpbGVzID0gZHQuZmlsZXM7XG4gICAgY29uc29sZS5sb2coZmlsZXMpO1xuXG4gICAgaWYgKGZpbGVJbnB1dC5maWxlcyAmJiBmaWxlSW5wdXQuZmlsZXNbMF0pIHtcbiAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgICBpZiAoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpbGVJbnB1dC5maWxlcyA9IGZpbGVzO1xuICAgIHJlYWRVcmwoZmlsZUlucHV0KTtcbiAgfVxuXG4gIDtcblxuICB2YXIgb25GaWxlQ2hhbmdlID0gZnVuY3Rpb24gb25GaWxlQ2hhbmdlKGUpIHtcbiAgICByZWFkVXJsKGUudGFyZ2V0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBvbkNsZWFyKGUpIHtcbiAgICB2YXIgZmlsZUlucHV0SXRlbSA9IGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgdmFyIGZpbGVJbnB1dCA9IGZpbGVJbnB1dEl0ZW0ucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICB2YXIgZmlsZUxvYWQgPSBmaWxlSW5wdXRJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWQnKTtcbiAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcblxuICAgIGlmICghL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgICB9IC8vcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoZmlsZUlucHV0SXRlbSk7XG5cblxuICAgIGZpbGVJbnB1dEl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkJyk7XG4gICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgZmlsZUxvYWQuY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkJyk7IC8vY2hlY2tGb3JtKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyhpdGVtKSB7XG4gICAgdmFyIGRyb3BBcmVhID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9fbGFiZWwnKTtcbiAgICB2YXIgZmlsZUlucHV0ID0gaXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIHZhciBmaWxlQ2xlYXIgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cbiAgICBmdW5jdGlvbiBoaWdobGlnaHQoZSkge1xuICAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgO1xuXG4gICAgZnVuY3Rpb24gdW5oaWdobGlnaHQoZSkge1xuICAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgO1xuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIGRyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoaWdobGlnaHQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdW5oaWdobGlnaHQsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmlsZUNoYW5nZSk7XG4gICAgZmlsZUNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGVhcik7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycyhmaWxlSW5wdXRJdGVtKTsgLy8gY2FuY2VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gIC8vICAgY2xlYXJJbnB1dHMoKTtcbiAgLy8gfSlcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBmaWxlRHJvcEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtZmlsZV9fbGFiZWwnKTtcbiAgdmFyIHJlcXVlc3RNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbC5yZXF1ZXN0cy11cGxvYWQnKTtcblxuICBpZiAocmVxdWVzdE1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ2lucHV0IGZpbGUnKTtcblxuICBmdW5jdGlvbiBtYWtlRmlsZUxvYWQoZmlsZURyb3BBcmVhKSB7XG4gICAgdmFyIGZpbGVJbnB1dCA9IGZpbGVEcm9wQXJlYS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIHZhciBmaWxlQ2xlYXIgPSBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19jbGVhcicpOyAvLyDQodCx0YDQsNGB0YvQstCw0LXQvCDRgdGC0LDQvdC00LDRgNGC0L3Ri9C1INGB0L7QsdGL0YLQuNGPINC/0YDQuCDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNC4INGE0LDQudC70LBcblxuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHByZXZlbnREZWZhdWx0cywgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHRzKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgOyAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YHRgtC40LvQuCDQv9GA0Lgg0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQuCDRhNCw0LnQu9CwINC90LDQtCDQvdGD0LbQvdC+0Lkg0L7QsdC70LDRgdGC0YzRjlxuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGlnaGxpZ2h0LCBmYWxzZSk7XG4gICAgfSk7XG4gICAgWydkcmFnbGVhdmUnLCAnZHJvcCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB1bmhpZ2hsaWdodCwgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gaGlnaGxpZ2h0KGUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcbiAgICB9XG5cbiAgICA7XG5cbiAgICBmdW5jdGlvbiB1bmhpZ2hsaWdodChlKSB7XG4gICAgICBmaWxlRHJvcEFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgOyAvL1xuXG4gICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wLCBmYWxzZSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICAgIHZhciBkdCA9IGUuZGF0YVRyYW5zZmVyO1xuICAgICAgdmFyIGZpbGVzID0gZHQuZmlsZXM7XG5cbiAgICAgIGlmIChmaWxlSW5wdXQuZmlsZXMgJiYgZmlsZUlucHV0LmZpbGVzWzBdKSB7XG4gICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgICAgIGlmICghL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZpbGVJbnB1dC5maWxlcyA9IGZpbGVzO1xuICAgICAgb25GaWxlQ2hhbmdlKCk7XG4gICAgICB3aW5kb3cub25WZXJpZmljYXRpb25GaWxlRHJvcCAmJiB3aW5kb3cub25WZXJpZmljYXRpb25GaWxlRHJvcCgpO1xuICAgICAgd2luZG93Lm9uRGVsaXZlcnlGaWxlRHJvcCAmJiB3aW5kb3cub25EZWxpdmVyeUZpbGVEcm9wKCk7XG4gICAgICB3aW5kb3cub25JbnN0YWxsYXRpb25GaWxlRHJvcCAmJiB3aW5kb3cub25JbnN0YWxsYXRpb25GaWxlRHJvcCgpO1xuICAgIH1cblxuICAgIDtcblxuICAgIHZhciBvbkZpbGVDaGFuZ2UgPSBmdW5jdGlvbiBvbkZpbGVDaGFuZ2UoKSB7XG4gICAgICByZWFkVXJsKGZpbGVJbnB1dCk7XG4gICAgfTtcblxuICAgIHZhciByZWFkVXJsID0gZnVuY3Rpb24gcmVhZFVybChpbnB1dCkge1xuICAgICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpO1xuICAgICAgICAgIGZpbGVEcm9wQXJlYS5uZXh0RWxlbWVudFNpYmxpbmcucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fbmFtZScpLnRleHRDb250ZW50ID0gaW5wdXQuZmlsZXNbMF0ubmFtZTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChpbnB1dC5maWxlc1swXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xlYXIoKSB7XG4gICAgICBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkZWQnKTtcbiAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgICBpZiAoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpbGVDaGFuZ2UpO1xuICAgIGZpbGVDbGVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xlYXIpO1xuICB9XG5cbiAgd2luZG93Lm1ha2VGaWxlTG9hZCA9IG1ha2VGaWxlTG9hZDtcblxuICBpZiAoIWZpbGVEcm9wQXJlYVswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpbGVEcm9wQXJlYS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbWFrZUZpbGVMb2FkKGl0ZW0pO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtdGV4dCcpO1xuXG4gIGlmICghaW5wdXRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpbnB1dC52YWx1ZS5zcGxpdCgnICcpLmpvaW4oJycpID09PSAnJykge1xuICAgICAgICBpbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5wdXQudmFsdWUgIT09ICcnICYmICFpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKSkge1xuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnB1dC52YWx1ZSA9PT0gJycgJiYgaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJykpIHtcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciB2aCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIDAuMDE7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIFwiXCIuY29uY2F0KHZoLCBcInB4XCIpKTtcbiAgdmFyICRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuXG4gIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMpIHtcbiAgICB2YXIgdGltZXI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHRpbWVyKSBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmMsIDEwMCwgZXZlbnQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICB2YXIgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIFwiXCIuY29uY2F0KHZoLCBcInB4XCIpKTtcbiAgfVxuXG4gIDtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlKG9uUmVzaXplKSk7XG5cbiAgZnVuY3Rpb24gTW9kYWwodHJpZ2dlciwgbW9kYWwpIHtcbiAgICB0aGlzLnRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgIHRoaXMubW9kYWwgPSBtb2RhbDtcbiAgICB0aGlzLm92ZXJsYXkgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICAgIHRoaXMuY2xvc2VCdG4gPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcbiAgICB0aGlzLm9uT3ZlcmxheUNsaWNrID0gdGhpcy5vbk92ZXJsYXlDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DbG9zZUNsaWNrID0gdGhpcy5vbkNsb3NlQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVHJpZ2dlckNsaWNrID0gdGhpcy5vblRyaWdnZXJDbGljay5iaW5kKHRoaXMpOyAvL3RoaXMub25SZXNpemUgPSB0aGlzLm9uUmVzaXplLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoJ2pzLXNob3cnKTtcbiAgICAkYm9keS5jbGFzc0xpc3QuYWRkKCdqc19fYm9keS1uby1zY3JvbGwnKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5tb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdqcy1zaG93Jyk7XG4gICAgJGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnanNfX2JvZHktbm8tc2Nyb2xsJyk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMub3ZlcmxheSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUub25DbG9zZUNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUub25UcmlnZ2VyQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vcGVuKCk7XG4gIH07IC8vIE1vZGFsLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyAgICAgbGV0IHZoID0gd2luZG93LmlubmVySGVpZ2h0ICogMC4wMTtcbiAgLy8gICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIGAke3ZofXB4YCk7XG4gIC8vIH07XG5cblxuICBNb2RhbC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbk92ZXJsYXlDbGljayk7XG4gICAgdGhpcy5jbG9zZUJ0biAmJiB0aGlzLmNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsb3NlQ2xpY2spO1xuICAgIHRoaXMudHJpZ2dlciAmJiB0aGlzLnRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVHJpZ2dlckNsaWNrKTtcbiAgfTtcblxuICB3aW5kb3cuTW9kYWwgPSBNb2RhbDtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQoJy5pbnB1dC1tb25leScpLm1hc2soJyMgIyMwIOKCvScsIHtcbiAgICByZXZlcnNlOiB0cnVlXG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dC1waG9uZScpO1xuXG4gIGlmICghaW5wdXRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGltID0gbmV3IElucHV0bWFzayhcIis3KDk5OSkgOTk5LTk5LTk5XCIpO1xuICBpbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGltLm1hc2soaXRlbSk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlYXJjaCcpO1xuICB2YXIgY2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VhcmNoICsgLnNlYXJjaC1jbG9zZScpO1xuXG4gIGlmICghaXRlbXNbMF0pIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAvLyAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PntcbiAgLy8gICAgIGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2pzLWZvY3VzJyk7XG4gIC8vICAgfSk7XG4gIC8vIH0pO1xuXG5cbiAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpdGVtLnZhbHVlLnNwbGl0KCcgJykuam9pbignJykgPT09ICcnKSB7XG4gICAgICAgIGl0ZW0udmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW0udmFsdWUgIT09ICcnICYmICFpdGVtLmNsYXNzTGlzdC5jb250YWlucygnanMtaW5wdXRlZCcpKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbS52YWx1ZSA9PT0gJycgJiYgaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKSkge1xuICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIGNsb3NlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlYXJjaCA9IGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgIHNlYXJjaC52YWx1ZSA9ICcnO1xuXG4gICAgICBpZiAoc2VhcmNoLmNsYXNzTGlzdC5jb250YWlucygnanMtaW5wdXRlZCcpKSB7XG4gICAgICAgIHNlYXJjaC5jbGFzc0xpc3QucmVtb3ZlKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZm9ybWF0T3B0aW9uKGl0ZW0pIHtcbiAgICB2YXIgdmFsdWUgPSBpdGVtLnRleHQuc3BsaXQoJ3NwbGl0dGVyJyk7XG4gICAgdmFyIGJyID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDk5OXB4KScpLm1hdGNoZXMgPyAnPGJyPicgOiAnJztcblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJCgnPHNwYW4+JyArIHZhbHVlWzBdICsgJzwvc3Bhbj4nICsgYnIgKyAnPHNwYW4+JyArIHZhbHVlWzFdICsgJzwvc3Bhbj4nKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpdGVtLnRleHQ7XG4gICAgfVxuICB9XG5cbiAgJCgnLnNlbGVjdCcpLnNlbGVjdDIoe1xuICAgIHRlbXBsYXRlUmVzdWx0OiBmb3JtYXRPcHRpb24sXG4gICAgdGVtcGxhdGVTZWxlY3Rpb246IGZvcm1hdE9wdGlvblxuICB9KTtcbiAgJCgnLnNlbGVjdCcpLm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgJCh0aGlzKS5hZGRDbGFzcygncGlja2VkJyk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzd2lwZXIgPSBuZXcgU3dpcGVyKCcuc3Vic2NyaXB0aW9uLXRhYnMnLCB7XG4gICAgICBmcmVlTW9kZTogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcbiAgICAgIHdhdGNoT3ZlcmZsb3c6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgZGVsaXZlcnlUaW1lSW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtdGltZScpO1xuXG4gIGlmICghZGVsaXZlcnlUaW1lSW5wdXRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGltID0gbmV3IElucHV0bWFzayhcIjk5Ojk5XCIpO1xuICBkZWxpdmVyeVRpbWVJbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGltLm1hc2soaXRlbSk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbmNlbGxhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hY2NvdW50LWNyZWF0aW9uX19uZXcnKTtcblxuICBpZiAoIWNhbmNlbGxhdGlvbkJ0blswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY2NvdW50LWNyZWF0aW9uJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNhbmNlbGxhdGlvbkJ0bi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAvLyBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG4gIC8vIGlmICghdmVyaWZpY2F0aW9uQnRuWzBdKSB7XG4gIC8vICAgcmV0dXJuO1xuICAvLyB9XG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY2NvdW50LWNyZWF0aW9uJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciAkaW5wdXQgPSAkKCcuYWNjb3VudC1jcmVhdGlvbl9faW5wdXQgLmlucHV0LXRleHQnKTtcbiAgdmFyICRidG4gPSAkKCcjYWNjb3VudC1jcmVhdGlvbiAubW9kYWxfX3NhdmUnKTtcblxuICB2YXIgb25JbnB1dCA9IGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgIHZhciAkZW1wdHlJbnB1dCA9ICRpbnB1dC5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc3BsaXQoJyAnKS5qb2luKCcnKSA9PT0gJycgfHwgdGhpcy52YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgfSk7XG5cbiAgICBpZiAoJGVtcHR5SW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgICAkYnRuLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRidG4uYXR0cignZGlzYWJsZWQnLCAnJyk7XG4gICAgfSAvLyBpZiAoXG4gICAgLy8gICB2YWx1ZS5zcGxpdCgnICcpLmpvaW4oJycpID09PSAnJ1xuICAgIC8vICAgfHwgdmFsdWUubGVuZ3RoID09PSAwXG4gICAgLy8gKSB7XG4gICAgLy8gICBpZiAoIWJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAvLyAgICAgYnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuXG4gIH07IC8vIHZlcmlmaWNhdGlvbkJ0bi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICAvLyB9KVxuXG5cbiAgJGlucHV0Lm9uKCdpbnB1dCcsIG9uSW5wdXQpO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyICR0Ym9keSA9ICQoJy5hZ2VudC1yZXBvcnRfX2VxdWlwbWVudCAgdGFibGUgIHRib2R5Jyk7XG4gIHZhciAkbGluZSA9ICR0Ym9keS5jaGlsZHJlbigpLmVxKDEpO1xuICBjb25zb2xlLmxvZygkbGluZS5jbG9uZSgpWzBdKTtcbiAgJCgnLmFnZW50LXJlcG9ydF9fYWRkLWxpbmUnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgJHRib2R5LmFwcGVuZCgkbGluZS5jbG9uZSgpKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgY29udHJhY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFnZW50c19fdXNlcnMtYmxvY2stbW9iaWxlJyk7XG5cbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2xpZGVyID0gbmV3IFN3aXBlcignLmFnZW50c19fdXNlcnMtYmxvY2stbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5hZ2VudHNfX3VzZXJzLWJsb2NrLW1vYmlsZV9fcGFnaW5hdGlvbicsXG4gICAgICBkeW5hbWljQnVsbGV0czogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gICQoJy5hZ2VudHNfX3VzZXJzLWJ0bicpLnBhcmVudCgpLm5leHQoKS5zbGlkZVRvZ2dsZSgpO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgJCgnLmFnZW50c19fdXNlcnMtYnRuJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykucGFyZW50KCkubmV4dCgpLnNsaWRlVG9nZ2xlKCk7XG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcygnb3BlbmVkJyk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbmNlbGxhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1pbmZvX19jYW5jZWxsYXRpb24nKTtcblxuICBpZiAoIWNhbmNlbGxhdGlvbkJ0blswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW5jZWxsYXRpb25fX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNhbmNlbGxhdGlvbkJ0bi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgY2hhbmdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVzZXItc2V0dGluZ3NfX2NoYW5nZS1lbWFpbCcpO1xuXG4gIGlmICghY2hhbmdlQnV0dG9uWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYW5nZS1lbWFpbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjaGFuZ2VCdXR0b24uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgLy8gY29uc3QgdmVyaWZpY2F0aW9uQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWluZm9fX3ZlcmlmaWNhdGlvbicpO1xuICAvLyBpZiAoIXZlcmlmaWNhdGlvbkJ0blswXSkge1xuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmdlLWVtYWlsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jaGFuZ2UtZW1haWxfX2lucHV0IC5pbnB1dC10ZXh0Jyk7XG4gIHZhciBidG4gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3NhdmUnKTtcblxuICB2YXIgb25JbnB1dCA9IGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgIGlmIChlLnRhcmdldC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgYnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoIWUudGFyZ2V0LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICBpZiAoIWJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgYnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9OyAvLyB2ZXJpZmljYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgLy8gfSlcblxuXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25JbnB1dCk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgY2hhbmdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVzZXItc2V0dGluZ3NfX2NoYW5nZS1waG9uZScpO1xuXG4gIGlmICghY2hhbmdlQnV0dG9uWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYW5nZS1waG9uZScpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjaGFuZ2VCdXR0b24uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgLy8gY29uc3QgdmVyaWZpY2F0aW9uQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWluZm9fX3ZlcmlmaWNhdGlvbicpO1xuICAvLyBpZiAoIXZlcmlmaWNhdGlvbkJ0blswXSkge1xuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmdlLXBob25lJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jaGFuZ2UtcGhvbmVfX2lucHV0IC5pbnB1dC10ZXh0Jyk7XG4gIHZhciBidG4gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3NhdmUnKTtcblxuICB2YXIgb25JbnB1dCA9IGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgIGlmIChlLnRhcmdldC52YWx1ZS5pbmRleE9mKCdfJykgPT09IC0xKSB7XG4gICAgICBidG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIGlmIChlLnRhcmdldC52YWx1ZS5pbmRleE9mKCdfJykgIT09IC0xKSB7XG4gICAgICBpZiAoIWJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgYnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9OyAvLyB2ZXJpZmljYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgLy8gfSlcblxuXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25JbnB1dCk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgcmFkaW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWNyZWF0aW9uX19jbGllbnQtdHlwZSAgaW5wdXQnKTtcblxuICBpZiAoIXJhZGlvc1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0LWNyZWF0aW9uX19kZXRhaWxzJyk7XG5cbiAgZnVuY3Rpb24gb25SYWRpb0NoYW5nZSgpIHtcbiAgICBpZiAocmFkaW9zWzBdLmNoZWNrZWQpIHtcbiAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItZW50aXR5Jyk7XG4gICAgfVxuXG4gICAgaWYgKHJhZGlvc1sxXS5jaGVja2VkKSB7XG4gICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9yLWVudGl0eScpO1xuICAgIH1cbiAgfVxuXG4gIHJhZGlvcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvblJhZGlvQ2hhbmdlKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgY29udHJhY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsaWVudHMtbW9iaWxlLWJsb2NrJyk7XG5cbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2xpZGVyID0gbmV3IFN3aXBlcignLmNsaWVudHMtbW9iaWxlLWJsb2NrX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5jbGllbnRzLW1vYmlsZS1ibG9ja19fcGFnaW5hdGlvbicsXG4gICAgICBkeW5hbWljQnVsbGV0czogdHJ1ZVxuICAgIH1cbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgdHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10cmlnZ2VyXScpO1xuICB0cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIG5hbWUgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS10cmlnZ2VyJyk7XG4gICAgdmFyIG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbW9kYWw9JyArIG5hbWUgKyAnXScpO1xuXG4gICAgaWYgKG1vZGFsKSB7XG4gICAgICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAvLyBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG4gIC8vIGlmICghdmVyaWZpY2F0aW9uQnRuWzBdKSB7XG4gIC8vICAgcmV0dXJuO1xuICAvLyB9XG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25maXJtYXRpb24tY29kZScpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuY29uZmlybWF0aW9uLWNvZGVfX2lucHV0IC5pbnB1dC10ZXh0Jyk7XG4gIHZhciBidG4gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3NhdmUnKTtcblxuICB2YXIgb25JbnB1dCA9IGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgIGlmIChlLnRhcmdldC52YWx1ZS5sZW5ndGggPT09IDYpIHtcbiAgICAgIGJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKGUudGFyZ2V0LnZhbHVlLmxlbmd0aCA8IDYpIHtcbiAgICAgIGlmICghYnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICBidG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07IC8vIHZlcmlmaWNhdGlvbkJ0bi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICAvLyB9KVxuXG5cbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbklucHV0KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQoJy5kZWxpdmVyeS1vci1waWNrdXAuZG9uZScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMpLmZpbmQoJy5jb250cmFjdC1pbmZvX19kZWxpdmVyZWQtYWRyZXNzJykuc2xpZGVUb2dnbGUoKTtcbiAgICAkKHRoaXMpLmZpbmQoJy5jb250cmFjdC1pbmZvX19kZWxpdmVyZWQtdG9nZ2xlJykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBjb250cmFjdFNlcnZpY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0LXNlcnZpY2VzJyk7XG5cbiAgaWYgKCFjb250cmFjdFNlcnZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LXNlcnZpY2VzX19saW5rJyk7XG5cbiAgdmFyIG9uTGlua0NsaWNrID0gZnVuY3Rpb24gb25MaW5rQ2xpY2soZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2JveC1idG5fX2xhYmVsJykgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tib3gtYnRuX19jaGVja2JveCcpIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbGl2ZXItb3ItcGlja3VwX19jb25maXJtLWJ0bicpIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbnRyYWN0LXNlcnZpY2VzX19kZWxpdmVyeS1jb25maXJtJykpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgbGlua3MuZm9yRWFjaChmdW5jdGlvbiAobGluaykge1xuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkxpbmtDbGljayk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRyYWN0c0xpbmtBbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3RzX19saW5rJyk7XG5cbiAgaWYgKCFjb250cmFjdHNMaW5rQWxsWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG9uTGlua0NsaWNrID0gZnVuY3Rpb24gb25MaW5rQ2xpY2soZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2JveC1idG5fX2xhYmVsJykgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tib3gtYnRuX19jaGVja2JveCcpIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbnRyYWN0LWluZm9fX3ZlcmlmaWNhdGlvbicpIHx8IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BheW1lbnQtd2FpdGluZ19fY29uZmlybS1idG4nKSB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb250cmFjdC1zZXJ2aWNlc19fZGVsaXZlcnktY29uZmlybScpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnRyYWN0c0xpbmtBbGwuZm9yRWFjaChmdW5jdGlvbiAobGluaykge1xuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkxpbmtDbGljayk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRyYWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cmFjdC1zZXJ2aWNlcy1tb2JpbGUnKTtcblxuICBpZiAoIWNvbnRyYWN0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzbGlkZXIgPSBuZXcgU3dpcGVyKCcuY29udHJhY3Qtc2VydmljZXMtbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5jb250cmFjdC1zZXJ2aWNlcy1tb2JpbGVfX3BhZ2luYXRpb24nLFxuICAgICAgZHluYW1pY0J1bGxldHM6IHRydWVcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRyYWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cmFjdHMtbW9iaWxlJyk7XG5cbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2xpZGVyID0gbmV3IFN3aXBlcignLmNvbnRyYWN0cy1tb2JpbGVfX3NsaWRlcicsIHtcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiAnLmNvbnRyYWN0cy1tb2JpbGVfX3BhZ2luYXRpb24nLFxuICAgICAgZHluYW1pY0J1bGxldHM6IHRydWVcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbmNlbGxhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdWJzY3JpcHRpb24tcGFnZV9fYWN0aW9uLWl0ZW0tLWRlbGV0ZScpO1xuXG4gIGlmICghY2FuY2VsbGF0aW9uQnRuWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlbGV0ZS1zZXJ2aWNlX19tb2RhbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjYW5jZWxsYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlbGl2ZXJ5QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWxpdmVyLW9yLXBpY2t1cF9fY29uZmlybS1idG4nKTtcblxuICBpZiAoIWRlbGl2ZXJ5QnRuc1swXSkge1xuICAgIHJldHVybjtcbiAgfSAvLyAkKCcjZGVsaXZlcnktZGF0ZScpLmRhdGVwaWNrZXIoKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZGF0ZVRleHQpIHtcbiAgLy8gICBvbkZpZWxkQ2hhbmdlKCk7XG4gIC8vIH0pO1xuXG5cbiAgdmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGNvbnN0IGNsb3NlID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuICAvLyBjb25zdCBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gIC8vIGNvbnN0IHN1Ym1pdCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc3VibWl0Jyk7XG4gIC8vIGNvbnN0IGZpbGVJbnB1dEJsb2NrID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtaW5wdXQtZmlsZScpO1xuICAvLyBjb25zdCBmaWxlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgLy8gY29uc3QgZGF0ZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtZGF0ZScpO1xuICAvLyBjb25zdCB0aW1lSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC10aW1lJyk7XG4gIC8vIGNvbnN0IGNvbmZpcm1DaGVja2JveCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jaGVja2JveF9faW5wdXQnKTtcblxuXG4gIGRlbGl2ZXJ5QnRucy5mb3JFYWNoKGZ1bmN0aW9uIChidG4pIHtcbiAgICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4gIH0pOyAvLyBjb25zdCBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gICBpZiAoZmlsZUlucHV0QmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2FkZWQnKSkge1xuICAvLyAgICAgZmlsZUlucHV0QmxvY2suY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkJyk7XG4gIC8vICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAvLyAgICAgaWYoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtcbiAgLy8gICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgLy8gICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIGRhdGVJbnB1dC52YWx1ZSA9ICcnO1xuICAvLyAgIHRpbWVJbnB1dC52YWx1ZSA9ICcnO1xuICAvLyAgIGNvbmZpcm1DaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gIC8vICAgJCgnI2RlbGl2ZXJ5LWRhdGUnKS5kYXRlcGlja2VyKCdzZXREYXRlJywgJycpO1xuICAvLyB9XG4gIC8vIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgLy8gICAgIG9uQ2xvc2VDbGljaygpO1xuICAvLyAgIH1cbiAgLy8gfVxuICAvLyBjb25zdCBvbkZpZWxkQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChpc0Zvcm1GaWxsZWQoKSAmJiBzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gIC8vICAgICBzdWJtaXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAvLyAgIH0gZWxzZSBpZiAoIWlzRm9ybUZpbGxlZCgpICYmICFzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gIC8vICAgICBzdWJtaXQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgLy8gICB9XG4gIC8vIH1cbiAgLy8gY29uc3QgaXNGb3JtRmlsbGVkID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgcmV0dXJuICQoJyNkZWxpdmVyeS1kYXRlJykuZGF0ZXBpY2tlcignZ2V0RGF0ZScpXG4gIC8vICAgICAmJiB0aW1lSW5wdXQudmFsdWUgIT09ICcnXG4gIC8vICAgICAmJiBjb25maXJtQ2hlY2tib3guY2hlY2tlZCA9PT0gdHJ1ZVxuICAvLyAgICAgJiYgZmlsZUlucHV0LnZhbHVlICE9PSAnJ1xuICAvLyB9XG4gIC8vIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgLy8gb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbiAgLy8gZGF0ZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25GaWVsZENoYW5nZSk7XG4gIC8vIHRpbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uRmllbGRDaGFuZ2UpO1xuICAvLyBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWVsZENoYW5nZSk7XG4gIC8vIGNvbmZpcm1DaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpZWxkQ2hhbmdlKTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXZpY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWNyZWF0aW9uX19kZWxpdmVyeS1kZXZpY2UnKTtcblxuICBpZiAoIWRldmljZXNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBkZXZpY2VzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgcmFkaW9zID0gaXRlbS5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtY3JlYXRpb25fX2RlbGl2ZXJ5LXR5cGUtd3JhcHBlciAgaW5wdXQnKTtcblxuICAgIGZ1bmN0aW9uIG9uUmFkaW9DaGFuZ2UoZSkge1xuICAgICAgdmFyIHdyYXBwZXIgPSBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcblxuICAgICAgaWYgKHJhZGlvc1swXS5jaGVja2VkKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItcGlja3VwJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyYWRpb3NbMV0uY2hlY2tlZCkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9yLXBpY2t1cCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJhZGlvcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uUmFkaW9DaGFuZ2UpO1xuICAgIH0pO1xuICB9KTtcbn0pKCk7IC8vIChmdW5jdGlvbigpIHtcbi8vICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbCcpO1xuLy8gICBpZiAoIW1vZGFsKSB7XG4vLyAgICAgcmV0dXJuO1xuLy8gICB9XG4vLyAgIGNvbnN0ICRkYXRlID0gJCgnI2RlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwgLmRhdGUtaW5wdXQnKTtcbi8vICAgJGRhdGUuZGF0ZXBpY2tlcigpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbihkYXRlVGV4dCkge1xuLy8gICAgIGlmICgkKCcjZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbCcpLmhhc0NsYXNzKCdqcy1zaG93JykpIHtcbi8vICAgICAgIG9uRmllbGRDaGFuZ2UoKTtcbi8vICAgICB9XG4vLyAgIH0pO1xuLy8gICBjb25zdCBjbG9zZSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcbi8vICAgY29uc3Qgb3ZlcmxheSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuLy8gICBjb25zdCBzdWJtaXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3N1Ym1pdCcpO1xuLy8gICBjb25zdCBmaWxlSW5wdXRCbG9jayA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kZWxpdmVyeS1vci1waWNrdXBfX21vZGFsLWlucHV0LWZpbGUnKTtcbi8vICAgY29uc3QgZmlsZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmlucHV0LWZpbGVfX2lucHV0Jyk7XG4vLyAgIGNvbnN0IGZpbGVDbGVhciA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG4vLyAgIGNvbnN0IGRhdGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kZWxpdmVyeS1vci1waWNrdXBfX21vZGFsLWRhdGUnKTtcbi8vICAgY29uc3QgdGltZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtdGltZScpO1xuLy8gICBjb25zdCBjb25maXJtQ2hlY2tib3ggPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuY2hlY2tib3hfX2lucHV0Jyk7XG4vLyAgIGNvbnN0IG9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uKCkge1xuLy8gICAgIGlmIChmaWxlSW5wdXRCbG9jayAmJiBmaWxlSW5wdXRCbG9jay5jbGFzc0xpc3QuY29udGFpbnMoJ2xvYWRlZCcpKSB7XG4vLyAgICAgICBmaWxlSW5wdXRCbG9jay5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkZWQnKTtcbi8vICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuLy8gICAgICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4vLyAgICAgICBpZighL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe1xuLy8gICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuLy8gICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbi8vICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgZGF0ZUlucHV0LnZhbHVlID0gJyc7XG4vLyAgICAgdGltZUlucHV0LnZhbHVlID0gJyc7XG4vLyAgICAgaWYgKGNvbmZpcm1DaGVja2JveCkge1xuLy8gICAgICAgY29uZmlybUNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbi8vICAgICB9XG4vLyAgICAgJGRhdGUuZGF0ZXBpY2tlcignc2V0RGF0ZScsICcnKTtcbi8vICAgfVxuLy8gICBjb25zdCBvbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uKGUpIHtcbi8vICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbF9fb3ZlcmxheScpKSB7XG4vLyAgICAgICBvbkNsb3NlQ2xpY2soKTtcbi8vICAgICB9XG4vLyAgIH1cbi8vICAgY29uc3Qgb25GaWVsZENoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbi8vICAgICBjb25zb2xlLmxvZyhlLnRhcmdldCk7XG4vLyAgICAgaWYgKGlzRm9ybUZpbGxlZCgpICYmIHN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbi8vICAgICAgIHN1Ym1pdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4vLyAgICAgfSBlbHNlIGlmICghaXNGb3JtRmlsbGVkKCkgJiYgIXN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbi8vICAgICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICBjb25zdCBvbkZpbGVDbGVhciA9IGZ1bmN0aW9uKCkge1xuLy8gICAgIGlmICghc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuLy8gICAgICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4vLyAgICAgfVxuLy8gICB9XG4vLyAgIGNvbnN0IGlzRm9ybUZpbGxlZCA9IGZ1bmN0aW9uKCkge1xuLy8gICAgIGNvbnNvbGUubG9nKCEhZmlsZUlucHV0ICYmICEhY29uZmlybUNoZWNrYm94KTtcbi8vICAgICByZXR1cm4gZmlsZUlucHV0ICYmIGNvbmZpcm1DaGVja2JveFxuLy8gICAgICAgP1xuLy8gICAgICAgJGRhdGUuZGF0ZXBpY2tlcignZ2V0RGF0ZScpXG4vLyAgICAgICAmJiB0aW1lSW5wdXQudmFsdWUgIT09ICcnXG4vLyAgICAgICAmJiBjb25maXJtQ2hlY2tib3guY2hlY2tlZCA9PT0gdHJ1ZVxuLy8gICAgICAgJiYgZmlsZUlucHV0LnZhbHVlICE9PSAnJ1xuLy8gICAgICAgOlxuLy8gICAgICAgJGRhdGUuZGF0ZXBpY2tlcignZ2V0RGF0ZScpXG4vLyAgICAgICAmJiB0aW1lSW5wdXQudmFsdWUgIT09ICcnO1xuLy8gICB9XG4vLyAgIHdpbmRvdy5vbkRlbGl2ZXJ5RmlsZURyb3AgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgb25GaWVsZENoYW5nZSgpO1xuLy8gICB9XG4vLyAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbi8vICAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbi8vICAgZGF0ZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25GaWVsZENoYW5nZSk7XG4vLyAgIHRpbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uRmllbGRDaGFuZ2UpO1xuLy8gICBmaWxlSW5wdXQgJiYgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHdpbmRvdy5vbkRlbGl2ZXJ5RmlsZURyb3ApO1xuLy8gICBjb25maXJtQ2hlY2tib3ggJiYgY29uZmlybUNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmllbGRDaGFuZ2UpO1xuLy8gICBmaWxlQ2xlYXIgJiYgZmlsZUNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25GaWxlQ2xlYXIpO1xuLy8gfSkoKTtcblxuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgbWVudSA9ICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLW1lbnUnKTtcbiAgdmFyIGJ0biA9ICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpO1xuICAkLmV4dGVuZCgkLmRhdGVwaWNrZXIsIHtcbiAgICAvLyBSZWZlcmVuY2UgdGhlIG9yaWduYWwgZnVuY3Rpb24gc28gd2UgY2FuIG92ZXJyaWRlIGl0IGFuZCBjYWxsIGl0IGxhdGVyXG4gICAgX2lubGluZURhdGVwaWNrZXIyOiAkLmRhdGVwaWNrZXIuX2lubGluZURhdGVwaWNrZXIsXG4gICAgLy8gT3ZlcnJpZGUgdGhlIF9pbmxpbmVEYXRlcGlja2VyIG1ldGhvZFxuICAgIF9pbmxpbmVEYXRlcGlja2VyOiBmdW5jdGlvbiBfaW5saW5lRGF0ZXBpY2tlcih0YXJnZXQsIGluc3QpIHtcbiAgICAgIC8vIENhbGwgdGhlIG9yaWdpbmFsXG4gICAgICB0aGlzLl9pbmxpbmVEYXRlcGlja2VyMih0YXJnZXQsIGluc3QpO1xuXG4gICAgICB2YXIgYmVmb3JlU2hvdyA9ICQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdiZWZvcmVTaG93Jyk7XG5cbiAgICAgIGlmIChiZWZvcmVTaG93KSB7XG4gICAgICAgIGJlZm9yZVNob3cuYXBwbHkodGFyZ2V0LCBbdGFyZ2V0LCBpbnN0XSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLW1lbnUnKS50b2dnbGUoKTtcbiAgfSk7XG4gICQoJyNlYXJuZWQtZGF0ZScpLmRhdGVwaWNrZXIoe1xuICAgIHJhbmdlOiAncGVyaW9kJyxcbiAgICBpbmxpbmU6IHRydWUsXG4gICAgc2hvd0J1dHRvblBhbmVsOiB0cnVlLFxuICAgIHNob3dPdGhlck1vbnRoczogdHJ1ZSxcbiAgICBzZWxlY3RPdGhlck1vbnRoczogdHJ1ZSxcbiAgICBjbG9zZVRleHQ6IFwi0JPQvtGC0L7QstC+XCIsXG4gICAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5JyxcbiAgICBiZWZvcmVTaG93OiBmdW5jdGlvbiBiZWZvcmVTaG93KGlucHV0LCBpbnN0KSB7XG4gICAgICBpbnN0LmRwRGl2LmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoLTI0cHgpJyk7XG4gICAgICBpbnN0LmRwRGl2LmFkZENsYXNzKCdjYWxlbmRhci1yYW5nZScpO1xuICAgIH0sXG4gICAgb25TZWxlY3Q6IGZ1bmN0aW9uIG9uU2VsZWN0KGRhdGVUZXh0LCBpbnN0LCBleHRlbnNpb25SYW5nZSkge1xuICAgICAgJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtYnRuJykudGV4dChleHRlbnNpb25SYW5nZS5zdGFydERhdGVUZXh0ICsgJyAtICcgKyBleHRlbnNpb25SYW5nZS5lbmREYXRlVGV4dCk7XG4gICAgfVxuICB9KTtcbiAgJChkb2N1bWVudCkubW91c2V1cChmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZW51ID0gJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtbWVudScpO1xuICAgIHZhciBidG4gPSAkKCcubXV0dWFsLWNhbGNzX19lYXJuZWQtZGF0ZS1idG4nKTtcblxuICAgIGlmICghbWVudS5pcyhlLnRhcmdldCkgJiYgbWVudS5oYXMoZS50YXJnZXQpLmxlbmd0aCA9PT0gMCAmJiAhYnRuLmlzKGUudGFyZ2V0KSAmJiBidG4uaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgIG1lbnUuaGlkZSgpO1xuICAgIH1cbiAgfSk7XG4gICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLW1lbnUtYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdhbGwtdGltZScpKSB7XG4gICAgICAkKCcuZWFybmVkLWRhdGVfX3N0YXJ0LXBlcmlvZCcpLnRleHQoKSA9PT0gJycgPyAkKCcubXV0dWFsLWNhbGNzX19lYXJuZWQtZGF0ZS1idG4nKS50ZXh0KCQodGhpcykudGV4dCgpKSA6ICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpLnRleHQoJCh0aGlzKS50ZXh0KCkgKyBcIiAoXFx1MDQ0MVxceEEwXCIgKyAkKCcuZWFybmVkLWRhdGVfX3N0YXJ0LXBlcmlvZCcpLnRleHQoKSArICcpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpLnRleHQoJCh0aGlzKS50ZXh0KCkpO1xuICAgIH1cblxuICAgIG1lbnUuaGlkZSgpO1xuICB9KTtcbiAgJCgnLmVhcm5lZC1kYXRlX19zdGFydC1wZXJpb2QnKS50ZXh0KCkgPT09ICcnID8gJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtYnRuJykudGV4dCgkKCcubXV0dWFsLWNhbGNzX19lYXJuZWQtZGF0ZS1tZW51LWJ0bi5hbGwtdGltZScpLnRleHQoKSkgOiAkKCcubXV0dWFsLWNhbGNzX19lYXJuZWQtZGF0ZS1idG4nKS50ZXh0KCQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLW1lbnUtYnRuLmFsbC10aW1lJykudGV4dCgpICsgXCIgKFxcdTA0NDFcXHhBMFwiICsgJCgnLmVhcm5lZC1kYXRlX19zdGFydC1wZXJpb2QnKS50ZXh0KCkgKyAnKScpO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgJCgnLmZpbHRlcnNfX2J0bicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMpLnBhcmVudCgpLm5leHQoKS5zbGlkZVRvZ2dsZSgpO1xuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICB9KTtcbiAgJCgnLmZpbHRlcnNfX2J0bi1jbGVhcicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKCcuZmlsdGVycyAuc2VsZWN0JykudmFsKCfQktGB0LUnKTtcbiAgICAkKCcuZmlsdGVycyAuc2VsZWN0JykudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgJCgnLmZpbHRlcnMgLnNlbGVjdCcpLnJlbW92ZUNsYXNzKCdwaWNrZWQnKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgJHRyaWdnZXIgPSAkKFwiLnN1YnNjcmlwdGlvbi1hbGxfX2hpZXJhcmNoeS10cmlnZ2VyXCIpO1xuICB2YXIgJG1vZGFsID0gJChcIi5oaWVyYXJjaHlcIik7XG4gIHZhciAkYmxhY2tvdXQgPSAkbW9kYWwuZmluZChcIi5oaWVyYXJjaHlfX2JsYWNrb3V0XCIpO1xuICB2YXIgJGNsb3NlID0gJG1vZGFsLmZpbmQoXCIuaGllcmFyY2h5X19jbG9zZVwiKTtcbiAgJHRyaWdnZXIub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgJG1vZGFsLmFkZENsYXNzKFwib3BlbmVkXCIpO1xuICB9KTtcbiAgJGJsYWNrb3V0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICRtb2RhbC5yZW1vdmVDbGFzcyhcIm9wZW5lZFwiKTtcbiAgfSk7XG4gICRjbG9zZS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAkbW9kYWwucmVtb3ZlQ2xhc3MoXCJvcGVuZWRcIik7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyICRsaW5lID0gJChcIi5oaWVyYXJjaHlfX2xpbmVcIik7XG4gICRsaW5lLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykuZmluZChcIi5oaWVyYXJjaHlfX29wZW4tYnRuXCIpLnRvZ2dsZUNsYXNzKFwib3BlbmVkXCIpO1xuICAgICQodGhpcykubmV4dCgpLnRvZ2dsZUNsYXNzKFwib3BlbmVkXCIpO1xuXG4gICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKFwibWFya2VkXCIpKSB7XG4gICAgICAkbGluZS5yZW1vdmVDbGFzcyhcIm1hcmtlZFwiKTtcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJtYXJrZWRcIik7XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBjb250cmFjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5zdGFsbGF0aW9uLWFjY291bnRzLW1vYmlsZScpO1xuXG4gIGlmICghY29udHJhY3RzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNsaWRlciA9IG5ldyBTd2lwZXIoJy5pbnN0YWxsYXRpb24tYWNjb3VudHMtbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5pbnN0YWxsYXRpb24tYWNjb3VudHMtbW9iaWxlX19wYWdpbmF0aW9uJyxcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiB0cnVlXG4gICAgfVxuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBkZWxpdmVyeUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5zdGFsbGF0aW9uX19jb25maXJtLWJ0bicpO1xuXG4gIGlmICghZGVsaXZlcnlCdG5zWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vICQoJyNkZWxpdmVyeS1kYXRlJykuZGF0ZXBpY2tlcigpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbihkYXRlVGV4dCkge1xuICAvLyAgIG9uRmllbGRDaGFuZ2UoKTtcbiAgLy8gfSk7XG5cblxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5zdGFsbGF0aW9uX19tb2RhbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIC8vIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgLy8gY29uc3Qgc3VibWl0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19zdWJtaXQnKTtcbiAgLy8gY29uc3QgZmlsZUlucHV0QmxvY2sgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC1pbnB1dC1maWxlJyk7XG4gIC8vIGNvbnN0IGZpbGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19pbnB1dCcpO1xuICAvLyBjb25zdCBkYXRlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC1kYXRlJyk7XG4gIC8vIGNvbnN0IHRpbWVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kZWxpdmVyeS1vci1waWNrdXBfX21vZGFsLXRpbWUnKTtcbiAgLy8gY29uc3QgY29uZmlybUNoZWNrYm94ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmNoZWNrYm94X19pbnB1dCcpO1xuXG5cbiAgZGVsaXZlcnlCdG5zLmZvckVhY2goZnVuY3Rpb24gKGJ0bikge1xuICAgIG5ldyBNb2RhbChidG4sIG1vZGFsKTtcbiAgfSk7IC8vY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIGlmIChmaWxlSW5wdXRCbG9jay5jbGFzc0xpc3QuY29udGFpbnMoJ2xvYWRlZCcpKSB7XG4gIC8vICAgZmlsZUlucHV0QmxvY2suY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkJyk7XG4gIC8vICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gIC8vICAgaWYoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtcbiAgLy8gICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gIC8vICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgLy8gICB9XG4gIC8vIH1cbiAgLy8gICBkYXRlSW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICB0aW1lSW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICBjb25maXJtQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAvLyAgICQoJyNkZWxpdmVyeS1kYXRlJykuZGF0ZXBpY2tlcignc2V0RGF0ZScsICcnKTtcbiAgLy8gfVxuICAvLyBjb25zdCBvbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgLy8gICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbF9fb3ZlcmxheScpKSB7XG4gIC8vICAgICBvbkNsb3NlQ2xpY2soKTtcbiAgLy8gICB9XG4gIC8vIH1cbiAgLy8gY29uc3Qgb25GaWVsZENoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbiAgLy8gICBpZiAoaXNGb3JtRmlsbGVkKCkgJiYgc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAvLyAgICAgc3VibWl0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgLy8gICB9IGVsc2UgaWYgKCFpc0Zvcm1GaWxsZWQoKSAmJiAhc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAvLyAgICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gIC8vICAgfVxuICAvLyB9XG4gIC8vIGNvbnN0IGlzRm9ybUZpbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHJldHVybiAkKCcjZGVsaXZlcnktZGF0ZScpLmRhdGVwaWNrZXIoJ2dldERhdGUnKVxuICAvLyAgICAgJiYgdGltZUlucHV0LnZhbHVlICE9PSAnJ1xuICAvLyAgICAgJiYgY29uZmlybUNoZWNrYm94LmNoZWNrZWQgPT09IHRydWVcbiAgLy8gICAgIC8vJiYgZmlsZUlucHV0LnZhbHVlICE9PSAnJ1xuICAvLyB9XG4gIC8vIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgLy8gb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbiAgLy8gZGF0ZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25GaWVsZENoYW5nZSk7XG4gIC8vIHRpbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uRmllbGRDaGFuZ2UpO1xuICAvL2ZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpZWxkQ2hhbmdlKTtcbiAgLy9jb25maXJtQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWVsZENoYW5nZSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgcmFkaW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGl2ZXJ5LW9yLXBpY2t1cF9faW5zdGFsbGF0aW9uLWNob29zZS1ibG9jayAgaW5wdXQnKTtcblxuICBpZiAoIXJhZGlvc1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB3cmFwcGVyID0gcmFkaW9zWzBdLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG5cbiAgZnVuY3Rpb24gb25SYWRpb0NoYW5nZSgpIHtcbiAgICBjb25zb2xlLmxvZyh3cmFwcGVyKTtcblxuICAgIGlmIChyYWRpb3NbMF0uY2hlY2tlZCkge1xuICAgICAgaWYgKHdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1tYW51YWwnKSkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3ctZm9yLW1hbnVhbCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAod3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLXJlZ2lzdHJhdGlvbicpKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItcmVnaXN0cmF0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLWRlbGl2ZXJ5JykpIHtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdzaG93LWZvci1kZWxpdmVyeScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyYWRpb3NbMV0uY2hlY2tlZCkge1xuICAgICAgaWYgKHdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1tYW51YWwnKSkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3ctZm9yLW1hbnVhbCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAod3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLWRlbGl2ZXJ5JykpIHtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93LWZvci1kZWxpdmVyeScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1yZWdpc3RyYXRpb24nKSkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9yLXJlZ2lzdHJhdGlvbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyYWRpb3NbMl0uY2hlY2tlZCkge1xuICAgICAgaWYgKHdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1kZWxpdmVyeScpKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItZGVsaXZlcnknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1yZWdpc3RyYXRpb24nKSkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3ctZm9yLXJlZ2lzdHJhdGlvbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1tYW51YWwnKSkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9yLW1hbnVhbCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJhZGlvcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvblJhZGlvQ2hhbmdlKTtcbiAgfSk7XG59KSgpOyAvLyAoZnVuY3Rpb24oKSB7XG4vLyAgIC8vIGNvbnN0IGRlbGl2ZXJ5QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnN0YWxsYXRpb25fX2NvbmZpcm0tYnRuJyk7XG4vLyAgIC8vIGlmICghZGVsaXZlcnlCdG5zWzBdKSB7XG4vLyAgIC8vICAgcmV0dXJuO1xuLy8gICAvLyB9XG4vLyAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luc3RhbGxhdGlvbl9fbW9kYWwnKTtcbi8vICAgaWYgKCFtb2RhbCkge1xuLy8gICAgIHJldHVybjtcbi8vICAgfVxuLy8gICBjb25zdCAkZGF0ZSA9ICQoJyNpbnN0YWxsYXRpb25fX21vZGFsIC5kYXRlLWlucHV0Jyk7XG4vLyAgICRkYXRlLmRhdGVwaWNrZXIoKS5vbignY2hhbmdlJywgZnVuY3Rpb24oZGF0ZVRleHQpIHtcbi8vICAgICBpZiAoJCgnI2luc3RhbGxhdGlvbl9fbW9kYWwnKS5oYXNDbGFzcygnanMtc2hvdycpKSB7XG4vLyAgICAgICBvbkZpZWxkQ2hhbmdlKCk7XG4vLyAgICAgfVxuLy8gICB9KTtcbi8vICAgY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4vLyAgIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbi8vICAgY29uc3Qgc3VibWl0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19zdWJtaXQnKTtcbi8vICAgY29uc3QgZmlsZUlucHV0QmxvY2sgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC1pbnB1dC1maWxlJyk7XG4vLyAgIGNvbnN0IGZpbGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19pbnB1dCcpO1xuLy8gICBjb25zdCBmaWxlQ2xlYXIgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19jbGVhcicpO1xuLy8gICBjb25zdCBkYXRlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC1kYXRlJyk7XG4vLyAgIGNvbnN0IHRpbWVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5kZWxpdmVyeS1vci1waWNrdXBfX21vZGFsLXRpbWUnKTtcbi8vICAgY29uc3QgY29uZmlybUNoZWNrYm94ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmNoZWNrYm94X19pbnB1dCcpO1xuLy8gICAvLyBkZWxpdmVyeUJ0bnMuZm9yRWFjaChmdW5jdGlvbihidG4pIHtcbi8vICAgLy8gICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4vLyAgIC8vIH0pO1xuLy8gICBjb25zdCBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbigpIHtcbi8vICAgICBpZiAoZmlsZUlucHV0QmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2FkZWQnKSkge1xuLy8gICAgICAgZmlsZUlucHV0QmxvY2suY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkJyk7XG4vLyAgICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcbi8vICAgICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuLy8gICAgICAgaWYoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtcbi8vICAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbi8vICAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIGRhdGVJbnB1dC52YWx1ZSA9ICcnO1xuLy8gICAgIHRpbWVJbnB1dC52YWx1ZSA9ICcnO1xuLy8gICAgIGNvbmZpcm1DaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4vLyAgICAgJGRhdGUuZGF0ZXBpY2tlcignc2V0RGF0ZScsICcnKTtcbi8vICAgfVxuLy8gICBjb25zdCBvbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uKGUpIHtcbi8vICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbF9fb3ZlcmxheScpKSB7XG4vLyAgICAgICBvbkNsb3NlQ2xpY2soKTtcbi8vICAgICB9XG4vLyAgIH1cbi8vICAgY29uc3Qgb25GaWVsZENoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbi8vICAgICBpZiAoaXNGb3JtRmlsbGVkKCkgJiYgc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuLy8gICAgICAgc3VibWl0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbi8vICAgICB9IGVsc2UgaWYgKCFpc0Zvcm1GaWxsZWQoKSAmJiAhc3VibWl0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuLy8gICAgICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4vLyAgICAgfVxuLy8gICB9XG4vLyAgIGNvbnN0IGlzRm9ybUZpbGxlZCA9IGZ1bmN0aW9uKCkge1xuLy8gICAgIHJldHVybiAkZGF0ZS5kYXRlcGlja2VyKCdnZXREYXRlJylcbi8vICAgICAgICYmIHRpbWVJbnB1dC52YWx1ZSAhPT0gJydcbi8vICAgICAgICYmIGNvbmZpcm1DaGVja2JveC5jaGVja2VkID09PSB0cnVlXG4vLyAgICAgICAmJiBmaWxlSW5wdXQudmFsdWUgIT09ICcnXG4vLyAgIH1cbi8vICAgY29uc3Qgb25GaWxlQ2xlYXIgPSBmdW5jdGlvbigpIHtcbi8vICAgICBpZiAoIXN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbi8vICAgICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICB3aW5kb3cub25JbnN0YWxsYXRpb25GaWxlRHJvcCA9IGZ1bmN0aW9uKCkge1xuLy8gICAgIG9uRmllbGRDaGFuZ2UoKTtcbi8vICAgfVxuLy8gICBjbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xvc2VDbGljayk7XG4vLyAgIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbk92ZXJsYXlDbGljayk7XG4vLyAgIGRhdGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uRmllbGRDaGFuZ2UpO1xuLy8gICB0aW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkZpZWxkQ2hhbmdlKTtcbi8vICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wKTtcbi8vICAgY29uZmlybUNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmllbGRDaGFuZ2UpO1xuLy8gICBmaWxlQ2xlYXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkZpbGVDbGVhcik7XG4vLyB9KSgpO1xuXG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBwYXltZW50Q29uZmlybUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubXV0dWFsLWNhbGNzX19tYWtlLXBheW1lbnQnKTtcblxuICBpZiAoIXBheW1lbnRDb25maXJtQnRuc1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXltZW50LXdhaXRpbmdfX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBjb25zdCBjbG9zZSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcbiAgLy8gY29uc3Qgb3ZlcmxheSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICAvLyBjb25zdCBtYWluQ2hlY2tib3ggPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcudHJhbnNhY3Rpb25zX19jaGVjay1hbGwgaW5wdXQnKTtcbiAgLy8gY29uc3Qgc2VuZGVySW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1zZW5kZXIgaW5wdXQnKTtcbiAgLy8gY29uc3QgcmVjaXBpZW50SW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1yZWNpcGllbnQgaW5wdXQnKTtcbiAgLy8gY29uc3Qgc3VtSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1zdW0gaW5wdXQnKTtcbiAgLy8gY29uc3QgcHVycG9zZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtcHVycG9zZSBpbnB1dCcpO1xuICAvLyBjb25zdCBnZXRBbGxDaGVja2JveCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHJldHVybiBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCcudHJhbnNhY3Rpb25zX19jaGVjayBpbnB1dCcpO1xuICAvLyB9O1xuICAvLyBjb25zdCBvbkFsbENoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIGdldEFsbENoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgICBjb25zdCByb3cgPSBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gIC8vICAgICBpZiAobWFpbkNoZWNrYm94LmNoZWNrZWQpIHtcbiAgLy8gICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZTtcbiAgLy8gICAgICAgaWYgKCFyb3cuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpIHtcbiAgLy8gICAgICAgICByb3cuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcbiAgLy8gICAgICAgaWYgKHJvdy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAvLyAgICAgICAgIHJvdy5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9KVxuICAvLyB9O1xuICAvLyBjb25zdCBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gICBtYWluQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAvLyAgIGdldEFsbENoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcbiAgLy8gICAgIGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gIC8vICAgfSk7XG4gIC8vICAgJCgnI3BheW1lbnQtZGF0ZScpLmRhdGVwaWNrZXIoJ3NldERhdGUnLCAnJyk7XG4gIC8vICAgc2VuZGVySW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICByZWNpcGllbnRJbnB1dC52YWx1ZSA9ICcnO1xuICAvLyAgIHN1bUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgcHVycG9zZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vIH07XG4gIC8vIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgLy8gICAgIG9uQ2xvc2VDbGljaygpO1xuICAvLyAgIH1cbiAgLy8gfVxuICAvLyBjb25zdCBvbkNoZWNrYm94Q2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XG4gIC8vICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgLy8gICB9IGVsc2Uge1xuICAvLyAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gIC8vICAgfVxuICAvLyB9XG5cblxuICBwYXltZW50Q29uZmlybUJ0bnMuZm9yRWFjaChmdW5jdGlvbiAoYnRuKSB7XG4gICAgbmV3IE1vZGFsKGJ0biwgbW9kYWwpO1xuICB9KTsgLy8gY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICAvLyBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xuICAvLyBtYWluQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25BbGxDaGFuZ2UpO1xuICAvLyBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGVja2JveENoYW5nZSk7XG4gIC8vIH0pXG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgbWVudUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdi1idG4nKTtcblxuICBpZiAoIW1lbnVCdG4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2xvc2VCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19jbG9zZS1idG4nKTtcbiAgdmFyIG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdicpO1xuXG4gIHZhciBjaGVja0lmVGFibGV0ID0gZnVuY3Rpb24gY2hlY2tJZlRhYmxldCgpIHtcbiAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDE0MzlweCknKS5tYXRjaGVzO1xuICB9O1xuXG4gIHZhciBpc1RhYmxldCA9IGNoZWNrSWZUYWJsZXQoKTtcblxuICB2YXIgb25CdG5DbGljayA9IGZ1bmN0aW9uIG9uQnRuQ2xpY2soKSB7XG4gICAgaWYgKGNoZWNrSWZUYWJsZXQoKSkge1xuICAgICAgbWVudUJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdqcy1vcGVuZWQnKTtcbiAgICAgIG5hdi5jbGFzc0xpc3QudG9nZ2xlKCdqcy1zaG93Jyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbiBvbkNsb3NlQ2xpY2soKSB7XG4gICAgbmF2LmNsYXNzTGlzdC5yZW1vdmUoJ2pzLXNob3cnKTtcbiAgICBtZW51QnRuLmNsYXNzTGlzdC50b2dnbGUoJ2pzLW9wZW5lZCcpO1xuICB9O1xuXG4gIG1lbnVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ0bkNsaWNrKTtcbiAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRyYWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tdXR1YWwtY2FsY3MtcGF5bWVudC1tb2JpbGUnKTtcblxuICBpZiAoIWNvbnRyYWN0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzbGlkZXIgPSBuZXcgU3dpcGVyKCcubXV0dWFsLWNhbGNzLXBheW1lbnQtbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5tdXR1YWwtY2FsY3MtcGF5bWVudC1tb2JpbGVfX3BhZ2luYXRpb24nLFxuICAgICAgZHluYW1pY0J1bGxldHM6IHRydWVcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRyYWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tdXR1YWwtY2FsY3MtYmxvY2stbW9iaWxlJyk7XG5cbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2xpZGVyID0gbmV3IFN3aXBlcignLm11dHVhbC1jYWxjcy1ibG9jay1tb2JpbGVfX3NsaWRlcicsIHtcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiAnLm11dHVhbC1jYWxjcy1ibG9jay1tb2JpbGVfX3BhZ2luYXRpb24nLFxuICAgICAgZHluYW1pY0J1bGxldHM6IHRydWVcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBhc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtcGFzc3dvcmQnKTtcblxuICBpZiAoIXBhc3NbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmlucHV0LWljb24tLXNob3ctcGFzc3dvcmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG5cbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICQodGhpcykubmV4dCgpLmF0dHIoJ3R5cGUnLCAndGV4dCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKHRoaXMpLm5leHQoKS5hdHRyKCd0eXBlJywgJ3Bhc3N3b3JkJyk7XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBwYXltZW50Q29uZmlybUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGF5bWVudC13YWl0aW5nX19jb25maXJtLWJ0bicpO1xuXG4gIGlmICghcGF5bWVudENvbmZpcm1CdG5zWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vJCgnI3BheW1lbnQtZGF0ZScpLmRhdGVwaWNrZXIoKTtcblxuXG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXltZW50LXdhaXRpbmdfX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBjb25zdCBjbG9zZSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcbiAgLy8gY29uc3Qgb3ZlcmxheSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICAvLyBjb25zdCBtYWluQ2hlY2tib3ggPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcudHJhbnNhY3Rpb25zX19jaGVjay1hbGwgaW5wdXQnKTtcbiAgLy8gY29uc3Qgc2VuZGVySW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1zZW5kZXIgaW5wdXQnKTtcbiAgLy8gY29uc3QgcmVjaXBpZW50SW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1yZWNpcGllbnQgaW5wdXQnKTtcbiAgLy8gY29uc3Qgc3VtSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1zdW0gaW5wdXQnKTtcbiAgLy8gY29uc3QgcHVycG9zZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtcHVycG9zZSBpbnB1dCcpO1xuICAvLyBjb25zdCBnZXRBbGxDaGVja2JveCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHJldHVybiBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCcudHJhbnNhY3Rpb25zX19jaGVjayBpbnB1dCcpO1xuICAvLyB9O1xuICAvLyBjb25zdCBvbkFsbENoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIGdldEFsbENoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgICBjb25zdCByb3cgPSBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gIC8vICAgICBpZiAobWFpbkNoZWNrYm94LmNoZWNrZWQpIHtcbiAgLy8gICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZTtcbiAgLy8gICAgICAgaWYgKCFyb3cuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpIHtcbiAgLy8gICAgICAgICByb3cuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcbiAgLy8gICAgICAgaWYgKHJvdy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAvLyAgICAgICAgIHJvdy5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9KVxuICAvLyB9O1xuICAvLyBjb25zdCBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gICBtYWluQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAvLyAgIGdldEFsbENoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcbiAgLy8gICAgIGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gIC8vICAgfSk7XG4gIC8vICAgJCgnI3BheW1lbnQtZGF0ZScpLmRhdGVwaWNrZXIoJ3NldERhdGUnLCAnJyk7XG4gIC8vICAgc2VuZGVySW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICByZWNpcGllbnRJbnB1dC52YWx1ZSA9ICcnO1xuICAvLyAgIHN1bUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgcHVycG9zZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vIH07XG4gIC8vIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgLy8gICAgIG9uQ2xvc2VDbGljaygpO1xuICAvLyAgIH1cbiAgLy8gfVxuICAvLyBjb25zdCBvbkNoZWNrYm94Q2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XG4gIC8vICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgLy8gICB9IGVsc2Uge1xuICAvLyAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gIC8vICAgfVxuICAvLyB9XG5cblxuICBwYXltZW50Q29uZmlybUJ0bnMuZm9yRWFjaChmdW5jdGlvbiAoYnRuKSB7XG4gICAgbmV3IE1vZGFsKGJ0biwgbW9kYWwpO1xuICB9KTsgLy8gY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICAvLyBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xuICAvLyBtYWluQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25BbGxDaGFuZ2UpO1xuICAvLyBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGVja2JveENoYW5nZSk7XG4gIC8vIH0pXG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAvLyBjb25zdCBwYXltZW50Q29uZmlybUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGF5bWVudC13YWl0aW5nX19jb25maXJtLWJ0bicpO1xuICAvLyBpZiAoIXBheW1lbnRDb25maXJtQnRuc1swXSkge1xuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGF5bWVudC13YWl0aW5nX19tb2RhbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIHZhciBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gIHZhciBtYWluQ2hlY2tib3ggPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcudHJhbnNhY3Rpb25zX19jaGVjay1hbGwgaW5wdXQnKTtcbiAgdmFyIHNlbmRlcklucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc2VuZGVyIGlucHV0Jyk7XG4gIHZhciByZWNpcGllbnRJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXJlY2lwaWVudCBpbnB1dCcpO1xuICB2YXIgc3VtSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcucGF5bWVudC13YWl0aW5nX19tb2RhbC1zdW0gaW5wdXQnKTtcbiAgdmFyIHB1cnBvc2VJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXB1cnBvc2UgaW5wdXQnKTtcblxuICB2YXIgZ2V0QWxsQ2hlY2tib3ggPSBmdW5jdGlvbiBnZXRBbGxDaGVja2JveCgpIHtcbiAgICByZXR1cm4gbW9kYWwucXVlcnlTZWxlY3RvckFsbCgnLnRyYW5zYWN0aW9uc19fY2hlY2sgaW5wdXQnKTtcbiAgfTtcblxuICB2YXIgZ2V0QWxsTW9iaWxlQ2hlY2tib3ggPSBmdW5jdGlvbiBnZXRBbGxNb2JpbGVDaGVja2JveCgpIHtcbiAgICByZXR1cm4gbW9kYWwucXVlcnlTZWxlY3RvckFsbCgnLnRyYW5zYWN0aW9uc19fbW9iaWxlLWNoZWNrIGlucHV0Jyk7XG4gIH07XG5cbiAgdmFyIG9uQWxsQ2hhbmdlID0gZnVuY3Rpb24gb25BbGxDaGFuZ2UoKSB7XG4gICAgZ2V0QWxsQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgcm93ID0gaXRlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuXG4gICAgICBpZiAobWFpbkNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXJvdy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAgICAgICAgIHJvdy5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChyb3cuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpIHtcbiAgICAgICAgICByb3cuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIG9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uIG9uQ2xvc2VDbGljaygpIHtcbiAgICBtYWluQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgIGdldEFsbENoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgIH0pO1xuICAgIGdldEFsbE1vYmlsZUNoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICB9KTtcbiAgICAkKCcjcGF5bWVudC1kYXRlJykuZGF0ZXBpY2tlcignc2V0RGF0ZScsICcnKTtcbiAgICBzZW5kZXJJbnB1dC52YWx1ZSA9ICcnO1xuICAgIHJlY2lwaWVudElucHV0LnZhbHVlID0gJyc7XG4gICAgc3VtSW5wdXQudmFsdWUgPSAnJztcbiAgICBwdXJwb3NlSW5wdXQudmFsdWUgPSAnJztcbiAgfTtcblxuICB2YXIgb25PdmVybGF5Q2xpY2sgPSBmdW5jdGlvbiBvbk92ZXJsYXlDbGljayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWxfX292ZXJsYXknKSkge1xuICAgICAgb25DbG9zZUNsaWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvbkNoZWNrYm94Q2hhbmdlID0gZnVuY3Rpb24gb25DaGVja2JveENoYW5nZShlKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uTW9iaWxlQ2hlY2tib3hDaGFuZ2UgPSBmdW5jdGlvbiBvbk1vYmlsZUNoZWNrYm94Q2hhbmdlKGUpIHtcbiAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gICAgfVxuICB9OyAvLyBwYXltZW50Q29uZmlybUJ0bnMuZm9yRWFjaChmdW5jdGlvbihidG4pIHtcbiAgLy8gICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4gIC8vIH0pO1xuXG5cbiAgY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xuICBtYWluQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25BbGxDaGFuZ2UpO1xuICBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hlY2tib3hDaGFuZ2UpO1xuICB9KTtcbiAgZ2V0QWxsTW9iaWxlQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbk1vYmlsZUNoZWNrYm94Q2hhbmdlKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgcGF5bWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubXV0dWFsLWNhbGNzLXBheW1lbnQtYmxvY2tfX2xpbmsnKTtcblxuICBpZiAoIXBheW1lbnRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BheW1lbnQtaW5mb19fbW9kYWwnKTtcbiAgcGF5bWVudHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgLy8gICB2YXIgamJTY2FubmVyO1xuICAvLyBmdW5jdGlvbiBvblFSQ29kZVNjYW5uZWQoc2Nhbm5lZFRleHQpIHtcbiAgLy8gICB2YXIgc2Nhbm5lZFRleHRNZW1vID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdWJzY3JpYmUtcmVnaXN0ZXJfX2lucHV0ICBpbnB1dFwiKTtcbiAgLy8gICBjb25zb2xlLmxvZyhzY2FubmVkVGV4dE1lbW8pO1xuICAvLyAgIGlmKHNjYW5uZWRUZXh0TWVtbylcbiAgLy8gICB7XG4gIC8vICAgICAgIHNjYW5uZWRUZXh0TWVtby52YWx1ZSA9IHNjYW5uZWRUZXh0O1xuICAvLyAgICAgICAkKFwiLnFyLXNjYW5uZXItbW9kYWxcIikucmVtb3ZlQ2xhc3MoXCJqcy1zaG93XCIpO1xuICAvLyAgICAgICBqYlNjYW5uZXIuc3RvcFNjYW5uaW5nKCk7XG4gIC8vICAgfVxuICAvLyB9XG4gIC8vICAgICAgICAgICAgIGZ1bmN0aW9uIHByb3ZpZGVWaWRlbygpXG4gIC8vICAgICAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgICAgIHZhciBuID0gbmF2aWdhdG9yO1xuICAvLyAgICAgICAgICAgICAgICAgaWYgKG4ubWVkaWFEZXZpY2VzICYmIG4ubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSlcbiAgLy8gICAgICAgICAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgdmlkZW86IHtcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgIGZhY2luZ01vZGU6IFwiZW52aXJvbm1lbnRcIlxuICAvLyAgICAgICAgICAgICAgICAgICAgIH0sXG4gIC8vICAgICAgICAgICAgICAgICAgICAgYXVkaW86IGZhbHNlXG4gIC8vICAgICAgICAgICAgICAgICAgIH0pO1xuICAvLyAgICAgICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBnZXRVc2VyTWVkaWEnKTtcbiAgLy8gICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICBmdW5jdGlvbiBwcm92aWRlVmlkZW9RUSgpXG4gIC8vICAgICAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKVxuICAvLyAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGV2aWNlcykge1xuICAvLyAgICAgICAgICAgICAgICAgICAgIHZhciBleENhbWVyYXMgPSBbXTtcbiAgLy8gICAgICAgICAgICAgICAgICAgICBkZXZpY2VzLmZvckVhY2goZnVuY3Rpb24oZGV2aWNlKSB7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgaWYgKGRldmljZS5raW5kID09PSAndmlkZW9pbnB1dCcpIHtcbiAgLy8gICAgICAgICAgICAgICAgICAgICBleENhbWVyYXMucHVzaChkZXZpY2UuZGV2aWNlSWQpXG4gIC8vICAgICAgICAgICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICAgICAgfSk7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShleENhbWVyYXMpO1xuICAvLyAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihpZHMpe1xuICAvLyAgICAgICAgICAgICAgICAgICAgIGlmKGlkcy5sZW5ndGggPT09IDApXG4gIC8vICAgICAgICAgICAgICAgICAgICAge1xuICAvLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQ291bGQgbm90IGZpbmQgYSB3ZWJjYW0nKTtcbiAgLy8gICAgICAgICAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW86IHtcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbmFsJzogW3tcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2VJZCc6IGlkcy5sZW5ndGggPT09IDEgPyBpZHNbMF0gOiBpZHNbMV0vL3RoaXMgd2F5IFFRIGJyb3dzZXIgb3BlbnMgdGhlIHJlYXIgY2FtZXJhXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgICAgICAgICAgICAgfSk7XG4gIC8vICAgICAgICAgICAgICAgICB9KTtcbiAgLy8gICAgICAgICAgICAgfVxuICAvLyAgICQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIuc3Vic2NyaWJlLXJlZ2lzdGVyX19idG5cIiwgKGUpID0+IHtcbiAgLy8gICAgICAgICAgICAgICBpZiAoamJTY2FubmVyKSB7XG4gIC8vICAgICAgICAgICAgICAgICAgIGpiU2Nhbm5lci5yZXN1bWVTY2FubmluZygpO1xuICAvLyAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gIC8vICAgICAgICAgICAgICAgICAgIGpiU2Nhbm5lciA9IG5ldyBKc1FSU2Nhbm5lcihvblFSQ29kZVNjYW5uZWQpO1xuICAvLyAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhqYlNjYW5uZXIpO1xuICAvLyAgICAgICAgICAgICAgICAgICBqYlNjYW5uZXIuc2V0U25hcEltYWdlTWF4U2l6ZSgzMDApO1xuICAvLyAgICAgICAgICAgICAgICAgICB2YXIgc2Nhbm5lclBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImpzLXZpZGVvLWJveFwiKTtcbiAgLy8gICAgICAgICAgICAgICAgICAgaWYoc2Nhbm5lclBhcmVudEVsZW1lbnQpXG4gIC8vICAgICAgICAgICAgICAgICAgIHtcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgIC8vYXBwZW5kIHRoZSBqYlNjYW5uZXIgdG8gYW4gZXhpc3RpbmcgRE9NIGVsZW1lbnRcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgIGpiU2Nhbm5lci5hcHBlbmRUbyhzY2FubmVyUGFyZW50RWxlbWVudCk7XG4gIC8vICAgICAgICAgICAgICAgICAgIH1cbiAgLy8gICAgICAgICAgICAgICB9XG4gIC8vICAgfSk7XG4gIC8vICAgJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIi5xci1zY2FubmVyLW1vZGFsIC5xci1zY2FubmVyLW1vZGFsX19jbG9zZVwiLCAoZSkgPT4ge1xuICAvLyAgICAgICBqYlNjYW5uZXIuc3RvcFNjYW5uaW5nKCk7XG4gIC8vICAgfSk7XG4gIHZhciBzY2FubmVyUGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwianMtdmlkZW8tYm94XCIpO1xuICB2YXIgamJTY2FubmVyO1xuICAkKCcuc3Vic2NyaWJlLXJlZ2lzdGVyX19pbnB1dCAuaW5wdXQtdGV4dCcpLmVhY2goZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpOyAvLyBmdW5jdGlvbiBvblFSQ29kZVNjYW5uZWQoc2Nhbm5lZFRleHQpIHtcbiAgICAvLyAgICAgICAkaW5wdXQudmFsKHNjYW5uZWRUZXh0KTtcbiAgICAvLyAgICAgICAkKFwiLnFyLXNjYW5uZXItbW9kYWxcIikucmVtb3ZlQ2xhc3MoXCJqcy1zaG93XCIpO1xuICAgIC8vICAgICAgIGpiU2Nhbm5lci5zdG9wU2Nhbm5pbmcoKTtcbiAgICAvLyB9XG5cbiAgICBmdW5jdGlvbiBvblFSQ29kZVNjYW5uZWQoZWwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2Nhbm5lZFRleHQpIHtcbiAgICAgICAgZWwudmFsKHNjYW5uZWRUZXh0KTtcbiAgICAgICAgJChcIi5xci1zY2FubmVyLW1vZGFsXCIpLnJlbW92ZUNsYXNzKFwianMtc2hvd1wiKTtcbiAgICAgICAgamJTY2FubmVyLnN0b3BTY2FubmluZygpO1xuICAgICAgICBqYlNjYW5uZXIucmVtb3ZlRnJvbShzY2FubmVyUGFyZW50RWxlbWVudCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb3ZpZGVWaWRlbygpIHtcbiAgICAgIHZhciBuID0gbmF2aWdhdG9yO1xuXG4gICAgICBpZiAobi5tZWRpYURldmljZXMgJiYgbi5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gICAgICAgIHJldHVybiBuLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICBmYWNpbmdNb2RlOiBcImVudmlyb25tZW50XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF1ZGlvOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBnZXRVc2VyTWVkaWEnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm92aWRlVmlkZW9RUSgpIHtcbiAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKS50aGVuKGZ1bmN0aW9uIChkZXZpY2VzKSB7XG4gICAgICAgIHZhciBleENhbWVyYXMgPSBbXTtcbiAgICAgICAgZGV2aWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXZpY2UpIHtcbiAgICAgICAgICBpZiAoZGV2aWNlLmtpbmQgPT09ICd2aWRlb2lucHV0Jykge1xuICAgICAgICAgICAgZXhDYW1lcmFzLnB1c2goZGV2aWNlLmRldmljZUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGV4Q2FtZXJhcyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChpZHMpIHtcbiAgICAgICAgaWYgKGlkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0NvdWxkIG5vdCBmaW5kIGEgd2ViY2FtJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICAnb3B0aW9uYWwnOiBbe1xuICAgICAgICAgICAgICAnc291cmNlSWQnOiBpZHMubGVuZ3RoID09PSAxID8gaWRzWzBdIDogaWRzWzFdIC8vdGhpcyB3YXkgUVEgYnJvd3NlciBvcGVucyB0aGUgcmVhciBjYW1lcmFcblxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJGlucHV0LnNpYmxpbmdzKCcuc3Vic2NyaWJlLXJlZ2lzdGVyX19idG4nKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBqYlNjYW5uZXIgPSBuZXcgSnNRUlNjYW5uZXIob25RUkNvZGVTY2FubmVkKCRpbnB1dCkpOyAvL2NvbnNvbGUubG9nKGpiU2Nhbm5lcik7XG5cbiAgICAgIGpiU2Nhbm5lci5zZXRTbmFwSW1hZ2VNYXhTaXplKDMwMCk7IC8vdmFyIHNjYW5uZXJQYXJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJqcy12aWRlby1ib3hcIik7XG5cbiAgICAgIGlmIChzY2FubmVyUGFyZW50RWxlbWVudCkge1xuICAgICAgICBzY2FubmVyUGFyZW50RWxlbWVudC5pbm5lckhUTUwgPSAnJzsgLy9hcHBlbmQgdGhlIGpiU2Nhbm5lciB0byBhbiBleGlzdGluZyBET00gZWxlbWVudFxuXG4gICAgICAgIGpiU2Nhbm5lci5hcHBlbmRUbyhzY2FubmVyUGFyZW50RWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLnFyLXNjYW5uZXItbW9kYWwgLnFyLXNjYW5uZXItbW9kYWxfX2Nsb3NlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgamJTY2FubmVyLnN0b3BTY2FubmluZygpO1xuICAgIGpiU2Nhbm5lci5yZW1vdmVGcm9tKHNjYW5uZXJQYXJlbnRFbGVtZW50KTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgcmV3YXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1YnNjcmlwdGlvbi1wYWdlX19yZXdhcmQtbW9iaWxlJyk7XG5cbiAgaWYgKCFyZXdhcmQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2xpZGVyID0gbmV3IFN3aXBlcignLnN1YnNjcmlwdGlvbi1wYWdlX19yZXdhcmQtbW9iaWxlJywge1xuICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6ICcuc3Vic2NyaXB0aW9uLXBhZ2VfX3BhZ2luYXRpb24nLFxuICAgICAgZHluYW1pY0J1bGxldHM6IHRydWVcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNjaGVkdWxlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1kZXZpY2VfX3NjaGVkdWxlJyk7XG5cbiAgaWYgKCFzY2hlZHVsZUJ0bnNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NoZWR1bGVfX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBjb25zdCByYWRpb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2NoZWR1bGVfX21vZGFsLXRvZ2dsZSBpbnB1dCcpO1xuICAvLyBjb25zdCB0b2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2NoZWR1bGVfX21vZGFsLXRvZ2dsZScpO1xuICAvLyByYWRpb3MuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZCkge1xuICAvLyAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gIC8vICAgICBpZiAoaWQgPT09IDApIHtcbiAgLy8gICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ3NlY29uZC10YWInKTtcbiAgLy8gICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ2ZpcnN0LXRhYicpO1xuICAvLyAgICAgfVxuICAvLyAgICAgaWYgKGlkID09PSAxKSB7XG4gIC8vICAgICAgIHRvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdmaXJzdC10YWInKTtcbiAgLy8gICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ3NlY29uZC10YWInKTtcbiAgLy8gICAgIH1cbiAgLy8gICB9KVxuICAvLyB9KVxuXG5cbiAgc2NoZWR1bGVCdG5zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIC8vIGNvbnN0IHNjaGVkdWxlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1kZXZpY2VfX3NjaGVkdWxlJyk7XG4gIC8vIGlmICghc2NoZWR1bGVCdG5zWzBdKSB7XG4gIC8vICAgcmV0dXJuO1xuICAvLyB9XG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY2hlZHVsZV9fbW9kYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJhZGlvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zY2hlZHVsZV9fbW9kYWwtdG9nZ2xlIGlucHV0Jyk7XG4gIHZhciB0b2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2NoZWR1bGVfX21vZGFsLXRvZ2dsZScpO1xuICByYWRpb3MuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaWQpIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpZCA9PT0gMCkge1xuICAgICAgICB0b2dnbGUuY2xhc3NMaXN0LnJlbW92ZSgnc2Vjb25kLXRhYicpO1xuICAgICAgICB0b2dnbGUuY2xhc3NMaXN0LmFkZCgnZmlyc3QtdGFiJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpZCA9PT0gMSkge1xuICAgICAgICB0b2dnbGUuY2xhc3NMaXN0LnJlbW92ZSgnZmlyc3QtdGFiJyk7XG4gICAgICAgIHRvZ2dsZS5jbGFzc0xpc3QuYWRkKCdzZWNvbmQtdGFiJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pOyAvLyBzY2hlZHVsZUJ0bnMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgLy8gfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge30pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBtYWluUGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLXBhZ2UnKTtcblxuICBpZiAoIW1haW5QYWdlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3VwcG9ydCcpO1xuICB2YXIgc3VwcG9ydENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdXBwb3J0X19jb250YWluZXInKTtcbiAgdmFyIGl0ZW1zID0gc3VwcG9ydC5xdWVyeVNlbGVjdG9yQWxsKCcuc3VwcG9ydF9faXRlbScpO1xuXG4gIGZ1bmN0aW9uIG1ha2VTbGlkZXIoKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnc3dpcGVyLWNvbnRhaW5lcicpO1xuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdzdXBwb3J0X19zbGlkZXInKTtcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnc3dpcGVyLXdyYXBwZXInKTtcbiAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpZHgpIHtcbiAgICAgIHZhciBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2xpZGUuY2xhc3NMaXN0LmFkZCgnc3dpcGVyLXNsaWRlJyk7XG4gICAgICB2YXIgbm9kZSA9IGl0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICB9KTtcbiAgICB2YXIgcGFnaW5hdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHBhZ2luYXRpb24uY2xhc3NMaXN0LmFkZCgnc3VwcG9ydF9fc2xpZGVyLXBhZ2luYXRpb24nLCAnc3dpcGVyLXBhZ2luYXRpb24nKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBhZ2luYXRpb24pO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgc3VwcG9ydENvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG4gICAgdmFyIHNsaWRlciA9IG5ldyBTd2lwZXIoJy5zdXBwb3J0X19zbGlkZXInLCB7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBlbDogJy5zdXBwb3J0X19zbGlkZXItcGFnaW5hdGlvbidcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG1ha2VTbGlkZXIoKTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQoJy5zdXBwb3J0X19kb2NzLWJ0bicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKHRoaXMpLnBhcmVudCgpLm5leHQoKS5zbGlkZVRvZ2dsZSgpO1xuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciB0cmFuc2FjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudHJhbnNhY3Rpb25zLW1vYmlsZS1ibG9jaycpO1xuXG4gIGlmICghdHJhbnNhY3Rpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNsaWRlciA9IG5ldyBTd2lwZXIoJy50cmFuc2FjdGlvbnMtbW9iaWxlLWJsb2NrX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy50cmFuc2FjdGlvbnMtbW9iaWxlLWJsb2NrX19wYWdpbmF0aW9uJyxcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiB0cnVlXG4gICAgfVxuICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQoJy5oZWFkZXJfX3VzZXItYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoJCh0aGlzKS5pcyhlLnRhcmdldCkpIHtcbiAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfSk7XG4gICQoZG9jdW1lbnQpLm9uKCdtb3VzZXVwJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgYmxvY2sgPSAkKCcuaGVhZGVyX191c2VyLWJ0bicpO1xuXG4gICAgaWYgKCFibG9jay5pcyhlLnRhcmdldCkgJiYgYmxvY2suaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgIGJsb2NrLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZlcmlmaWNhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1pbmZvX192ZXJpZmljYXRpb24nKTtcblxuICBpZiAoIXZlcmlmaWNhdGlvbkJ0blswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2ZXJpZmljYXRpb25fX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBjb25zdCBmaWxlSW5wdXRCbG9jayA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy52ZXJpZmljYXRpb25fX21vZGFsLWlucHV0LWZpbGUnKTtcbiAgLy8gY29uc3QgZmlsZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmlucHV0LWZpbGVfX2lucHV0Jyk7XG4gIC8vIGNvbnN0IGNsb3NlID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuICAvLyBjb25zdCBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gIC8vIGNvbnN0IHNhdmVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3NhdmUnKTtcbiAgLy8gY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgaWYgKGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5jb250YWlucygnbG9hZGVkJykpIHtcbiAgLy8gICAgIGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuICAvLyAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgICBzYXZlQnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gIC8vICAgICBpZighL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe1xuICAvLyAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAvLyAgICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vIH1cbiAgLy8gY29uc3Qgb25PdmVybGF5Q2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gIC8vICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWxfX292ZXJsYXknKSkge1xuICAvLyAgICAgb25DbG9zZUNsaWNrKCk7XG4gIC8vICAgfVxuICAvLyB9XG4gIC8vIGNvbnN0IG9uSW5wdXRDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgLy8gICBpZiAoZmlsZUlucHV0LnZhbHVlICE9PSAnJykge1xuICAvLyAgICAgc2F2ZUJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIC8vICAgfVxuICAvLyB9XG5cblxuICB2ZXJpZmljYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pOyAvLyBjbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xvc2VDbGljayk7XG4gIC8vIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbk92ZXJsYXlDbGljayk7XG4gIC8vIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbklucHV0Q2hhbmdlKTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIC8vIGNvbnN0IHZlcmlmaWNhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1pbmZvX192ZXJpZmljYXRpb24nKTtcbiAgLy8gaWYgKCF2ZXJpZmljYXRpb25CdG5bMF0pIHtcbiAgLy8gICByZXR1cm47XG4gIC8vIH1cbiAgdmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZlcmlmaWNhdGlvbl9fbW9kYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZpbGVJbnB1dEJsb2NrID0gbW9kYWwucXVlcnlTZWxlY3RvckFsbCgnLnZlcmlmaWNhdGlvbl9fbW9kYWwtaW5wdXQtZmlsZScpOyAvL2NvbnN0IGZpbGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19pbnB1dCcpO1xuICAvL2NvbnN0IGZpbGVDbGVhciA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cbiAgdmFyIGNsb3NlID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuICB2YXIgb3ZlcmxheSA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICB2YXIgc2F2ZUJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc2F2ZScpO1xuXG4gIHZhciBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbiBvbkNsb3NlQ2xpY2soKSB7XG4gICAgZmlsZUlucHV0QmxvY2suZm9yRWFjaChmdW5jdGlvbiAoaW5wdXRCbG9jaykge1xuICAgICAgdmFyIGZpbGVJbnB1dCA9IGlucHV0QmxvY2sucXVlcnlTZWxlY3RvcignLmlucHV0LWZpbGVfX2lucHV0Jyk7XG5cbiAgICAgIGlmIChpbnB1dEJsb2NrLmNsYXNzTGlzdC5jb250YWlucygnbG9hZGVkJykpIHtcbiAgICAgICAgaW5wdXRCbG9jay5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkZWQnKTtcbiAgICAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG4gICAgICAgIHNhdmVCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcblxuICAgICAgICBpZiAoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjaGVja0lucHV0cyA9IGZ1bmN0aW9uIGNoZWNrSW5wdXRzKCkge1xuICAgIHZhciBmaWxsZWQgPSB0cnVlO1xuICAgIGZpbGVJbnB1dEJsb2NrLmZvckVhY2goZnVuY3Rpb24gKGlucHV0QmxvY2spIHtcbiAgICAgIHZhciBmaWxlSW5wdXQgPSBpbnB1dEJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19pbnB1dCcpO1xuXG4gICAgICBpZiAoZmlsZUlucHV0LnZhbHVlID09PSAnJykge1xuICAgICAgICBmaWxsZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChmaWxsZWQgJiYgc2F2ZUJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHNhdmVCdG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIGlmICghZmlsbGVkICYmICFzYXZlQnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgc2F2ZUJ0bi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25PdmVybGF5Q2xpY2sgPSBmdW5jdGlvbiBvbk92ZXJsYXlDbGljayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWxfX292ZXJsYXknKSkge1xuICAgICAgb25DbG9zZUNsaWNrKCk7XG4gICAgfVxuICB9OyAvLyBjb25zdCBvbklucHV0Q2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgaWYgKGZpbGVJbnB1dC52YWx1ZSAhPT0gJycpIHtcbiAgLy8gICAgIHNhdmVCdG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG5cbiAgdmFyIG9uRmlsZUNsZWFyID0gZnVuY3Rpb24gb25GaWxlQ2xlYXIoKSB7XG4gICAgaWYgKCFzYXZlQnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgc2F2ZUJ0bi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAgIH1cbiAgfTsgLy8gdmVyaWZpY2F0aW9uQnRuLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIC8vIH0pXG5cblxuICB3aW5kb3cub25WZXJpZmljYXRpb25GaWxlRHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjaGVja0lucHV0cygpO1xuICB9O1xuXG4gIGZpbGVJbnB1dEJsb2NrLmZvckVhY2goZnVuY3Rpb24gKGlucHV0QmxvY2spIHtcbiAgICB2YXIgZmlsZUlucHV0ID0gaW5wdXRCbG9jay5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgICB2YXIgZmlsZUNsZWFyID0gaW5wdXRCbG9jay5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19jbGVhcicpO1xuICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB3aW5kb3cub25WZXJpZmljYXRpb25GaWxlRHJvcCk7XG4gICAgZmlsZUNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25GaWxlQ2xlYXIpO1xuICB9KTtcbiAgY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbmNlbGxhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1pbmZvX19zZXJpYWwtYnRuJyk7XG5cbiAgaWYgKCFjYW5jZWxsYXRpb25CdG5bMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3JpdGUtc2VyaWFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNhbmNlbGxhdGlvbkJ0bi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICAvLyBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG4gIC8vIGlmICghdmVyaWZpY2F0aW9uQnRuWzBdKSB7XG4gIC8vICAgcmV0dXJuO1xuICAvLyB9XG4gIHZhciBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cml0ZS1zZXJpYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLndyaXRlLXNlcmlhbF9faW5wdXQgLmlucHV0LXRleHQnKTtcbiAgdmFyIGJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc2F2ZScpO1xuXG4gIHZhciBvbklucHV0ID0gZnVuY3Rpb24gb25JbnB1dChlKSB7XG4gICAgdmFyIHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICBpZiAodmFsdWUuc3BsaXQoJyAnKS5qb2luKCcnKSAhPT0gJycgJiYgdmFsdWUubGVuZ3RoID4gMCAmJiBidG4uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICBidG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5zcGxpdCgnICcpLmpvaW4oJycpID09PSAnJyB8fCB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICghYnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICBidG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07IC8vIHZlcmlmaWNhdGlvbkJ0bi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICAvLyB9KVxuXG5cbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbklucHV0KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBjaGVja2JveDIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2hlY2tib3gtMl9faW5wdXQnKTtcblxuICBpZiAoIWNoZWNrYm94MlswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoZWNrYm94Mi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldC5jaGVja2VkID09PSB0cnVlKSB7XG4gICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSlcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICQoJy5kYXRlLWlucHV0Om5vdCguZGF0ZS1pbnB1dC1yYW5nZSknKS5kYXRlcGlja2VyKHtkYXRlRm9ybWF0OiAnZGQubW0ueXknfSk7XG5cbiAgJCgnLmRhdGUtaW5wdXQtcmFuZ2UnKS5kYXRlcGlja2VyKHtcbiAgICByYW5nZTogJ3BlcmlvZCcsXG4gICAgaW5saW5lOiB0cnVlLFxuICAgIHNob3dCdXR0b25QYW5lbDogdHJ1ZSxcbiAgICBzaG93T3RoZXJNb250aHM6IHRydWUsXG4gICAgc2VsZWN0T3RoZXJNb250aHM6IHRydWUsXG4gICAgY2xvc2VUZXh0IDogXCLQk9C+0YLQvtCy0L5cIixcbiAgICBkYXRlRm9ybWF0OiAnZGQubW0ueXknLFxuXG4gICAgYmVmb3JlU2hvdzogZnVuY3Rpb24oaW5wdXQsIGluc3QpIHtcbiAgICAgIGluc3QuZHBEaXYuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgtMjRweCknKTtcbiAgICAgIGluc3QuZHBEaXYuYWRkQ2xhc3MoJ2NhbGVuZGFyLXJhbmdlJyk7XG4gICAgfSxcblxuICAgIG9uU2VsZWN0OiBmdW5jdGlvbihkYXRlVGV4dCwgaW5zdCwgZXh0ZW5zaW9uUmFuZ2UpIHtcbiAgICAgIGluc3QuaW5wdXQudmFsKGV4dGVuc2lvblJhbmdlLnN0YXJ0RGF0ZVRleHQgKyAnIC0gJyArIGV4dGVuc2lvblJhbmdlLmVuZERhdGVUZXh0KTtcbiAgICB9LFxuICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJlcXVlc3RNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC5yZXF1ZXN0cy11cGxvYWQnKTtcblxuICBpZiAoIXJlcXVlc3RNb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGZpbGVzV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC5yZXF1ZXN0cy11cGxvYWQgLmlucHV0LWZpbGVfX3dyYXBwZXInKTtcbiAgY29uc3QgZmlsZUlucHV0SXRlbSA9IGZpbGVzV3JhcHBlci5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZScpO1xuICBjb25zdCBuZXdGaWxlSW5wdXRJdGVtID0gZmlsZUlucHV0SXRlbS5jbG9uZU5vZGUodHJ1ZSk7XG4gIGNvbnN0IHN1Ym1pdCA9IHJlcXVlc3RNb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3NhdmUnKTtcbiAgY29uc3QgY2FuY2VsID0gcmVxdWVzdE1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcblxuICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdHMgKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW5wdXRzTmFtZXMoKSB7XG4gICAgZmlsZXNXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZHgpIHtcbiAgICAgIGl0ZW0ubmFtZSA9ICdmaWxlLScgKyBpZHg7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhcklucHV0cygpIHtcbiAgICBmaWxlc1dyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0LWZpbGUtcmVxdWVzdHMnKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGlkeCkge1xuICAgICAgaWYgKGlkeCAhPT0gMCkge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVycyhpdGVtKTtcbiAgICAgICAgaXRlbS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgIXN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgJiYgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0Zvcm0oKSB7XG4gICAgY29uc3QgZmlsZXMgPSBmaWxlc1dyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLmZpbGUtbG9hZC5sb2FkZWQnKTtcblxuICAgIGZpbGVzLmxlbmd0aCA+IDBcbiAgICAgICYmIHN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICAgICYmIHN1Ym1pdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcblxuICAgIGZpbGVzLmxlbmd0aCA9PT0gMFxuICAgICAgJiYgIXN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICAgICYmIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpXG4gIH1cblxuICBmdW5jdGlvbiByZWFkVXJsKGlucHV0KSB7XG4gICAgY29uc3QgZmllbElucHV0SXRlbSA9IGlucHV0LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICBjb25zdCBmaWxlRHJvcEFyZWEgPSBpbnB1dC5wYXJlbnROb2RlO1xuICAgIGNvbnN0IGJhciA9IGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX3Byb2dyZXNzLWN1cnJlbnQnKTtcbiAgICBjb25zdCBzdGF0dXMgPSBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19zdGF0dXMgc3BhbicpO1xuICAgIGNvbnN0IGZpbGVMb2FkID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZCcpO1xuICAgIGNvbnN0IGZpbGVJbmZvID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fc2l6ZScpO1xuXG4gICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7XG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgcmVhZGVyLm9ubG9hZHN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKTtcbiAgICAgIH1cblxuICAgICAgcmVhZGVyLm9ucHJvZ3Jlc3M9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGJhci5zdHlsZS53aWR0aCA9IE1hdGgucm91bmQoZS5sb2FkZWQgLyBlLnRvdGFsICogMTAwKSArICclJztcbiAgICAgICAgc3RhdHVzLnRleHRDb250ZW50ID0gTWF0aC5yb3VuZChlLmxvYWRlZCAvIGUudG90YWwgKiAxMDApXG4gICAgICB9XG5cbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBiYXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGZpbGVEcm9wQXJlYVxuICAgICAgICAgIC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fbmFtZScpXG4gICAgICAgICAgLnRleHRDb250ZW50ID0gaW5wdXQuZmlsZXNbMF0ubmFtZTtcblxuICAgICAgICBsZXQgc2l6ZSA9IGlucHV0LmZpbGVzWzBdLnNpemU7XG4gICAgICAgIGxldCBzaXplRGltID0gJyDQsdCw0LnRgic7XG4gICAgICAgIGxldCB0eXBlID0gJ1hMU1gsICdcblxuICAgICAgICBpZiAoc2l6ZSA+PSAxMDI0ICYmIHNpemUgPCAxMDQ4NTc2KSB7XG4gICAgICAgICAgc2l6ZSA9IE1hdGgucm91bmQoc2l6ZSAvIDEwMjQpO1xuICAgICAgICAgIHNpemVEaW0gPSAnINCa0LHQsNC50YInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpemUgPSBNYXRoLnJvdW5kKHNpemUgLyAxMDI0IC8gMTAyNCk7XG4gICAgICAgICAgc2l6ZURpbSA9ICcg0JzQsdCw0LnRgic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQuZmlsZXNbMF0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcpIHtcbiAgICAgICAgICB0eXBlID0gJ1hMUywgJ1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsZUxvYWQuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJyk7XG4gICAgICAgIGZpbGVJbmZvLnRleHRDb250ZW50ID0gdHlwZSArIHNpemUgKyBzaXplRGltO1xuXG4gICAgICAgIGNvbnN0IG5ld0l0ZW0gPSBuZXdGaWxlSW5wdXRJdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgZmlsZXNXcmFwcGVyLnByZXBlbmQobmV3SXRlbSk7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXJzKG5ld0l0ZW0pO1xuICAgICAgICBtYWtlSW5wdXRzTmFtZXMoKTtcbiAgICAgICAgY2hlY2tGb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGlucHV0LmZpbGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICBjb25zdCBmaWxlSW5wdXQgPSBlLmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBsZXQgZHQgPSBlLmRhdGFUcmFuc2ZlclxuICAgIGxldCBmaWxlcyA9IGR0LmZpbGVzXG5cbiAgICBjb25zb2xlLmxvZyhmaWxlcyk7XG5cbiAgICBpZiAoZmlsZUlucHV0LmZpbGVzICYmIGZpbGVJbnB1dC5maWxlc1swXSkge1xuICAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG5cbiAgICAgIGlmKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSl7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGZpbGVzWzBdLnR5cGUgPT09ICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnXG4gICAgICAgIHx8IGZpbGVzWzBdLnR5cGUgPT09ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCdcbiAgICApIHtcbiAgICAgIGZpbGVJbnB1dC5maWxlcyA9IGZpbGVzO1xuICAgICAgcmVhZFVybChmaWxlSW5wdXQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkZpbGVDaGFuZ2UgPSAoZSkgPT4ge1xuICAgIHJlYWRVcmwoZS50YXJnZXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DbGVhcihlKSB7XG4gICAgY29uc3QgZmlsZUlucHV0SXRlbSA9IGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gZmlsZUlucHV0SXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuXG4gICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG5cbiAgICBpZighL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe1xuICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgIH1cblxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKGZpbGVJbnB1dEl0ZW0pO1xuICAgIGZpbGVJbnB1dEl0ZW0ucmVtb3ZlKCk7XG4gICAgY2hlY2tGb3JtKCk7XG4gIH1cblxuXG5cblxuICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyhpdGVtKSB7XG4gICAgY29uc3QgZHJvcEFyZWEgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19sYWJlbCcpO1xuICAgIGNvbnN0IGZpbGVJbnB1dCA9IGl0ZW0ucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBjb25zdCBmaWxlQ2xlYXIgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cbiAgICBmdW5jdGlvbiBoaWdobGlnaHQoZSkge1xuICAgICBkcm9wQXJlYS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdW5oaWdobGlnaHQoZSkge1xuICAgICBkcm9wQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcbiAgICB9O1xuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInLCAnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSlcbiAgICB9KTtcblxuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhpZ2hsaWdodCwgZmFsc2UpXG4gICAgfSk7XG5cbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVuaGlnaGxpZ2h0LCBmYWxzZSlcbiAgICB9KTtcblxuICAgIGRyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wKVxuICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpbGVDaGFuZ2UpO1xuICAgIGZpbGVDbGVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xlYXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoaXRlbSkge1xuICAgIGNvbnN0IGRyb3BBcmVhID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9fbGFiZWwnKTtcbiAgICBjb25zdCBmaWxlSW5wdXQgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgY29uc3QgZmlsZUNsZWFyID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19jbGVhcicpO1xuXG4gICAgZnVuY3Rpb24gaGlnaGxpZ2h0KGUpIHtcbiAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVuaGlnaGxpZ2h0KGUpIHtcbiAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgfTtcblxuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZHJvcEFyZWEucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHByZXZlbnREZWZhdWx0cywgZmFsc2UpXG4gICAgfSk7XG5cbiAgICBbJ2RyYWdlbnRlcicsICdkcmFnb3ZlciddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIGRyb3BBcmVhLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoaWdobGlnaHQsIGZhbHNlKVxuICAgIH0pO1xuXG4gICAgWydkcmFnbGVhdmUnLCAnZHJvcCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIGRyb3BBcmVhLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB1bmhpZ2hsaWdodCwgZmFsc2UpXG4gICAgfSk7XG5cbiAgICBkcm9wQXJlYS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcClcbiAgICBmaWxlSW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWxlQ2hhbmdlKTtcbiAgICBmaWxlQ2xlYXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsZWFyKTtcbiAgfVxuXG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoZmlsZUlucHV0SXRlbSk7XG4gIGNhbmNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIGNsZWFySW5wdXRzKCk7XG4gIH0pXG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHNjYW5VcGxvYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VuZC1zY2FuX191cGxvYWQtZmlsZScpO1xuXG4gIGlmICghc2NhblVwbG9hZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGZpbGVJbnB1dEl0ZW0gPSBzY2FuVXBsb2FkLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlJyk7XG4gIGNvbnN0IHN1Ym1pdCA9IHNjYW5VcGxvYWQucXVlcnlTZWxlY3RvcignLnNlbmQtc2Nhbl9fc3VibWl0Jyk7XG5cbiAgZnVuY3Rpb24gcHJldmVudERlZmF1bHRzIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH07XG5cbiAgLy8gZnVuY3Rpb24gbWFrZUlucHV0c05hbWVzKCkge1xuICAvLyAgIGZpbGVzV3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaWR4KSB7XG4gIC8vICAgICBpdGVtLm5hbWUgPSAnZmlsZS0nICsgaWR4O1xuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgLy8gZnVuY3Rpb24gY2xlYXJJbnB1dHMoKSB7XG4gIC8vICAgZmlsZXNXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dC1maWxlLXJlcXVlc3RzJykuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZHgpIHtcbiAgLy8gICAgIGlmIChpZHggIT09IDApIHtcbiAgLy8gICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoaXRlbSk7XG4gIC8vICAgICAgIGl0ZW0ucmVtb3ZlKCk7XG4gIC8vICAgICB9XG4gIC8vICAgfSlcblxuICAvLyAgICFzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpICYmIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAvLyB9XG5cbiAgLy8gZnVuY3Rpb24gY2hlY2tGb3JtKCkge1xuICAvLyAgIGNvbnN0IGZpbGVzID0gZmlsZXNXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5maWxlLWxvYWQubG9hZGVkJyk7XG5cbiAgLy8gICBmaWxlcy5sZW5ndGggPiAwXG4gIC8vICAgICAmJiBzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gIC8vICAgICAmJiBzdWJtaXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpXG5cbiAgLy8gICBmaWxlcy5sZW5ndGggPT09IDBcbiAgLy8gICAgICYmICFzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gIC8vICAgICAmJiBzdWJtaXQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKVxuICAvLyB9XG5cbiAgZnVuY3Rpb24gcmVhZFVybChpbnB1dCkge1xuICAgIC8vY29uc3QgZmllbElucHV0SXRlbSA9IGlucHV0LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICBjb25zdCBmaWxlRHJvcEFyZWEgPSBpbnB1dC5wYXJlbnROb2RlO1xuICAgIGNvbnN0IGJhciA9IGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX3Byb2dyZXNzLWN1cnJlbnQnKTtcbiAgICBjb25zdCBzdGF0dXMgPSBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19zdGF0dXMgc3BhbicpO1xuICAgIGNvbnN0IGZpbGVMb2FkID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZCcpO1xuICAgIGNvbnN0IGZpbGVJbmZvID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fc2l6ZScpO1xuXG4gICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7XG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgcmVhZGVyLm9ubG9hZHN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKTtcbiAgICAgIH1cblxuICAgICAgcmVhZGVyLm9ucHJvZ3Jlc3M9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGJhci5zdHlsZS53aWR0aCA9IE1hdGgucm91bmQoZS5sb2FkZWQgLyBlLnRvdGFsICogMTAwKSArICclJztcbiAgICAgICAgc3RhdHVzLnRleHRDb250ZW50ID0gTWF0aC5yb3VuZChlLmxvYWRlZCAvIGUudG90YWwgKiAxMDApXG4gICAgICB9XG5cbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBiYXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGZpbGVEcm9wQXJlYVxuICAgICAgICAgIC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fbmFtZScpXG4gICAgICAgICAgLnRleHRDb250ZW50ID0gaW5wdXQuZmlsZXNbMF0ubmFtZTtcblxuICAgICAgICBsZXQgc2l6ZSA9IGlucHV0LmZpbGVzWzBdLnNpemU7XG4gICAgICAgIGxldCBzaXplRGltID0gJyDQsdCw0LnRgic7XG5cbiAgICAgICAgaWYgKHNpemUgPj0gMTAyNCAmJiBzaXplIDwgMTA0ODU3Nikge1xuICAgICAgICAgIHNpemUgPSBNYXRoLnJvdW5kKHNpemUgLyAxMDI0KTtcbiAgICAgICAgICBzaXplRGltID0gJyDQmtCx0LDQudGCJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaXplID0gTWF0aC5yb3VuZChzaXplIC8gMTAyNCAvIDEwMjQpO1xuICAgICAgICAgIHNpemVEaW0gPSAnINCc0LHQsNC50YInO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsZUxvYWQuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJyk7XG4gICAgICAgIGZpbGVJbmZvLnRleHRDb250ZW50ID0gc2l6ZSArIHNpemVEaW07XG4gICAgICAgIHN1Ym1pdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGNvbnN0IG5ld0l0ZW0gPSBuZXdGaWxlSW5wdXRJdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgLy8gZmlsZXNXcmFwcGVyLnByZXBlbmQobmV3SXRlbSk7XG4gICAgICAgIC8vIGFkZEV2ZW50TGlzdGVuZXJzKG5ld0l0ZW0pO1xuICAgICAgICAvLyBtYWtlSW5wdXRzTmFtZXMoKTtcbiAgICAgICAgLy8gY2hlY2tGb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGlucHV0LmZpbGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICBjb25zdCBmaWxlSW5wdXQgPSBlLmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBsZXQgZHQgPSBlLmRhdGFUcmFuc2ZlclxuICAgIGxldCBmaWxlcyA9IGR0LmZpbGVzXG5cbiAgICBjb25zb2xlLmxvZyhmaWxlcyk7XG5cbiAgICBpZiAoZmlsZUlucHV0LmZpbGVzICYmIGZpbGVJbnB1dC5maWxlc1swXSkge1xuICAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG5cbiAgICAgIGlmKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSl7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpbGVJbnB1dC5maWxlcyA9IGZpbGVzO1xuICAgIHJlYWRVcmwoZmlsZUlucHV0KTtcbiAgfTtcblxuICBjb25zdCBvbkZpbGVDaGFuZ2UgPSAoZSkgPT4ge1xuICAgIHJlYWRVcmwoZS50YXJnZXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DbGVhcihlKSB7XG4gICAgY29uc3QgZmlsZUlucHV0SXRlbSA9IGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gZmlsZUlucHV0SXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIGNvbnN0IGZpbGVMb2FkID0gZmlsZUlucHV0SXRlbS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkJyk7XG5cbiAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcblxuICAgIGlmKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSl7XG4gICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgfVxuXG4gICAgLy9yZW1vdmVFdmVudExpc3RlbmVycyhmaWxlSW5wdXRJdGVtKTtcbiAgICBmaWxlSW5wdXRJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAgIGZpbGVMb2FkLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuICAgIC8vY2hlY2tGb3JtKCk7XG4gIH1cblxuXG5cblxuICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyhpdGVtKSB7XG4gICAgY29uc3QgZHJvcEFyZWEgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19sYWJlbCcpO1xuICAgIGNvbnN0IGZpbGVJbnB1dCA9IGl0ZW0ucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBjb25zdCBmaWxlQ2xlYXIgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cbiAgICBmdW5jdGlvbiBoaWdobGlnaHQoZSkge1xuICAgICBkcm9wQXJlYS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdW5oaWdobGlnaHQoZSkge1xuICAgICBkcm9wQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcbiAgICB9O1xuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInLCAnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSlcbiAgICB9KTtcblxuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhpZ2hsaWdodCwgZmFsc2UpXG4gICAgfSk7XG5cbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVuaGlnaGxpZ2h0LCBmYWxzZSlcbiAgICB9KTtcblxuICAgIGRyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wKVxuICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpbGVDaGFuZ2UpO1xuICAgIGZpbGVDbGVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xlYXIpO1xuICB9XG5cblxuICBhZGRFdmVudExpc3RlbmVycyhmaWxlSW5wdXRJdGVtKTtcbiAgLy8gY2FuY2VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gIC8vICAgY2xlYXJJbnB1dHMoKTtcbiAgLy8gfSlcblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgZmlsZURyb3BBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0LWZpbGVfX2xhYmVsJyk7XG4gIGNvbnN0IHJlcXVlc3RNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbC5yZXF1ZXN0cy11cGxvYWQnKTtcblxuICBpZiAocmVxdWVzdE1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ2lucHV0IGZpbGUnKTtcblxuICBmdW5jdGlvbiBtYWtlRmlsZUxvYWQoZmlsZURyb3BBcmVhKSB7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gZmlsZURyb3BBcmVhLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgY29uc3QgZmlsZUNsZWFyID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fY2xlYXInKTtcbiAgICAvLyDQodCx0YDQsNGB0YvQstCw0LXQvCDRgdGC0LDQvdC00LDRgNGC0L3Ri9C1INGB0L7QsdGL0YLQuNGPINC/0YDQuCDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNC4INGE0LDQudC70LBcblxuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBwcmV2ZW50RGVmYXVsdHMsIGZhbHNlKVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHRzIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YHRgtC40LvQuCDQv9GA0Lgg0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQuCDRhNCw0LnQu9CwINC90LDQtCDQvdGD0LbQvdC+0Lkg0L7QsdC70LDRgdGC0YzRjlxuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhpZ2hsaWdodCwgZmFsc2UpXG4gICAgfSk7XG5cbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB1bmhpZ2hsaWdodCwgZmFsc2UpXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGhpZ2hsaWdodChlKSB7XG4gICAgICBmaWxlRHJvcEFyZWEuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVuaGlnaGxpZ2h0KGUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcbiAgICB9O1xuXG4gICAgLy9cblxuICAgIGZpbGVEcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCwgZmFsc2UpXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICAgIGxldCBkdCA9IGUuZGF0YVRyYW5zZmVyXG4gICAgICBsZXQgZmlsZXMgPSBkdC5maWxlc1xuXG4gICAgICBpZiAoZmlsZUlucHV0LmZpbGVzICYmIGZpbGVJbnB1dC5maWxlc1swXSkge1xuICAgICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcblxuICAgICAgICBpZighL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe1xuICAgICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmlsZUlucHV0LmZpbGVzID0gZmlsZXM7XG4gICAgICBvbkZpbGVDaGFuZ2UoKTtcbiAgICAgIHdpbmRvdy5vblZlcmlmaWNhdGlvbkZpbGVEcm9wICYmIHdpbmRvdy5vblZlcmlmaWNhdGlvbkZpbGVEcm9wKCk7XG4gICAgICB3aW5kb3cub25EZWxpdmVyeUZpbGVEcm9wICYmIHdpbmRvdy5vbkRlbGl2ZXJ5RmlsZURyb3AoKTtcbiAgICAgIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wICYmIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uRmlsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgIHJlYWRVcmwoZmlsZUlucHV0KTtcbiAgICB9XG5cbiAgICBjb25zdCByZWFkVXJsID0gKGlucHV0KSA9PiB7XG4gICAgICBpZiAoaW5wdXQuZmlsZXMgJiYgaW5wdXQuZmlsZXNbMF0pIHtcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZmlsZURyb3BBcmVhLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJyk7XG4gICAgICAgICAgZmlsZURyb3BBcmVhXG4gICAgICAgICAgICAubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fbmFtZScpXG4gICAgICAgICAgICAudGV4dENvbnRlbnQgPSBpbnB1dC5maWxlc1swXS5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoaW5wdXQuZmlsZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2xlYXIoKSB7XG4gICAgICBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkZWQnKTtcblxuICAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG5cbiAgICAgIGlmKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSl7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpbGVDaGFuZ2UpO1xuICAgIGZpbGVDbGVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xlYXIpO1xuICB9XG5cbiAgd2luZG93Lm1ha2VGaWxlTG9hZCA9IG1ha2VGaWxlTG9hZDtcblxuXG4gIGlmICghZmlsZURyb3BBcmVhWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZmlsZURyb3BBcmVhLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIG1ha2VGaWxlTG9hZChpdGVtKTtcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtdGV4dCcpO1xuXG4gIGlmICghaW5wdXRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGlucHV0LnZhbHVlLnNwbGl0KCcgJykuam9pbignJykgPT09ICcnXG4gICAgICApIHtcbiAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpbnB1dC52YWx1ZSAhPT0gJydcbiAgICAgICAgJiYgIWlucHV0LmNsYXNzTGlzdC5jb250YWlucygnanMtaW5wdXRlZCcpXG4gICAgICApIHtcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGlucHV0LnZhbHVlID09PSAnJ1xuICAgICAgICAmJiBpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKVxuICAgICAgKSB7XG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KSgpO1xuIiwiKCgpID0+IHtcbiAgbGV0IHZoID0gd2luZG93LmlubmVySGVpZ2h0ICogMC4wMTtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXZoJywgYCR7dmh9cHhgKTtcblxuICBjb25zdCAkYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jKXtcbiAgICB2YXIgdGltZXI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgIGlmKHRpbWVyKSBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmMsMTAwLGV2ZW50KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgICBsZXQgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXZoJywgYCR7dmh9cHhgKTtcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2Uob25SZXNpemUpKTtcblxuICBmdW5jdGlvbiBNb2RhbCAodHJpZ2dlciwgbW9kYWwpIHtcbiAgICB0aGlzLnRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgIHRoaXMubW9kYWwgPSBtb2RhbDtcbiAgICB0aGlzLm92ZXJsYXkgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICAgIHRoaXMuY2xvc2VCdG4gPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcblxuICAgIHRoaXMub25PdmVybGF5Q2xpY2sgPSB0aGlzLm9uT3ZlcmxheUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNsb3NlQ2xpY2sgPSB0aGlzLm9uQ2xvc2VDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25UcmlnZ2VyQ2xpY2sgPSB0aGlzLm9uVHJpZ2dlckNsaWNrLmJpbmQodGhpcyk7XG4gICAgLy90aGlzLm9uUmVzaXplID0gdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoJ2pzLXNob3cnKTtcbiAgICAkYm9keS5jbGFzc0xpc3QuYWRkKCdqc19fYm9keS1uby1zY3JvbGwnKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnanMtc2hvdycpO1xuICAgICRib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2pzX19ib2R5LW5vLXNjcm9sbCcpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcy5vdmVybGF5KSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vblRyaWdnZXJDbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub3BlbigpO1xuICB9XG5cbiAgLy8gTW9kYWwucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgICBsZXQgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICAvLyAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXZoJywgYCR7dmh9cHhgKTtcbiAgLy8gfTtcblxuICBNb2RhbC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uT3ZlcmxheUNsaWNrKTtcbiAgICB0aGlzLmNsb3NlQnRuICYmIHRoaXMuY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xvc2VDbGljayk7XG4gICAgdGhpcy50cmlnZ2VyICYmIHRoaXMudHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25UcmlnZ2VyQ2xpY2spO1xuICB9XG5cbiAgd2luZG93Lk1vZGFsID0gTW9kYWw7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAgICQoJy5pbnB1dC1tb25leScpLm1hc2soJyMgIyMwIOKCvScsIHtcbiAgICAgIHJldmVyc2U6IHRydWUsXG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtcGhvbmUnKTtcblxuICBpZiAoIWlucHV0c1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGltID0gbmV3IElucHV0bWFzayhcIis3KDk5OSkgOTk5LTk5LTk5XCIpO1xuXG4gIGlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpbS5tYXNrKGl0ZW0pO1xuICB9KVxufSkoKTtcbiIsIigoKSA9PiB7XG4gIGNvbnN0IGl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlYXJjaCcpO1xuICBjb25zdCBjbG9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWFyY2ggKyAuc2VhcmNoLWNsb3NlJyk7XG5cbiAgaWYgKCFpdGVtc1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgLy8gICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT57XG4gIC8vICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdqcy1mb2N1cycpO1xuICAvLyAgIH0pO1xuICAvLyB9KTtcblxuICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBpdGVtLnZhbHVlLnNwbGl0KCcgJykuam9pbignJykgPT09ICcnXG4gICAgICApIHtcbiAgICAgICAgaXRlbS52YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGl0ZW0udmFsdWUgIT09ICcnXG4gICAgICAgICYmICFpdGVtLmNsYXNzTGlzdC5jb250YWlucygnanMtaW5wdXRlZCcpXG4gICAgICApIHtcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgaXRlbS52YWx1ZSA9PT0gJydcbiAgICAgICAgJiYgaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKVxuICAgICAgKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuICAgIH0pXG4gIH0pO1xuXG4gIGNsb3NlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VhcmNoID0gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgc2VhcmNoLnZhbHVlID0gJyc7XG4gICAgICBpZiAoXG4gICAgICAgIHNlYXJjaC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKVxuICAgICAgKSB7XG4gICAgICAgIHNlYXJjaC5jbGFzc0xpc3QucmVtb3ZlKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG4gICAgfSlcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuXG4gIGZ1bmN0aW9uIGZvcm1hdE9wdGlvbiAoaXRlbSkge1xuICAgIGNvbnN0IHZhbHVlID0gaXRlbS50ZXh0LnNwbGl0KCdzcGxpdHRlcicpO1xuICAgIGNvbnN0IGJyID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDk5OXB4KScpLm1hdGNoZXMgPyAnPGJyPicgOiAnJztcblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAkKCc8c3Bhbj4nXG4gICAgICAgICsgdmFsdWVbMF1cbiAgICAgICAgKyAnPC9zcGFuPidcbiAgICAgICAgKyBiclxuICAgICAgICArICc8c3Bhbj4nXG4gICAgICAgICsgdmFsdWVbMV1cbiAgICAgICAgKyAnPC9zcGFuPicpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGl0ZW0udGV4dDtcbiAgICB9XG4gIH1cblxuICAkKCcuc2VsZWN0Jykuc2VsZWN0Mih7XG4gICAgdGVtcGxhdGVSZXN1bHQ6IGZvcm1hdE9wdGlvbixcbiAgICB0ZW1wbGF0ZVNlbGVjdGlvbjogZm9ybWF0T3B0aW9uXG4gIH0pO1xuXG4gICQoJy5zZWxlY3QnKS5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuICAgICQodGhpcykuYWRkQ2xhc3MoJ3BpY2tlZCcpO1xuICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSBuZXcgU3dpcGVyKCcuc3Vic2NyaXB0aW9uLXRhYnMnLCB7XG4gICAgICBmcmVlTW9kZTogdHJ1ZSxcbiAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcbiAgICAgIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gICAgfSk7XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgZGVsaXZlcnlUaW1lSW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtdGltZScpO1xuXG4gIGlmICghZGVsaXZlcnlUaW1lSW5wdXRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGltID0gbmV3IElucHV0bWFzayhcIjk5Ojk5XCIpO1xuXG4gIGRlbGl2ZXJ5VGltZUlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpbS5tYXNrKGl0ZW0pO1xuICB9KTtcblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY2FuY2VsbGF0aW9uQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFjY291bnQtY3JlYXRpb25fX25ldycpO1xuXG4gIGlmICghY2FuY2VsbGF0aW9uQnRuWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWNjb3VudC1jcmVhdGlvbicpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjYW5jZWxsYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgfSk7XG5cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgLy8gY29uc3QgdmVyaWZpY2F0aW9uQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWluZm9fX3ZlcmlmaWNhdGlvbicpO1xuXG4gIC8vIGlmICghdmVyaWZpY2F0aW9uQnRuWzBdKSB7XG4gIC8vICAgcmV0dXJuO1xuICAvLyB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWNjb3VudC1jcmVhdGlvbicpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCAkaW5wdXQgPSAkKCcuYWNjb3VudC1jcmVhdGlvbl9faW5wdXQgLmlucHV0LXRleHQnKTtcbiAgY29uc3QgJGJ0biA9ICQoJyNhY2NvdW50LWNyZWF0aW9uIC5tb2RhbF9fc2F2ZScpO1xuXG4gIGNvbnN0IG9uSW5wdXQgPSBmdW5jdGlvbihlKSB7XG4gICAgY29uc3QgJGVtcHR5SW5wdXQgPSAkaW5wdXQuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc3BsaXQoJyAnKS5qb2luKCcnKSA9PT0gJydcbiAgICAgICAgfHwgdGhpcy52YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgfSk7XG5cbiAgICBpZiAoXG4gICAgICAkZW1wdHlJbnB1dC5sZW5ndGggPT09IDBcbiAgICApIHtcbiAgICAgICRidG4ucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgIH0gZWxzZSB7XG4gICAgICAkYnRuLmF0dHIoJ2Rpc2FibGVkJywgJycpO1xuICAgIH1cblxuICAgIC8vIGlmIChcbiAgICAvLyAgIHZhbHVlLnNwbGl0KCcgJykuam9pbignJykgPT09ICcnXG4gICAgLy8gICB8fCB2YWx1ZS5sZW5ndGggPT09IDBcbiAgICAvLyApIHtcbiAgICAvLyAgIGlmICghYnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgIC8vICAgICBidG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9XG4gIH1cblxuICAvLyB2ZXJpZmljYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgLy8gfSlcblxuICAkaW5wdXQub24oJ2lucHV0Jywgb25JbnB1dCk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCAkdGJvZHkgPSAkKCcuYWdlbnQtcmVwb3J0X19lcXVpcG1lbnQgIHRhYmxlICB0Ym9keScpO1xuICBjb25zdCAkbGluZSA9ICR0Ym9keS5jaGlsZHJlbigpLmVxKDEpO1xuXG4gIGNvbnNvbGUubG9nKCRsaW5lLmNsb25lKClbMF0pO1xuXG4gICQoJy5hZ2VudC1yZXBvcnRfX2FkZC1saW5lJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgJHRib2R5LmFwcGVuZCgkbGluZS5jbG9uZSgpKTtcbiAgfSlcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGNvbnRyYWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZ2VudHNfX3VzZXJzLWJsb2NrLW1vYmlsZScpO1xuXG4gIGlmICghY29udHJhY3RzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2xpZGVyID0gbmV3IFN3aXBlcignLmFnZW50c19fdXNlcnMtYmxvY2stbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5hZ2VudHNfX3VzZXJzLWJsb2NrLW1vYmlsZV9fcGFnaW5hdGlvbicsXG4gICAgICBkeW5hbWljQnVsbGV0czogdHJ1ZSxcbiAgICB9XG4gIH0pO1xuXG5cbiAgJCgnLmFnZW50c19fdXNlcnMtYnRuJykucGFyZW50KCkubmV4dCgpLnNsaWRlVG9nZ2xlKCk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAkKCcuYWdlbnRzX191c2Vycy1idG4nKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAkKHRoaXMpLnBhcmVudCgpLm5leHQoKS5zbGlkZVRvZ2dsZSgpO1xuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICB9KVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY2FuY2VsbGF0aW9uQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWluZm9fX2NhbmNlbGxhdGlvbicpO1xuXG4gIGlmICghY2FuY2VsbGF0aW9uQnRuWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsbGF0aW9uX19tb2RhbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjYW5jZWxsYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgfSk7XG5cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY2hhbmdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVzZXItc2V0dGluZ3NfX2NoYW5nZS1lbWFpbCcpO1xuXG4gIGlmICghY2hhbmdlQnV0dG9uWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmdlLWVtYWlsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoYW5nZUJ1dHRvbi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICB9KTtcblxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAvLyBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG5cbiAgLy8gaWYgKCF2ZXJpZmljYXRpb25CdG5bMF0pIHtcbiAgLy8gICByZXR1cm47XG4gIC8vIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFuZ2UtZW1haWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuY2hhbmdlLWVtYWlsX19pbnB1dCAuaW5wdXQtdGV4dCcpO1xuICBjb25zdCBidG4gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3NhdmUnKTtcblxuICBjb25zdCBvbklucHV0ID0gZnVuY3Rpb24oZSkge1xuXG4gICAgaWYgKFxuICAgICAgZS50YXJnZXQudmFsaWRpdHkudmFsaWRcbiAgICApIHtcbiAgICAgIGJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhZS50YXJnZXQudmFsaWRpdHkudmFsaWRcbiAgICApIHtcbiAgICAgIGlmICghYnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICBidG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyB2ZXJpZmljYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgLy8gfSlcblxuICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uSW5wdXQpO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY2hhbmdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVzZXItc2V0dGluZ3NfX2NoYW5nZS1waG9uZScpO1xuXG4gIGlmICghY2hhbmdlQnV0dG9uWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmdlLXBob25lJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoYW5nZUJ1dHRvbi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICB9KTtcblxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAvLyBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG5cbiAgLy8gaWYgKCF2ZXJpZmljYXRpb25CdG5bMF0pIHtcbiAgLy8gICByZXR1cm47XG4gIC8vIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFuZ2UtcGhvbmUnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuY2hhbmdlLXBob25lX19pbnB1dCAuaW5wdXQtdGV4dCcpO1xuICBjb25zdCBidG4gPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3NhdmUnKTtcblxuICBjb25zdCBvbklucHV0ID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChcbiAgICAgIGUudGFyZ2V0LnZhbHVlLmluZGV4T2YoJ18nKSA9PT0gLTFcbiAgICApIHtcbiAgICAgIGJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBlLnRhcmdldC52YWx1ZS5pbmRleE9mKCdfJykgIT09IC0xXG4gICAgKSB7XG4gICAgICBpZiAoIWJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgYnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gdmVyaWZpY2F0aW9uQnRuLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIC8vIH0pXG5cbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbklucHV0KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJhZGlvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1jcmVhdGlvbl9fY2xpZW50LXR5cGUgIGlucHV0Jyk7XG5cbiAgaWYgKCFyYWRpb3NbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0LWNyZWF0aW9uX19kZXRhaWxzJyk7XG5cbiAgZnVuY3Rpb24gb25SYWRpb0NoYW5nZSgpIHtcbiAgICBpZiAocmFkaW9zWzBdLmNoZWNrZWQpIHtcbiAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItZW50aXR5Jyk7XG4gICAgfVxuXG4gICAgaWYgKHJhZGlvc1sxXS5jaGVja2VkKSB7XG4gICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9yLWVudGl0eScpO1xuICAgIH1cbiAgfVxuXG4gIHJhZGlvcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uUmFkaW9DaGFuZ2UpO1xuICB9KTtcblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY29udHJhY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsaWVudHMtbW9iaWxlLWJsb2NrJyk7XG5cbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzbGlkZXIgPSBuZXcgU3dpcGVyKCcuY2xpZW50cy1tb2JpbGUtYmxvY2tfX3NsaWRlcicsIHtcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiAnLmNsaWVudHMtbW9iaWxlLWJsb2NrX19wYWdpbmF0aW9uJyxcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiB0cnVlLFxuICAgIH1cbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10cmlnZ2VyXScpO1xuXG4gIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIGNvbnN0IG5hbWUgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS10cmlnZ2VyJyk7XG5cbiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1vZGFsPScgKyBuYW1lICsgJ10nKTtcblxuICAgIGlmIChtb2RhbCkge1xuICAgICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgICB9XG4gIH0pXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAvLyBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG5cbiAgLy8gaWYgKCF2ZXJpZmljYXRpb25CdG5bMF0pIHtcbiAgLy8gICByZXR1cm47XG4gIC8vIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25maXJtYXRpb24tY29kZScpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jb25maXJtYXRpb24tY29kZV9faW5wdXQgLmlucHV0LXRleHQnKTtcbiAgY29uc3QgYnRuID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19zYXZlJyk7XG5cbiAgY29uc3Qgb25JbnB1dCA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoXG4gICAgICBlLnRhcmdldC52YWx1ZS5sZW5ndGggPT09IDZcbiAgICApIHtcbiAgICAgIGJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBlLnRhcmdldC52YWx1ZS5sZW5ndGggPCA2XG4gICAgKSB7XG4gICAgICBpZiAoIWJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgYnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gdmVyaWZpY2F0aW9uQnRuLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIC8vIH0pXG5cbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbklucHV0KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG5cbiAgJCgnLmRlbGl2ZXJ5LW9yLXBpY2t1cC5kb25lJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgJCh0aGlzKS5maW5kKCcuY29udHJhY3QtaW5mb19fZGVsaXZlcmVkLWFkcmVzcycpLnNsaWRlVG9nZ2xlKCk7XG4gICAgJCh0aGlzKS5maW5kKCcuY29udHJhY3QtaW5mb19fZGVsaXZlcmVkLXRvZ2dsZScpLnRvZ2dsZUNsYXNzKCdvcGVuZWQnKTtcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBjb250cmFjdFNlcnZpY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0LXNlcnZpY2VzJyk7XG5cbiAgaWYgKCFjb250cmFjdFNlcnZpY2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3Qtc2VydmljZXNfX2xpbmsnKTtcblxuICBjb25zdCBvbkxpbmtDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgIGlmIChcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrYm94LWJ0bl9fbGFiZWwnKVxuICAgICAgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tib3gtYnRuX19jaGVja2JveCcpXG4gICAgICB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkZWxpdmVyLW9yLXBpY2t1cF9fY29uZmlybS1idG4nKVxuICAgICAgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY29udHJhY3Qtc2VydmljZXNfX2RlbGl2ZXJ5LWNvbmZpcm0nKVxuICAgICkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGxpbmtzLmZvckVhY2goZnVuY3Rpb24obGluaykge1xuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkxpbmtDbGljayk7XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY29udHJhY3RzTGlua0FsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdHNfX2xpbmsnKTtcblxuICBpZiAoIWNvbnRyYWN0c0xpbmtBbGxbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBvbkxpbmtDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgIGlmIChcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrYm94LWJ0bl9fbGFiZWwnKVxuICAgICAgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tib3gtYnRuX19jaGVja2JveCcpXG4gICAgICB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb250cmFjdC1pbmZvX192ZXJpZmljYXRpb24nKVxuICAgICAgfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncGF5bWVudC13YWl0aW5nX19jb25maXJtLWJ0bicpXG4gICAgICB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb250cmFjdC1zZXJ2aWNlc19fZGVsaXZlcnktY29uZmlybScpXG4gICAgKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgY29udHJhY3RzTGlua0FsbC5mb3JFYWNoKGZ1bmN0aW9uKGxpbmspIHtcbiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25MaW5rQ2xpY2spO1xuICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGNvbnRyYWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cmFjdC1zZXJ2aWNlcy1tb2JpbGUnKTtcblxuICBpZiAoIWNvbnRyYWN0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNsaWRlciA9IG5ldyBTd2lwZXIoJy5jb250cmFjdC1zZXJ2aWNlcy1tb2JpbGVfX3NsaWRlcicsIHtcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiAnLmNvbnRyYWN0LXNlcnZpY2VzLW1vYmlsZV9fcGFnaW5hdGlvbicsXG4gICAgICBkeW5hbWljQnVsbGV0czogdHJ1ZSxcbiAgICB9XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY29udHJhY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyYWN0cy1tb2JpbGUnKTtcblxuICBpZiAoIWNvbnRyYWN0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNsaWRlciA9IG5ldyBTd2lwZXIoJy5jb250cmFjdHMtbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5jb250cmFjdHMtbW9iaWxlX19wYWdpbmF0aW9uJyxcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiB0cnVlLFxuICAgIH1cbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBjYW5jZWxsYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc3Vic2NyaXB0aW9uLXBhZ2VfX2FjdGlvbi1pdGVtLS1kZWxldGUnKTtcblxuICBpZiAoIWNhbmNlbGxhdGlvbkJ0blswXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlbGV0ZS1zZXJ2aWNlX19tb2RhbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjYW5jZWxsYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgfSlcblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgZGVsaXZlcnlCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGl2ZXItb3ItcGlja3VwX19jb25maXJtLWJ0bicpO1xuXG4gIGlmICghZGVsaXZlcnlCdG5zWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gJCgnI2RlbGl2ZXJ5LWRhdGUnKS5kYXRlcGlja2VyKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGRhdGVUZXh0KSB7XG4gIC8vICAgb25GaWVsZENoYW5nZSgpO1xuICAvLyB9KTtcblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWxpdmVyeS1vci1waWNrdXBfX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGNvbnN0IGNsb3NlID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuICAvLyBjb25zdCBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gIC8vIGNvbnN0IHN1Ym1pdCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc3VibWl0Jyk7XG4gIC8vIGNvbnN0IGZpbGVJbnB1dEJsb2NrID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtaW5wdXQtZmlsZScpO1xuICAvLyBjb25zdCBmaWxlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgLy8gY29uc3QgZGF0ZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtZGF0ZScpO1xuICAvLyBjb25zdCB0aW1lSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC10aW1lJyk7XG4gIC8vIGNvbnN0IGNvbmZpcm1DaGVja2JveCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jaGVja2JveF9faW5wdXQnKTtcblxuICBkZWxpdmVyeUJ0bnMuZm9yRWFjaChmdW5jdGlvbihidG4pIHtcbiAgICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4gIH0pO1xuXG4gIC8vIGNvbnN0IG9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIGlmIChmaWxlSW5wdXRCbG9jay5jbGFzc0xpc3QuY29udGFpbnMoJ2xvYWRlZCcpKSB7XG4gIC8vICAgICBmaWxlSW5wdXRCbG9jay5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkZWQnKTtcblxuICAvLyAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgICBzdWJtaXQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcblxuICAvLyAgICAgaWYoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtcbiAgLy8gICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgLy8gICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuXG4gIC8vICAgZGF0ZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgdGltZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgY29uZmlybUNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgLy8gICAkKCcjZGVsaXZlcnktZGF0ZScpLmRhdGVwaWNrZXIoJ3NldERhdGUnLCAnJyk7XG4gIC8vIH1cblxuICAvLyBjb25zdCBvbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgLy8gICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbF9fb3ZlcmxheScpKSB7XG4gIC8vICAgICBvbkNsb3NlQ2xpY2soKTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICAvLyBjb25zdCBvbkZpZWxkQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChpc0Zvcm1GaWxsZWQoKSAmJiBzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gIC8vICAgICBzdWJtaXQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAvLyAgIH0gZWxzZSBpZiAoIWlzRm9ybUZpbGxlZCgpICYmICFzdWJtaXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gIC8vICAgICBzdWJtaXQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICAvLyBjb25zdCBpc0Zvcm1GaWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgLy8gICByZXR1cm4gJCgnI2RlbGl2ZXJ5LWRhdGUnKS5kYXRlcGlja2VyKCdnZXREYXRlJylcbiAgLy8gICAgICYmIHRpbWVJbnB1dC52YWx1ZSAhPT0gJydcbiAgLy8gICAgICYmIGNvbmZpcm1DaGVja2JveC5jaGVja2VkID09PSB0cnVlXG4gIC8vICAgICAmJiBmaWxlSW5wdXQudmFsdWUgIT09ICcnXG4gIC8vIH1cblxuICAvLyBjbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xvc2VDbGljayk7XG4gIC8vIG92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbk92ZXJsYXlDbGljayk7XG4gIC8vIGRhdGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uRmllbGRDaGFuZ2UpO1xuICAvLyB0aW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkZpZWxkQ2hhbmdlKTtcbiAgLy8gZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmllbGRDaGFuZ2UpO1xuICAvLyBjb25maXJtQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWVsZENoYW5nZSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBkZXZpY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWNyZWF0aW9uX19kZWxpdmVyeS1kZXZpY2UnKTtcblxuICBpZiAoIWRldmljZXNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBkZXZpY2VzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIGNvbnN0IHJhZGlvcyA9IGl0ZW0ucXVlcnlTZWxlY3RvckFsbCgnLmNvbnRyYWN0LWNyZWF0aW9uX19kZWxpdmVyeS10eXBlLXdyYXBwZXIgIGlucHV0Jyk7XG5cbiAgICBmdW5jdGlvbiBvblJhZGlvQ2hhbmdlKGUpIHtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcblxuICAgICAgaWYgKHJhZGlvc1swXS5jaGVja2VkKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItcGlja3VwJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyYWRpb3NbMV0uY2hlY2tlZCkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctZm9yLXBpY2t1cCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJhZGlvcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25SYWRpb0NoYW5nZSk7XG4gICAgfSk7XG4gIH0pXG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IG1lbnUgPSAkKCcubXV0dWFsLWNhbGNzX19lYXJuZWQtZGF0ZS1tZW51Jyk7XG4gIGNvbnN0IGJ0biA9ICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpO1xuXG4gICAgJC5leHRlbmQoJC5kYXRlcGlja2VyLCB7XG5cbiAgICAgICAgLy8gUmVmZXJlbmNlIHRoZSBvcmlnbmFsIGZ1bmN0aW9uIHNvIHdlIGNhbiBvdmVycmlkZSBpdCBhbmQgY2FsbCBpdCBsYXRlclxuICAgICAgICBfaW5saW5lRGF0ZXBpY2tlcjI6ICQuZGF0ZXBpY2tlci5faW5saW5lRGF0ZXBpY2tlcixcblxuICAgICAgICAvLyBPdmVycmlkZSB0aGUgX2lubGluZURhdGVwaWNrZXIgbWV0aG9kXG4gICAgICAgIF9pbmxpbmVEYXRlcGlja2VyOiBmdW5jdGlvbiAodGFyZ2V0LCBpbnN0KSB7XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICB0aGlzLl9pbmxpbmVEYXRlcGlja2VyMih0YXJnZXQsIGluc3QpO1xuXG4gICAgICAgICAgICB2YXIgYmVmb3JlU2hvdyA9ICQuZGF0ZXBpY2tlci5fZ2V0KGluc3QsICdiZWZvcmVTaG93Jyk7XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmVTaG93KSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlU2hvdy5hcHBseSh0YXJnZXQsIFt0YXJnZXQsIGluc3RdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtbWVudScpLnRvZ2dsZSgpO1xuICB9KTtcblxuICAkKCcjZWFybmVkLWRhdGUnKS5kYXRlcGlja2VyKHtcbiAgICByYW5nZTogJ3BlcmlvZCcsXG4gICAgaW5saW5lOiB0cnVlLFxuICAgIHNob3dCdXR0b25QYW5lbDogdHJ1ZSxcbiAgICBzaG93T3RoZXJNb250aHM6IHRydWUsXG4gICAgc2VsZWN0T3RoZXJNb250aHM6IHRydWUsXG4gICAgY2xvc2VUZXh0IDogXCLQk9C+0YLQvtCy0L5cIixcbiAgICBkYXRlRm9ybWF0OiAnZGQubW0ueXknLFxuXG4gICAgYmVmb3JlU2hvdzogZnVuY3Rpb24oaW5wdXQsIGluc3QpIHtcbiAgICAgIGluc3QuZHBEaXYuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgtMjRweCknKTtcbiAgICAgIGluc3QuZHBEaXYuYWRkQ2xhc3MoJ2NhbGVuZGFyLXJhbmdlJyk7XG4gICAgfSxcblxuICAgIG9uU2VsZWN0OiBmdW5jdGlvbihkYXRlVGV4dCwgaW5zdCwgZXh0ZW5zaW9uUmFuZ2UpIHtcbiAgICAgICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpLnRleHQoZXh0ZW5zaW9uUmFuZ2Uuc3RhcnREYXRlVGV4dCArICcgLSAnICsgZXh0ZW5zaW9uUmFuZ2UuZW5kRGF0ZVRleHQpO1xuXG4gICAgfVxuICB9KTtcblxuICAkKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uIChlKXtcblx0XHRjb25zdCBtZW51ID0gJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtbWVudScpO1xuXHRcdGNvbnN0IGJ0biA9ICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpO1xuICAgIGlmICghbWVudS5pcyhlLnRhcmdldClcbiAgICAgICYmIG1lbnUuaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDBcbiAgICAgICYmICFidG4uaXMoZS50YXJnZXQpXG4gICAgICAmJiBidG4uaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDBcbiAgICApIHtcblx0XHRcdG1lbnUuaGlkZSgpO1xuXHRcdH1cbiAgfSk7XG5cbiAgJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtbWVudS1idG4nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnYWxsLXRpbWUnKSkge1xuICAgICAgJCgnLmVhcm5lZC1kYXRlX19zdGFydC1wZXJpb2QnKS50ZXh0KCkgPT09ICcnXG4gICAgICA/ICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpLnRleHQoXG4gICAgICAgICAgJCh0aGlzKS50ZXh0KClcbiAgICAgICAgKVxuICAgICAgOiAkKCcubXV0dWFsLWNhbGNzX19lYXJuZWQtZGF0ZS1idG4nKS50ZXh0KFxuICAgICAgICAgICQodGhpcykudGV4dCgpXG4gICAgICAgICAgKyAnICjRgVxcdTAwYTAnXG4gICAgICAgICAgKyAkKCcuZWFybmVkLWRhdGVfX3N0YXJ0LXBlcmlvZCcpLnRleHQoKVxuICAgICAgICAgICsgJyknXG4gICAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtYnRuJykudGV4dChcbiAgICAgICAgJCh0aGlzKS50ZXh0KClcbiAgICAgIClcbiAgICB9XG5cbiAgICBtZW51LmhpZGUoKTtcblxuICB9KTtcblxuICAkKCcuZWFybmVkLWRhdGVfX3N0YXJ0LXBlcmlvZCcpLnRleHQoKSA9PT0gJydcbiAgICAgID8gJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtYnRuJykudGV4dChcbiAgICAgICAgICAkKCcubXV0dWFsLWNhbGNzX19lYXJuZWQtZGF0ZS1tZW51LWJ0bi5hbGwtdGltZScpLnRleHQoKVxuICAgICAgICApXG4gICAgICA6ICQoJy5tdXR1YWwtY2FsY3NfX2Vhcm5lZC1kYXRlLWJ0bicpLnRleHQoXG4gICAgICAgICAgJCgnLm11dHVhbC1jYWxjc19fZWFybmVkLWRhdGUtbWVudS1idG4uYWxsLXRpbWUnKS50ZXh0KClcbiAgICAgICAgICArICcgKNGBXFx1MDBhMCdcbiAgICAgICAgICArICQoJy5lYXJuZWQtZGF0ZV9fc3RhcnQtcGVyaW9kJykudGV4dCgpXG4gICAgICAgICAgKyAnKSdcbiAgICAgICAgKVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJCgnLmZpbHRlcnNfX2J0bicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICQodGhpcykucGFyZW50KCkubmV4dCgpLnNsaWRlVG9nZ2xlKCk7XG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcygnb3BlbmVkJyk7XG4gIH0pO1xuXG4gICQoJy5maWx0ZXJzX19idG4tY2xlYXInKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAkKCcuZmlsdGVycyAuc2VsZWN0JykudmFsKCfQktGB0LUnKTtcbiAgICAkKCcuZmlsdGVycyAuc2VsZWN0JykudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgJCgnLmZpbHRlcnMgLnNlbGVjdCcpLnJlbW92ZUNsYXNzKCdwaWNrZWQnKTtcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgJHRyaWdnZXIgPSAkKFwiLnN1YnNjcmlwdGlvbi1hbGxfX2hpZXJhcmNoeS10cmlnZ2VyXCIpO1xuICBjb25zdCAkbW9kYWwgPSAkKFwiLmhpZXJhcmNoeVwiKTtcbiAgY29uc3QgJGJsYWNrb3V0ID0gJG1vZGFsLmZpbmQoXCIuaGllcmFyY2h5X19ibGFja291dFwiKTtcbiAgY29uc3QgJGNsb3NlID0gJG1vZGFsLmZpbmQoXCIuaGllcmFyY2h5X19jbG9zZVwiKTtcblxuICAkdHJpZ2dlci5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAkbW9kYWwuYWRkQ2xhc3MoXCJvcGVuZWRcIik7XG4gIH0pO1xuXG4gICRibGFja291dC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAkbW9kYWwucmVtb3ZlQ2xhc3MoXCJvcGVuZWRcIik7XG4gIH0pO1xuXG4gICRjbG9zZS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAkbW9kYWwucmVtb3ZlQ2xhc3MoXCJvcGVuZWRcIik7XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gIGNvbnN0ICRsaW5lID0gJChcIi5oaWVyYXJjaHlfX2xpbmVcIik7XG5cbiAgJGxpbmUub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzKS5maW5kKFwiLmhpZXJhcmNoeV9fb3Blbi1idG5cIikudG9nZ2xlQ2xhc3MoXCJvcGVuZWRcIik7XG4gICAgJCh0aGlzKS5uZXh0KCkudG9nZ2xlQ2xhc3MoXCJvcGVuZWRcIik7XG5cbiAgICBpZiAoISQodGhpcykuaGFzQ2xhc3MoXCJtYXJrZWRcIikpIHtcbiAgICAgICRsaW5lLnJlbW92ZUNsYXNzKFwibWFya2VkXCIpO1xuICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcIm1hcmtlZFwiKTtcbiAgICB9XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgY29udHJhY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmluc3RhbGxhdGlvbi1hY2NvdW50cy1tb2JpbGUnKTtcblxuICBpZiAoIWNvbnRyYWN0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNsaWRlciA9IG5ldyBTd2lwZXIoJy5pbnN0YWxsYXRpb24tYWNjb3VudHMtbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5pbnN0YWxsYXRpb24tYWNjb3VudHMtbW9iaWxlX19wYWdpbmF0aW9uJyxcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiB0cnVlLFxuICAgIH1cbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBkZWxpdmVyeUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5zdGFsbGF0aW9uX19jb25maXJtLWJ0bicpO1xuXG4gIGlmICghZGVsaXZlcnlCdG5zWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gJCgnI2RlbGl2ZXJ5LWRhdGUnKS5kYXRlcGlja2VyKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGRhdGVUZXh0KSB7XG4gIC8vICAgb25GaWVsZENoYW5nZSgpO1xuICAvLyB9KTtcblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnN0YWxsYXRpb25fX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGNvbnN0IGNsb3NlID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZScpO1xuICAvLyBjb25zdCBvdmVybGF5ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19vdmVybGF5Jyk7XG4gIC8vIGNvbnN0IHN1Ym1pdCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc3VibWl0Jyk7XG4gIC8vIGNvbnN0IGZpbGVJbnB1dEJsb2NrID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtaW5wdXQtZmlsZScpO1xuICAvLyBjb25zdCBmaWxlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgLy8gY29uc3QgZGF0ZUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLmRlbGl2ZXJ5LW9yLXBpY2t1cF9fbW9kYWwtZGF0ZScpO1xuICAvLyBjb25zdCB0aW1lSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuZGVsaXZlcnktb3ItcGlja3VwX19tb2RhbC10aW1lJyk7XG4gIC8vIGNvbnN0IGNvbmZpcm1DaGVja2JveCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5jaGVja2JveF9faW5wdXQnKTtcblxuICBkZWxpdmVyeUJ0bnMuZm9yRWFjaChmdW5jdGlvbihidG4pIHtcbiAgICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4gIH0pO1xuXG4gIC8vY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gaWYgKGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5jb250YWlucygnbG9hZGVkJykpIHtcbiAgICAvLyAgIGZpbGVJbnB1dEJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuXG4gICAgLy8gICBmaWxlSW5wdXQudmFsdWUgPSAnJztcbiAgICAvLyAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuXG4gICAgLy8gICBpZighL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe1xuICAgIC8vICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgIC8vICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgICAvLyAgIH1cbiAgICAvLyB9XG5cbiAgLy8gICBkYXRlSW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICB0aW1lSW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICBjb25maXJtQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAvLyAgICQoJyNkZWxpdmVyeS1kYXRlJykuZGF0ZXBpY2tlcignc2V0RGF0ZScsICcnKTtcbiAgLy8gfVxuXG4gIC8vIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgLy8gICAgIG9uQ2xvc2VDbGljaygpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIGNvbnN0IG9uRmllbGRDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gIC8vICAgaWYgKGlzRm9ybUZpbGxlZCgpICYmIHN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgLy8gICAgIHN1Ym1pdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIC8vICAgfSBlbHNlIGlmICghaXNGb3JtRmlsbGVkKCkgJiYgIXN1Ym1pdC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgLy8gICAgIHN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIGNvbnN0IGlzRm9ybUZpbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHJldHVybiAkKCcjZGVsaXZlcnktZGF0ZScpLmRhdGVwaWNrZXIoJ2dldERhdGUnKVxuICAvLyAgICAgJiYgdGltZUlucHV0LnZhbHVlICE9PSAnJ1xuICAvLyAgICAgJiYgY29uZmlybUNoZWNrYm94LmNoZWNrZWQgPT09IHRydWVcbiAgLy8gICAgIC8vJiYgZmlsZUlucHV0LnZhbHVlICE9PSAnJ1xuICAvLyB9XG5cbiAgLy8gY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICAvLyBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xuICAvLyBkYXRlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkZpZWxkQ2hhbmdlKTtcbiAgLy8gdGltZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25GaWVsZENoYW5nZSk7XG4gIC8vZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmllbGRDaGFuZ2UpO1xuICAvL2NvbmZpcm1DaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkZpZWxkQ2hhbmdlKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJhZGlvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWxpdmVyeS1vci1waWNrdXBfX2luc3RhbGxhdGlvbi1jaG9vc2UtYmxvY2sgIGlucHV0Jyk7XG5cbiAgaWYgKCFyYWRpb3NbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB3cmFwcGVyID0gcmFkaW9zWzBdLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG5cbiAgZnVuY3Rpb24gb25SYWRpb0NoYW5nZSgpIHtcbiAgICBjb25zb2xlLmxvZyh3cmFwcGVyKTtcbiAgICBpZiAocmFkaW9zWzBdLmNoZWNrZWQpIHtcbiAgICAgIGlmICggd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLW1hbnVhbCcpKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItbWFudWFsJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICggd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLXJlZ2lzdHJhdGlvbicpKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItcmVnaXN0cmF0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICggIXdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1kZWxpdmVyeScpKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnc2hvdy1mb3ItZGVsaXZlcnknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmFkaW9zWzFdLmNoZWNrZWQpIHtcbiAgICAgIGlmICggd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLW1hbnVhbCcpKSB7XG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1mb3ItbWFudWFsJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICggd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLWRlbGl2ZXJ5JykpIHtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93LWZvci1kZWxpdmVyeScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoICF3cmFwcGVyLmNsYXNzTGlzdC5jb250YWlucygnc2hvdy1mb3ItcmVnaXN0cmF0aW9uJykpIHtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdzaG93LWZvci1yZWdpc3RyYXRpb24nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmFkaW9zWzJdLmNoZWNrZWQpIHtcbiAgICAgIGlmICggd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3ctZm9yLWRlbGl2ZXJ5JykpIHtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93LWZvci1kZWxpdmVyeScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIHdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93LWZvci1yZWdpc3RyYXRpb24nKSkge1xuICAgICAgICB3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3ctZm9yLXJlZ2lzdHJhdGlvbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoICF3cmFwcGVyLmNsYXNzTGlzdC5jb250YWlucygnc2hvdy1mb3ItbWFudWFsJykpIHtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdzaG93LWZvci1tYW51YWwnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByYWRpb3MuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvblJhZGlvQ2hhbmdlKTtcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBwYXltZW50Q29uZmlybUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubXV0dWFsLWNhbGNzX19tYWtlLXBheW1lbnQnKTtcblxuICBpZiAoIXBheW1lbnRDb25maXJtQnRuc1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BheW1lbnQtd2FpdGluZ19fbW9kYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIC8vIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgLy8gY29uc3QgbWFpbkNoZWNrYm94ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnRyYW5zYWN0aW9uc19fY2hlY2stYWxsIGlucHV0Jyk7XG4gIC8vIGNvbnN0IHNlbmRlcklucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc2VuZGVyIGlucHV0Jyk7XG4gIC8vIGNvbnN0IHJlY2lwaWVudElucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtcmVjaXBpZW50IGlucHV0Jyk7XG4gIC8vIGNvbnN0IHN1bUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc3VtIGlucHV0Jyk7XG4gIC8vIGNvbnN0IHB1cnBvc2VJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXB1cnBvc2UgaW5wdXQnKTtcblxuICAvLyBjb25zdCBnZXRBbGxDaGVja2JveCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHJldHVybiBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCcudHJhbnNhY3Rpb25zX19jaGVjayBpbnB1dCcpO1xuICAvLyB9O1xuXG4gIC8vIGNvbnN0IG9uQWxsQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgZ2V0QWxsQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICAgIGNvbnN0IHJvdyA9IGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgLy8gICAgIGlmIChtYWluQ2hlY2tib3guY2hlY2tlZCkge1xuICAvLyAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xuICAvLyAgICAgICBpZiAoIXJvdy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAvLyAgICAgICAgIHJvdy5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xuICAvLyAgICAgICBpZiAocm93LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tlZCcpKSB7XG4gIC8vICAgICAgICAgcm93LmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH0pXG4gIC8vIH07XG5cbiAgLy8gY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgbWFpbkNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgLy8gICBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gIC8vICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAvLyAgIH0pO1xuICAvLyAgICQoJyNwYXltZW50LWRhdGUnKS5kYXRlcGlja2VyKCdzZXREYXRlJywgJycpO1xuICAvLyAgIHNlbmRlcklucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgcmVjaXBpZW50SW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICBzdW1JbnB1dC52YWx1ZSA9ICcnO1xuICAvLyAgIHB1cnBvc2VJbnB1dC52YWx1ZSA9ICcnO1xuICAvLyB9O1xuXG4gIC8vIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgLy8gICAgIG9uQ2xvc2VDbGljaygpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIGNvbnN0IG9uQ2hlY2tib3hDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gIC8vICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcbiAgLy8gICAgIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICBwYXltZW50Q29uZmlybUJ0bnMuZm9yRWFjaChmdW5jdGlvbihidG4pIHtcbiAgICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4gIH0pO1xuXG4gIC8vIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgLy8gb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbiAgLy8gbWFpbkNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQWxsQ2hhbmdlKTtcbiAgLy8gZ2V0QWxsQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hlY2tib3hDaGFuZ2UpO1xuICAvLyB9KVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgbWVudUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdi1idG4nKTtcblxuICBpZiAoIW1lbnVCdG4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2Nsb3NlLWJ0bicpO1xuICBjb25zdCBuYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19uYXYnKTtcblxuICBjb25zdCBjaGVja0lmVGFibGV0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiAxNDM5cHgpJykubWF0Y2hlc1xuICB9O1xuXG4gIGxldCBpc1RhYmxldCA9IGNoZWNrSWZUYWJsZXQoKTtcblxuICBjb25zdCBvbkJ0bkNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGNoZWNrSWZUYWJsZXQoKSkge1xuICAgICAgbWVudUJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdqcy1vcGVuZWQnKTtcbiAgICAgIG5hdi5jbGFzc0xpc3QudG9nZ2xlKCdqcy1zaG93Jyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgbmF2LmNsYXNzTGlzdC5yZW1vdmUoJ2pzLXNob3cnKTtcbiAgICBtZW51QnRuLmNsYXNzTGlzdC50b2dnbGUoJ2pzLW9wZW5lZCcpO1xuICB9XG5cbiAgbWVudUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQnRuQ2xpY2spO1xuICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xvc2VDbGljayk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBjb250cmFjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubXV0dWFsLWNhbGNzLXBheW1lbnQtbW9iaWxlJyk7XG5cbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzbGlkZXIgPSBuZXcgU3dpcGVyKCcubXV0dWFsLWNhbGNzLXBheW1lbnQtbW9iaWxlX19zbGlkZXInLCB7XG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogJy5tdXR1YWwtY2FsY3MtcGF5bWVudC1tb2JpbGVfX3BhZ2luYXRpb24nLFxuICAgICAgZHluYW1pY0J1bGxldHM6IHRydWUsXG4gICAgfVxuICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGNvbnRyYWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tdXR1YWwtY2FsY3MtYmxvY2stbW9iaWxlJyk7XG5cbiAgaWYgKCFjb250cmFjdHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzbGlkZXIgPSBuZXcgU3dpcGVyKCcubXV0dWFsLWNhbGNzLWJsb2NrLW1vYmlsZV9fc2xpZGVyJywge1xuICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6ICcubXV0dWFsLWNhbGNzLWJsb2NrLW1vYmlsZV9fcGFnaW5hdGlvbicsXG4gICAgICBkeW5hbWljQnVsbGV0czogdHJ1ZSxcbiAgICB9XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgcGFzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dC1wYXNzd29yZCcpO1xuXG4gIGlmICghcGFzc1swXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuaW5wdXQtaWNvbi0tc2hvdy1wYXNzd29yZCcsIGZ1bmN0aW9uKCl7XG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG5cbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICQodGhpcykubmV4dCgpLmF0dHIoJ3R5cGUnLCAndGV4dCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKHRoaXMpLm5leHQoKS5hdHRyKCd0eXBlJywgJ3Bhc3N3b3JkJyk7XG4gICAgfVxuICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHBheW1lbnRDb25maXJtQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYXltZW50LXdhaXRpbmdfX2NvbmZpcm0tYnRuJyk7XG5cbiAgaWYgKCFwYXltZW50Q29uZmlybUJ0bnNbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyQoJyNwYXltZW50LWRhdGUnKS5kYXRlcGlja2VyKCk7XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGF5bWVudC13YWl0aW5nX19tb2RhbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIC8vIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgLy8gY29uc3QgbWFpbkNoZWNrYm94ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnRyYW5zYWN0aW9uc19fY2hlY2stYWxsIGlucHV0Jyk7XG4gIC8vIGNvbnN0IHNlbmRlcklucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc2VuZGVyIGlucHV0Jyk7XG4gIC8vIGNvbnN0IHJlY2lwaWVudElucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtcmVjaXBpZW50IGlucHV0Jyk7XG4gIC8vIGNvbnN0IHN1bUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc3VtIGlucHV0Jyk7XG4gIC8vIGNvbnN0IHB1cnBvc2VJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXB1cnBvc2UgaW5wdXQnKTtcblxuICAvLyBjb25zdCBnZXRBbGxDaGVja2JveCA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIHJldHVybiBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCcudHJhbnNhY3Rpb25zX19jaGVjayBpbnB1dCcpO1xuICAvLyB9O1xuXG4gIC8vIGNvbnN0IG9uQWxsQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgZ2V0QWxsQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICAgIGNvbnN0IHJvdyA9IGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgLy8gICAgIGlmIChtYWluQ2hlY2tib3guY2hlY2tlZCkge1xuICAvLyAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xuICAvLyAgICAgICBpZiAoIXJvdy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAvLyAgICAgICAgIHJvdy5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xuICAvLyAgICAgICBpZiAocm93LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tlZCcpKSB7XG4gIC8vICAgICAgICAgcm93LmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH0pXG4gIC8vIH07XG5cbiAgLy8gY29uc3Qgb25DbG9zZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgbWFpbkNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgLy8gICBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gIC8vICAgICBpdGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAvLyAgIH0pO1xuICAvLyAgICQoJyNwYXltZW50LWRhdGUnKS5kYXRlcGlja2VyKCdzZXREYXRlJywgJycpO1xuICAvLyAgIHNlbmRlcklucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgcmVjaXBpZW50SW5wdXQudmFsdWUgPSAnJztcbiAgLy8gICBzdW1JbnB1dC52YWx1ZSA9ICcnO1xuICAvLyAgIHB1cnBvc2VJbnB1dC52YWx1ZSA9ICcnO1xuICAvLyB9O1xuXG4gIC8vIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgLy8gICAgIG9uQ2xvc2VDbGljaygpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIGNvbnN0IG9uQ2hlY2tib3hDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gIC8vICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcbiAgLy8gICAgIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICBwYXltZW50Q29uZmlybUJ0bnMuZm9yRWFjaChmdW5jdGlvbihidG4pIHtcbiAgICBuZXcgTW9kYWwoYnRuLCBtb2RhbCk7XG4gIH0pO1xuXG4gIC8vIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgLy8gb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbiAgLy8gbWFpbkNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQWxsQ2hhbmdlKTtcbiAgLy8gZ2V0QWxsQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hlY2tib3hDaGFuZ2UpO1xuICAvLyB9KVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgLy8gY29uc3QgcGF5bWVudENvbmZpcm1CdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBheW1lbnQtd2FpdGluZ19fY29uZmlybS1idG4nKTtcblxuICAvLyBpZiAoIXBheW1lbnRDb25maXJtQnRuc1swXSkge1xuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BheW1lbnQtd2FpdGluZ19fbW9kYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgY29uc3QgbWFpbkNoZWNrYm94ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnRyYW5zYWN0aW9uc19fY2hlY2stYWxsIGlucHV0Jyk7XG4gIGNvbnN0IHNlbmRlcklucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc2VuZGVyIGlucHV0Jyk7XG4gIGNvbnN0IHJlY2lwaWVudElucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtcmVjaXBpZW50IGlucHV0Jyk7XG4gIGNvbnN0IHN1bUlucHV0ID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnBheW1lbnQtd2FpdGluZ19fbW9kYWwtc3VtIGlucHV0Jyk7XG4gIGNvbnN0IHB1cnBvc2VJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5wYXltZW50LXdhaXRpbmdfX21vZGFsLXB1cnBvc2UgaW5wdXQnKTtcblxuICBjb25zdCBnZXRBbGxDaGVja2JveCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCcudHJhbnNhY3Rpb25zX19jaGVjayBpbnB1dCcpO1xuICB9O1xuXG4gIGNvbnN0IGdldEFsbE1vYmlsZUNoZWNrYm94ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG1vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoJy50cmFuc2FjdGlvbnNfX21vYmlsZS1jaGVjayBpbnB1dCcpO1xuICB9XG5cbiAgY29uc3Qgb25BbGxDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgY29uc3Qgcm93ID0gaXRlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgaWYgKG1haW5DaGVja2JveC5jaGVja2VkKSB7XG4gICAgICAgIGl0ZW0uY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIGlmICghcm93LmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgcm93LmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgIGlmIChyb3cuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpIHtcbiAgICAgICAgICByb3cuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfTtcblxuICBjb25zdCBvbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICBtYWluQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuXG4gICAgZ2V0QWxsQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgaXRlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICB9KTtcblxuICAgIGdldEFsbE1vYmlsZUNoZWNrYm94KCkuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgIH0pO1xuXG4gICAgJCgnI3BheW1lbnQtZGF0ZScpLmRhdGVwaWNrZXIoJ3NldERhdGUnLCAnJyk7XG4gICAgc2VuZGVySW5wdXQudmFsdWUgPSAnJztcbiAgICByZWNpcGllbnRJbnB1dC52YWx1ZSA9ICcnO1xuICAgIHN1bUlucHV0LnZhbHVlID0gJyc7XG4gICAgcHVycG9zZUlucHV0LnZhbHVlID0gJyc7XG4gIH07XG5cbiAgY29uc3Qgb25PdmVybGF5Q2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWxfX292ZXJsYXknKSkge1xuICAgICAgb25DbG9zZUNsaWNrKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25DaGVja2JveENoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9uTW9iaWxlQ2hlY2tib3hDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnY2hlY2tlZCcpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHBheW1lbnRDb25maXJtQnRucy5mb3JFYWNoKGZ1bmN0aW9uKGJ0bikge1xuICAvLyAgIG5ldyBNb2RhbChidG4sIG1vZGFsKTtcbiAgLy8gfSk7XG5cbiAgY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xuICBtYWluQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25BbGxDaGFuZ2UpO1xuICBnZXRBbGxDaGVja2JveCgpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGVja2JveENoYW5nZSk7XG4gIH0pXG5cbiAgZ2V0QWxsTW9iaWxlQ2hlY2tib3goKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uTW9iaWxlQ2hlY2tib3hDaGFuZ2UpO1xuICB9KVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgcGF5bWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubXV0dWFsLWNhbGNzLXBheW1lbnQtYmxvY2tfX2xpbmsnKTtcblxuICBpZiAoIXBheW1lbnRzWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGF5bWVudC1pbmZvX19tb2RhbCcpO1xuXG4gIHBheW1lbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pXG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4vLyAgIHZhciBqYlNjYW5uZXI7XG5cblxuLy8gZnVuY3Rpb24gb25RUkNvZGVTY2FubmVkKHNjYW5uZWRUZXh0KSB7XG4vLyAgIHZhciBzY2FubmVkVGV4dE1lbW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN1YnNjcmliZS1yZWdpc3Rlcl9faW5wdXQgIGlucHV0XCIpO1xuLy8gICBjb25zb2xlLmxvZyhzY2FubmVkVGV4dE1lbW8pO1xuLy8gICBpZihzY2FubmVkVGV4dE1lbW8pXG4vLyAgIHtcbi8vICAgICAgIHNjYW5uZWRUZXh0TWVtby52YWx1ZSA9IHNjYW5uZWRUZXh0O1xuLy8gICAgICAgJChcIi5xci1zY2FubmVyLW1vZGFsXCIpLnJlbW92ZUNsYXNzKFwianMtc2hvd1wiKTtcbi8vICAgICAgIGpiU2Nhbm5lci5zdG9wU2Nhbm5pbmcoKTtcbi8vICAgfVxuLy8gfVxuXG5cbi8vICAgICAgICAgICAgIGZ1bmN0aW9uIHByb3ZpZGVWaWRlbygpXG4vLyAgICAgICAgICAgICB7XG4vLyAgICAgICAgICAgICAgICAgdmFyIG4gPSBuYXZpZ2F0b3I7XG5cbi8vICAgICAgICAgICAgICAgICBpZiAobi5tZWRpYURldmljZXMgJiYgbi5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKVxuLy8gICAgICAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgICAgIHJldHVybiBuLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuLy8gICAgICAgICAgICAgICAgICAgICB2aWRlbzoge1xuLy8gICAgICAgICAgICAgICAgICAgICAgIGZhY2luZ01vZGU6IFwiZW52aXJvbm1lbnRcIlxuLy8gICAgICAgICAgICAgICAgICAgICB9LFxuLy8gICAgICAgICAgICAgICAgICAgICBhdWRpbzogZmFsc2Vcbi8vICAgICAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICAgICAgIH1cblxuLy8gICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgZ2V0VXNlck1lZGlhJyk7XG4vLyAgICAgICAgICAgICB9XG5cblxuLy8gICAgICAgICAgICAgZnVuY3Rpb24gcHJvdmlkZVZpZGVvUVEoKVxuLy8gICAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKVxuLy8gICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRldmljZXMpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgdmFyIGV4Q2FtZXJhcyA9IFtdO1xuLy8gICAgICAgICAgICAgICAgICAgICBkZXZpY2VzLmZvckVhY2goZnVuY3Rpb24oZGV2aWNlKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmIChkZXZpY2Uua2luZCA9PT0gJ3ZpZGVvaW5wdXQnKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGV4Q2FtZXJhcy5wdXNoKGRldmljZS5kZXZpY2VJZClcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIH0pO1xuXG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZXhDYW1lcmFzKTtcbi8vICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGlkcyl7XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmKGlkcy5sZW5ndGggPT09IDApXG4vLyAgICAgICAgICAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdDb3VsZCBub3QgZmluZCBhIHdlYmNhbScpO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG5cbi8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvOiB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAnb3B0aW9uYWwnOiBbe1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2VJZCc6IGlkcy5sZW5ndGggPT09IDEgPyBpZHNbMF0gOiBpZHNbMV0vL3RoaXMgd2F5IFFRIGJyb3dzZXIgb3BlbnMgdGhlIHJlYXIgY2FtZXJhXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgICB9XG5cblxuXG5cblxuXG5cbi8vICAgJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIi5zdWJzY3JpYmUtcmVnaXN0ZXJfX2J0blwiLCAoZSkgPT4ge1xuXG5cblxuLy8gICAgICAgICAgICAgICBpZiAoamJTY2FubmVyKSB7XG4vLyAgICAgICAgICAgICAgICAgICBqYlNjYW5uZXIucmVzdW1lU2Nhbm5pbmcoKTtcbi8vICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgIGpiU2Nhbm5lciA9IG5ldyBKc1FSU2Nhbm5lcihvblFSQ29kZVNjYW5uZWQpO1xuLy8gICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coamJTY2FubmVyKTtcbi8vICAgICAgICAgICAgICAgICAgIGpiU2Nhbm5lci5zZXRTbmFwSW1hZ2VNYXhTaXplKDMwMCk7XG4vLyAgICAgICAgICAgICAgICAgICB2YXIgc2Nhbm5lclBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImpzLXZpZGVvLWJveFwiKTtcbi8vICAgICAgICAgICAgICAgICAgIGlmKHNjYW5uZXJQYXJlbnRFbGVtZW50KVxuLy8gICAgICAgICAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgICAgICAgICAgIC8vYXBwZW5kIHRoZSBqYlNjYW5uZXIgdG8gYW4gZXhpc3RpbmcgRE9NIGVsZW1lbnRcbi8vICAgICAgICAgICAgICAgICAgICAgICBqYlNjYW5uZXIuYXBwZW5kVG8oc2Nhbm5lclBhcmVudEVsZW1lbnQpO1xuLy8gICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICB9XG5cblxuXG5cbi8vICAgfSk7XG5cbi8vICAgJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIi5xci1zY2FubmVyLW1vZGFsIC5xci1zY2FubmVyLW1vZGFsX19jbG9zZVwiLCAoZSkgPT4ge1xuLy8gICAgICAgamJTY2FubmVyLnN0b3BTY2FubmluZygpO1xuLy8gICB9KTtcblxuXG52YXIgc2Nhbm5lclBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImpzLXZpZGVvLWJveFwiKTtcbnZhciBqYlNjYW5uZXI7XG5cbiAgJCgnLnN1YnNjcmliZS1yZWdpc3Rlcl9faW5wdXQgLmlucHV0LXRleHQnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuXG4gICAgY29uc3QgJGlucHV0ID0gJCh0aGlzKTtcblxuICAgIC8vIGZ1bmN0aW9uIG9uUVJDb2RlU2Nhbm5lZChzY2FubmVkVGV4dCkge1xuXG4gICAgLy8gICAgICAgJGlucHV0LnZhbChzY2FubmVkVGV4dCk7XG4gICAgLy8gICAgICAgJChcIi5xci1zY2FubmVyLW1vZGFsXCIpLnJlbW92ZUNsYXNzKFwianMtc2hvd1wiKTtcbiAgICAvLyAgICAgICBqYlNjYW5uZXIuc3RvcFNjYW5uaW5nKCk7XG5cbiAgICAvLyB9XG5cbiAgICBmdW5jdGlvbiBvblFSQ29kZVNjYW5uZWQoZWwpIHtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjYW5uZWRUZXh0KSB7XG5cbiAgICAgICAgZWwudmFsKHNjYW5uZWRUZXh0KTtcbiAgICAgICAgJChcIi5xci1zY2FubmVyLW1vZGFsXCIpLnJlbW92ZUNsYXNzKFwianMtc2hvd1wiKTtcbiAgICAgICAgamJTY2FubmVyLnN0b3BTY2FubmluZygpO1xuICAgICAgICBqYlNjYW5uZXIucmVtb3ZlRnJvbShzY2FubmVyUGFyZW50RWxlbWVudCk7XG4gICAgICB9XG5cbiAgICB9XG5cblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJvdmlkZVZpZGVvKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IG5hdmlnYXRvcjtcblxuICAgICAgICAgICAgICAgIGlmIChuLm1lZGlhRGV2aWNlcyAmJiBuLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmFjaW5nTW9kZTogXCJlbnZpcm9ubWVudFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBnZXRVc2VyTWVkaWEnKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBmdW5jdGlvbiBwcm92aWRlVmlkZW9RUSgpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGV2aWNlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhDYW1lcmFzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGRldmljZXMuZm9yRWFjaChmdW5jdGlvbihkZXZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldmljZS5raW5kID09PSAndmlkZW9pbnB1dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhDYW1lcmFzLnB1c2goZGV2aWNlLmRldmljZUlkKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShleENhbWVyYXMpO1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oaWRzKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoaWRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0NvdWxkIG5vdCBmaW5kIGEgd2ViY2FtJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb25hbCc6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZUlkJzogaWRzLmxlbmd0aCA9PT0gMSA/IGlkc1swXSA6IGlkc1sxXS8vdGhpcyB3YXkgUVEgYnJvd3NlciBvcGVucyB0aGUgcmVhciBjYW1lcmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG5cblxuXG5cblxuICAgICRpbnB1dC5zaWJsaW5ncygnLnN1YnNjcmliZS1yZWdpc3Rlcl9fYnRuJykub24oXCJjbGlja1wiLCAoZSkgPT4ge1xuXG5cblxuXG4gICAgICBqYlNjYW5uZXIgPSBuZXcgSnNRUlNjYW5uZXIob25RUkNvZGVTY2FubmVkKCRpbnB1dCkpO1xuICAgICAgLy9jb25zb2xlLmxvZyhqYlNjYW5uZXIpO1xuICAgICAgamJTY2FubmVyLnNldFNuYXBJbWFnZU1heFNpemUoMzAwKTtcbiAgICAgIC8vdmFyIHNjYW5uZXJQYXJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJqcy12aWRlby1ib3hcIik7XG4gICAgICBpZihzY2FubmVyUGFyZW50RWxlbWVudClcbiAgICAgIHtcbiAgICAgICAgc2Nhbm5lclBhcmVudEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgLy9hcHBlbmQgdGhlIGpiU2Nhbm5lciB0byBhbiBleGlzdGluZyBET00gZWxlbWVudFxuICAgICAgICAgIGpiU2Nhbm5lci5hcHBlbmRUbyhzY2FubmVyUGFyZW50RWxlbWVudCk7XG4gICAgICB9XG5cblxuXG5cblxuICAgIH0pO1xuICB9KVxuXG4gICQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIucXItc2Nhbm5lci1tb2RhbCAucXItc2Nhbm5lci1tb2RhbF9fY2xvc2VcIiwgKGUpID0+IHtcbiAgICAgIGpiU2Nhbm5lci5zdG9wU2Nhbm5pbmcoKTtcbiAgICAgIGpiU2Nhbm5lci5yZW1vdmVGcm9tKHNjYW5uZXJQYXJlbnRFbGVtZW50KTtcbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCByZXdhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3Vic2NyaXB0aW9uLXBhZ2VfX3Jld2FyZC1tb2JpbGUnKTtcblxuICBpZiAoIXJld2FyZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNsaWRlciA9IG5ldyBTd2lwZXIoJy5zdWJzY3JpcHRpb24tcGFnZV9fcmV3YXJkLW1vYmlsZScsIHtcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiAnLnN1YnNjcmlwdGlvbi1wYWdlX19wYWdpbmF0aW9uJyxcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiB0cnVlLFxuICAgIH1cbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBzY2hlZHVsZUJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtZGV2aWNlX19zY2hlZHVsZScpO1xuXG4gIGlmICghc2NoZWR1bGVCdG5zWzBdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NoZWR1bGVfX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGNvbnN0IHJhZGlvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zY2hlZHVsZV9fbW9kYWwtdG9nZ2xlIGlucHV0Jyk7XG4gIC8vIGNvbnN0IHRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY2hlZHVsZV9fbW9kYWwtdG9nZ2xlJyk7XG5cbiAgLy8gcmFkaW9zLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaWQpIHtcbiAgLy8gICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAvLyAgICAgaWYgKGlkID09PSAwKSB7XG4gIC8vICAgICAgIHRvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdzZWNvbmQtdGFiJyk7XG4gIC8vICAgICAgIHRvZ2dsZS5jbGFzc0xpc3QuYWRkKCdmaXJzdC10YWInKTtcbiAgLy8gICAgIH1cblxuICAvLyAgICAgaWYgKGlkID09PSAxKSB7XG4gIC8vICAgICAgIHRvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdmaXJzdC10YWInKTtcbiAgLy8gICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ3NlY29uZC10YWInKTtcbiAgLy8gICAgIH1cbiAgLy8gICB9KVxuICAvLyB9KVxuXG4gIHNjaGVkdWxlQnRucy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIC8vIGNvbnN0IHNjaGVkdWxlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1kZXZpY2VfX3NjaGVkdWxlJyk7XG5cbiAgLy8gaWYgKCFzY2hlZHVsZUJ0bnNbMF0pIHtcbiAgLy8gICByZXR1cm47XG4gIC8vIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY2hlZHVsZV9fbW9kYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmFkaW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNjaGVkdWxlX19tb2RhbC10b2dnbGUgaW5wdXQnKTtcbiAgY29uc3QgdG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjaGVkdWxlX19tb2RhbC10b2dnbGUnKTtcblxuICByYWRpb3MuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZCkge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoaWQgPT09IDApIHtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ3NlY29uZC10YWInKTtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ2ZpcnN0LXRhYicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWQgPT09IDEpIHtcbiAgICAgICAgdG9nZ2xlLmNsYXNzTGlzdC5yZW1vdmUoJ2ZpcnN0LXRhYicpO1xuICAgICAgICB0b2dnbGUuY2xhc3NMaXN0LmFkZCgnc2Vjb25kLXRhYicpO1xuICAgICAgfVxuICAgIH0pXG4gIH0pXG5cbiAgLy8gc2NoZWR1bGVCdG5zLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAvLyAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIC8vIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IG1haW5QYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4tcGFnZScpO1xuXG4gIGlmICghbWFpblBhZ2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzdXBwb3J0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1cHBvcnQnKTtcbiAgY29uc3Qgc3VwcG9ydENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdXBwb3J0X19jb250YWluZXInKTtcbiAgY29uc3QgaXRlbXMgPSBzdXBwb3J0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdXBwb3J0X19pdGVtJyk7XG5cbiAgZnVuY3Rpb24gbWFrZVNsaWRlcigpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnc3dpcGVyLWNvbnRhaW5lcicpO1xuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdzdXBwb3J0X19zbGlkZXInKTtcbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdzd2lwZXItd3JhcHBlcicpO1xuXG4gICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpZHgpIHtcbiAgICAgIGNvbnN0IHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzbGlkZS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItc2xpZGUnKVxuICAgICAgY29uc3Qgbm9kZSA9IGl0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHBhZ2luYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwYWdpbmF0aW9uLmNsYXNzTGlzdC5hZGQoJ3N1cHBvcnRfX3NsaWRlci1wYWdpbmF0aW9uJywnc3dpcGVyLXBhZ2luYXRpb24nKTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocGFnaW5hdGlvbik7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIHN1cHBvcnRDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgY29uc3Qgc2xpZGVyID0gbmV3IFN3aXBlcignLnN1cHBvcnRfX3NsaWRlcicsIHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIGVsOiAnLnN1cHBvcnRfX3NsaWRlci1wYWdpbmF0aW9uJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFrZVNsaWRlcigpO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJCgnLnN1cHBvcnRfX2RvY3MtYnRuJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgJCh0aGlzKS5wYXJlbnQoKS5uZXh0KCkuc2xpZGVUb2dnbGUoKTtcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdvcGVuZWQnKTtcbiAgfSlcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHRyYW5zYWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50cmFuc2FjdGlvbnMtbW9iaWxlLWJsb2NrJyk7XG5cbiAgaWYgKCF0cmFuc2FjdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzbGlkZXIgPSBuZXcgU3dpcGVyKCcudHJhbnNhY3Rpb25zLW1vYmlsZS1ibG9ja19fc2xpZGVyJywge1xuICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgZWw6ICcudHJhbnNhY3Rpb25zLW1vYmlsZS1ibG9ja19fcGFnaW5hdGlvbicsXG4gICAgICBkeW5hbWljQnVsbGV0czogdHJ1ZSxcbiAgICB9XG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJCgnLmhlYWRlcl9fdXNlci1idG4nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgaWYgKCQodGhpcykuaXMoZS50YXJnZXQpKSB7XG4gICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG4gIH0pO1xuXG4gICQoZG9jdW1lbnQpLm9uKCdtb3VzZXVwJywgZnVuY3Rpb24oZSkge1xuICAgIHZhciBibG9jayA9ICQoJy5oZWFkZXJfX3VzZXItYnRuJyk7XG5cbiAgICBpZiAoIWJsb2NrLmlzKGUudGFyZ2V0KSAmJiBibG9jay5oYXMoZS50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYmxvY2sucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG5cbiAgaWYgKCF2ZXJpZmljYXRpb25CdG5bMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2ZXJpZmljYXRpb25fX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGNvbnN0IGZpbGVJbnB1dEJsb2NrID0gbW9kYWwucXVlcnlTZWxlY3RvcignLnZlcmlmaWNhdGlvbl9fbW9kYWwtaW5wdXQtZmlsZScpO1xuICAvLyBjb25zdCBmaWxlSW5wdXQgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgLy8gY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIC8vIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgLy8gY29uc3Qgc2F2ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc2F2ZScpO1xuXG4gIC8vIGNvbnN0IG9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIGlmIChmaWxlSW5wdXRCbG9jay5jbGFzc0xpc3QuY29udGFpbnMoJ2xvYWRlZCcpKSB7XG4gIC8vICAgICBmaWxlSW5wdXRCbG9jay5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkZWQnKTtcblxuICAvLyAgICAgZmlsZUlucHV0LnZhbHVlID0gJyc7XG4gIC8vICAgICBzYXZlQnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG5cbiAgLy8gICAgIGlmKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSl7XG4gIC8vICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gIC8vICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIGNvbnN0IG9uT3ZlcmxheUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAvLyAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19vdmVybGF5JykpIHtcbiAgLy8gICAgIG9uQ2xvc2VDbGljaygpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIGNvbnN0IG9uSW5wdXRDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgLy8gICBpZiAoZmlsZUlucHV0LnZhbHVlICE9PSAnJykge1xuICAvLyAgICAgc2F2ZUJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIC8vICAgfVxuICAvLyB9XG5cbiAgdmVyaWZpY2F0aW9uQnRuLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pXG5cbiAgLy8gY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsb3NlQ2xpY2spO1xuICAvLyBvdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25PdmVybGF5Q2xpY2spO1xuICAvLyBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25JbnB1dENoYW5nZSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAvLyBjb25zdCB2ZXJpZmljYXRpb25CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udHJhY3QtaW5mb19fdmVyaWZpY2F0aW9uJyk7XG5cbiAgLy8gaWYgKCF2ZXJpZmljYXRpb25CdG5bMF0pIHtcbiAgLy8gICByZXR1cm47XG4gIC8vIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2ZXJpZmljYXRpb25fX21vZGFsJyk7XG5cbiAgaWYgKCFtb2RhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGZpbGVJbnB1dEJsb2NrID0gbW9kYWwucXVlcnlTZWxlY3RvckFsbCgnLnZlcmlmaWNhdGlvbl9fbW9kYWwtaW5wdXQtZmlsZScpO1xuICAvL2NvbnN0IGZpbGVJbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1maWxlX19pbnB1dCcpO1xuICAvL2NvbnN0IGZpbGVDbGVhciA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cbiAgY29uc3QgY2xvc2UgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XG4gIGNvbnN0IG92ZXJsYXkgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX292ZXJsYXknKTtcbiAgY29uc3Qgc2F2ZUJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc2F2ZScpO1xuXG4gIGNvbnN0IG9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIGZpbGVJbnB1dEJsb2NrLmZvckVhY2goZnVuY3Rpb24oaW5wdXRCbG9jaykge1xuICAgICAgY29uc3QgZmlsZUlucHV0ID0gaW5wdXRCbG9jay5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcblxuICAgICAgaWYgKGlucHV0QmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2FkZWQnKSkge1xuICAgICAgICBpbnB1dEJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuXG4gICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICBzYXZlQnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG5cbiAgICAgICAgaWYoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtcbiAgICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGNoZWNrSW5wdXRzID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGZpbGxlZCA9IHRydWU7XG5cbiAgICBmaWxlSW5wdXRCbG9jay5mb3JFYWNoKGZ1bmN0aW9uKGlucHV0QmxvY2spIHtcbiAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IGlucHV0QmxvY2sucXVlcnlTZWxlY3RvcignLmlucHV0LWZpbGVfX2lucHV0Jyk7XG5cbiAgICAgIGlmIChmaWxlSW5wdXQudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIGZpbGxlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGZpbGxlZCAmJiBzYXZlQnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgc2F2ZUJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKCFmaWxsZWQgJiYgIXNhdmVCdG4uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICBzYXZlQnRuLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb25PdmVybGF5Q2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWxfX292ZXJsYXknKSkge1xuICAgICAgb25DbG9zZUNsaWNrKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gY29uc3Qgb25JbnB1dENoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAvLyAgIGlmIChmaWxlSW5wdXQudmFsdWUgIT09ICcnKSB7XG4gIC8vICAgICBzYXZlQnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICBjb25zdCBvbkZpbGVDbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghc2F2ZUJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHNhdmVCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICB9XG4gIH1cblxuICAvLyB2ZXJpZmljYXRpb25CdG4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gIC8vICAgbmV3IE1vZGFsKGl0ZW0sIG1vZGFsKTtcbiAgLy8gfSlcblxuICB3aW5kb3cub25WZXJpZmljYXRpb25GaWxlRHJvcCA9IGZ1bmN0aW9uKCkge1xuICAgIGNoZWNrSW5wdXRzKCk7XG4gIH07XG5cbiAgZmlsZUlucHV0QmxvY2suZm9yRWFjaChmdW5jdGlvbihpbnB1dEJsb2NrKSB7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gaW5wdXRCbG9jay5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgICBjb25zdCBmaWxlQ2xlYXIgPSBpbnB1dEJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG5cblxuICAgIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB3aW5kb3cub25WZXJpZmljYXRpb25GaWxlRHJvcCk7XG4gICAgZmlsZUNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25GaWxlQ2xlYXIpO1xuICB9KVxuXG4gIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbG9zZUNsaWNrKTtcbiAgb3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT3ZlcmxheUNsaWNrKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGNhbmNlbGxhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1pbmZvX19zZXJpYWwtYnRuJyk7XG5cbiAgaWYgKCFjYW5jZWxsYXRpb25CdG5bMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cml0ZS1zZXJpYWwnKTtcblxuICBpZiAoIW1vZGFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2FuY2VsbGF0aW9uQnRuLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIG5ldyBNb2RhbChpdGVtLCBtb2RhbCk7XG4gIH0pO1xuXG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIC8vIGNvbnN0IHZlcmlmaWNhdGlvbkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250cmFjdC1pbmZvX192ZXJpZmljYXRpb24nKTtcblxuICAvLyBpZiAoIXZlcmlmaWNhdGlvbkJ0blswXSkge1xuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dyaXRlLXNlcmlhbCcpO1xuXG4gIGlmICghbW9kYWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbnB1dCA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy53cml0ZS1zZXJpYWxfX2lucHV0IC5pbnB1dC10ZXh0Jyk7XG4gIGNvbnN0IGJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fc2F2ZScpO1xuXG4gIGNvbnN0IG9uSW5wdXQgPSBmdW5jdGlvbihlKSB7XG4gICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcblxuICAgIGlmIChcbiAgICAgIHZhbHVlLnNwbGl0KCcgJykuam9pbignJykgIT09ICcnXG4gICAgICAmJiB2YWx1ZS5sZW5ndGggPiAwXG4gICAgICAmJiBidG4uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gICAgKSB7XG4gICAgICBidG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdmFsdWUuc3BsaXQoJyAnKS5qb2luKCcnKSA9PT0gJydcbiAgICAgIHx8IHZhbHVlLmxlbmd0aCA9PT0gMFxuICAgICkge1xuICAgICAgaWYgKCFidG4uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHZlcmlmaWNhdGlvbkJ0bi5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgLy8gICBuZXcgTW9kYWwoaXRlbSwgbW9kYWwpO1xuICAvLyB9KVxuXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25JbnB1dCk7XG59KSgpO1xuIl19
